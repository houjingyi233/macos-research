/Users/xss/Library/Developer/Xcode/macOS DeviceSupport/10.16/usr/lib/liboah.dylib:
(__TEXT,__text) section
00007fff2a624f00	pushq	%rbp
00007fff2a624f01	movq	%rsp, %rbp
00007fff2a624f04	pushq	%r15
00007fff2a624f06	pushq	%r14
00007fff2a624f08	pushq	%rbx
00007fff2a624f09	pushq	%rax
00007fff2a624f0a	leaq	-0x1c(%rbp), %rdx
00007fff2a624f0e	movl	$0x0, (%rdx)
00007fff2a624f14	movq	0x5d2232ad(%rip), %r15          ## literal pool symbol address: _mach_task_self_
00007fff2a624f1b	movl	(%r15), %edi
00007fff2a624f1e	movl	$0x4, %esi
00007fff2a624f23	callq	0x7fff2a62add2                  ## symbol stub for: _task_get_special_port
00007fff2a624f28	xorl	%ebx, %ebx
00007fff2a624f2a	testl	%eax, %eax
00007fff2a624f2c	jne	0x7fff2a624f63
00007fff2a624f2e	xorl	%ebx, %ebx
00007fff2a624f30	leaq	-0x20(%rbp), %rdx
00007fff2a624f34	movl	%ebx, (%rdx)
00007fff2a624f36	movl	-0x1c(%rbp), %edi
00007fff2a624f39	leaq	0x61a0(%rip), %rsi              ## literal pool for: "com.apple.oahd"
00007fff2a624f40	movl	$0x8, %r8d
00007fff2a624f46	xorl	%ecx, %ecx
00007fff2a624f48	callq	0x7fff2a62ad1e                  ## symbol stub for: _bootstrap_look_up2
00007fff2a624f4d	movl	%eax, %r14d
00007fff2a624f50	movl	(%r15), %edi
00007fff2a624f53	movl	-0x1c(%rbp), %esi
00007fff2a624f56	callq	0x7fff2a62ad54                  ## symbol stub for: _mach_port_deallocate
00007fff2a624f5b	testl	%r14d, %r14d
00007fff2a624f5e	jne	0x7fff2a624f63
00007fff2a624f60	movl	-0x20(%rbp), %ebx
00007fff2a624f63	movl	%ebx, %eax
00007fff2a624f65	addq	$0x8, %rsp
00007fff2a624f69	popq	%rbx
00007fff2a624f6a	popq	%r14
00007fff2a624f6c	popq	%r15
00007fff2a624f6e	popq	%rbp
00007fff2a624f6f	retq
00007fff2a624f70	pushq	%rbp
00007fff2a624f71	movq	%rsp, %rbp
00007fff2a624f74	pushq	%r15
00007fff2a624f76	pushq	%r14
00007fff2a624f78	pushq	%r12
00007fff2a624f7a	pushq	%rbx
00007fff2a624f7b	subq	$0xa0, %rsp
00007fff2a624f82	movq	%rcx, %r14
00007fff2a624f85	movq	%rdx, %r15
00007fff2a624f88	movq	%rsi, %r12
00007fff2a624f8b	movq	0x5d22322e(%rip), %rax          ## literal pool symbol address: ___stack_chk_guard
00007fff2a624f92	movq	(%rax), %rax
00007fff2a624f95	movq	%rax, -0x28(%rbp)
00007fff2a624f99	leaq	-0xb0(%rbp), %rbx
00007fff2a624fa0	movl	$0x1513, (%rbx)                 ## imm = 0x1513
00007fff2a624fa6	movl	%edi, 0x8(%rbx)
00007fff2a624fa9	callq	0x7fff2a62ad78                  ## symbol stub for: _mig_get_special_reply_port
00007fff2a624fae	movl	%eax, 0xc(%rbx)
00007fff2a624fb1	movabsq	$0x3ad7a00000000, %rax          ## imm = 0x3AD7A00000000
00007fff2a624fbb	movq	%rax, 0x10(%rbx)
00007fff2a624fbf	movq	(%r12), %rax
00007fff2a624fc3	movq	0x8(%r12), %rcx
00007fff2a624fc8	movq	%rax, 0x18(%rbx)
00007fff2a624fcc	movq	%rcx, 0x20(%rbx)
00007fff2a624fd0	movq	0x10(%r12), %rax
00007fff2a624fd5	movq	%rax, 0x28(%rbx)
00007fff2a624fd9	movq	0x18(%r12), %rax
00007fff2a624fde	movq	%rax, 0x30(%rbx)
00007fff2a624fe2	movq	%r15, 0x38(%rbx)
00007fff2a624fe6	movq	%rbx, %rdi
00007fff2a624fe9	callq	0x7fff2a62adea                  ## symbol stub for: _voucher_mach_msg_set
00007fff2a624fee	movl	0xc(%rbx), %r8d
00007fff2a624ff2	movl	$0x0, (%rsp)
00007fff2a624ff9	movq	%rbx, %rdi
00007fff2a624ffc	movl	$0x7304003, %esi                ## imm = 0x7304003
00007fff2a625001	movl	$0x40, %edx
00007fff2a625006	movl	$0x70, %ecx
00007fff2a62500b	xorl	%r9d, %r9d
00007fff2a62500e	callq	0x7fff2a62ad4e                  ## symbol stub for: _mach_msg
00007fff2a625013	testl	%eax, %eax
00007fff2a625015	je	0x7fff2a62503b
00007fff2a625017	movq	0x5d2231a2(%rip), %rcx          ## literal pool symbol address: ___stack_chk_guard
00007fff2a62501e	movq	(%rcx), %rcx
00007fff2a625021	cmpq	-0x28(%rbp), %rcx
00007fff2a625025	jne	0x7fff2a6250f1
00007fff2a62502b	addq	$0xa0, %rsp
00007fff2a625032	popq	%rbx
00007fff2a625033	popq	%r12
00007fff2a625035	popq	%r14
00007fff2a625037	popq	%r15
00007fff2a625039	popq	%rbp
00007fff2a62503a	retq
00007fff2a62503b	movl	-0x9c(%rbp), %eax
00007fff2a625041	cmpl	$0x47, %eax
00007fff2a625044	je	0x7fff2a6250dd
00007fff2a62504a	cmpl	$0x3adde, %eax                  ## imm = 0x3ADDE
00007fff2a62504f	jne	0x7fff2a6250e7
00007fff2a625055	movl	$0xfffffed4, %eax               ## imm = 0xFFFFFED4
00007fff2a62505a	cmpl	$0x2c, -0xac(%rbp)
00007fff2a625061	jne	0x7fff2a625017
00007fff2a625063	movl	-0x88(%rbp), %ecx
00007fff2a625069	testl	%ecx, %ecx
00007fff2a62506b	movl	$0xfffffed4, %eax               ## imm = 0xFFFFFED4
00007fff2a625070	cmovnel	%ecx, %eax
00007fff2a625073	cmpl	$0x0, -0xb0(%rbp)
00007fff2a62507a	jns	0x7fff2a625017
00007fff2a62507c	testl	%ecx, %ecx
00007fff2a62507e	jne	0x7fff2a625017
00007fff2a625080	movl	$0xfffffecb, %eax               ## imm = 0xFFFFFECB
00007fff2a625085	cmpl	$0x0, -0x84(%rbp)
00007fff2a62508c	jne	0x7fff2a625017
00007fff2a62508e	cmpl	$0x44, -0x80(%rbp)
00007fff2a625092	jne	0x7fff2a625017
00007fff2a625094	movzwl	-0x8a(%rbp), %ecx
00007fff2a62509b	shll	$0x10, %ecx
00007fff2a62509e	movl	$0xfffffed0, %eax               ## imm = 0xFFFFFED0
00007fff2a6250a3	cmpl	$0x110000, %ecx                 ## imm = 0x110000
00007fff2a6250a9	jne	0x7fff2a625017
00007fff2a6250af	movl	-0x94(%rbp), %ebx
00007fff2a6250b5	movl	%ebx, %edi
00007fff2a6250b7	callq	0x7fff2a62ad30                  ## symbol stub for: _fileport_makefd
00007fff2a6250bc	movl	%eax, (%r14)
00007fff2a6250bf	movq	0x5d223102(%rip), %rax          ## literal pool symbol address: _mach_task_self_
00007fff2a6250c6	movl	(%rax), %edi
00007fff2a6250c8	movl	%ebx, %esi
00007fff2a6250ca	callq	0x7fff2a62ad54                  ## symbol stub for: _mach_port_deallocate
00007fff2a6250cf	movl	(%r14), %eax
00007fff2a6250d2	sarl	$0x1f, %eax
00007fff2a6250d5	andl	$0x5, %eax
00007fff2a6250d8	jmp	0x7fff2a625017
00007fff2a6250dd	movl	$0xfffffecc, %eax               ## imm = 0xFFFFFECC
00007fff2a6250e2	jmp	0x7fff2a625017
00007fff2a6250e7	movl	$0xfffffed3, %eax               ## imm = 0xFFFFFED3
00007fff2a6250ec	jmp	0x7fff2a625017
00007fff2a6250f1	callq	0x7fff2a62acee                  ## symbol stub for: ___stack_chk_fail
_rosetta_translate_binaries:
00007fff2a6250f6	pushq	%rbp
00007fff2a6250f7	movq	%rsp, %rbp
00007fff2a6250fa	pushq	%r15
00007fff2a6250fc	pushq	%r14
00007fff2a6250fe	pushq	%r13
00007fff2a625100	pushq	%r12
00007fff2a625102	pushq	%rbx
00007fff2a625103	subq	$0x4b8, %rsp                    ## imm = 0x4B8
00007fff2a62510a	movq	%rsi, %r14
00007fff2a62510d	movq	%rdi, %rbx
00007fff2a625110	movq	0x5d2230a9(%rip), %rax          ## literal pool symbol address: ___stack_chk_guard
00007fff2a625117	movq	(%rax), %rax
00007fff2a62511a	movq	%rax, -0x30(%rbp)
00007fff2a62511e	callq	0x7fff2a624f00
00007fff2a625123	movl	%eax, -0x4c8(%rbp)
00007fff2a625129	testl	%eax, %eax
00007fff2a62512b	je	0x7fff2a62530f
00007fff2a625131	testq	%r14, %r14
00007fff2a625134	je	0x7fff2a6252f7
00007fff2a62513a	xorl	%r15d, %r15d
00007fff2a62513d	movq	%rbx, -0x4d0(%rbp)
00007fff2a625144	movq	(%rbx,%r15,8), %r13
00007fff2a625148	movq	%r13, %rdi
00007fff2a62514b	xorl	%esi, %esi
00007fff2a62514d	xorl	%eax, %eax
00007fff2a62514f	callq	0x7fff2a62ad8a                  ## symbol stub for: _open
00007fff2a625154	testl	%eax, %eax
00007fff2a625156	js	0x7fff2a625271
00007fff2a62515c	movl	%eax, %r12d
00007fff2a62515f	movl	$0x0, -0x4c4(%rbp)
00007fff2a625169	movl	%eax, %edi
00007fff2a62516b	leaq	-0x4c4(%rbp), %rsi
00007fff2a625172	callq	0x7fff2a62ad36                  ## symbol stub for: _fileport_makeport
00007fff2a625177	testl	%eax, %eax
00007fff2a625179	jne	0x7fff2a625251
00007fff2a62517f	callq	0x7fff2a62ad78                  ## symbol stub for: _mig_get_special_reply_port
00007fff2a625184	movl	$0x80001513, -0x4c0(%rbp)       ## imm = 0x80001513
00007fff2a62518e	movl	-0x4c8(%rbp), %ecx
00007fff2a625194	movl	%ecx, -0x4b8(%rbp)
00007fff2a62519a	movl	%eax, -0x4b4(%rbp)
00007fff2a6251a0	movabsq	$0x3ad7900000000, %rax          ## imm = 0x3AD7900000000
00007fff2a6251aa	movq	%rax, -0x4b0(%rbp)
00007fff2a6251b1	movl	$0x1, -0x4a8(%rbp)
00007fff2a6251bb	movl	-0x4c4(%rbp), %eax
00007fff2a6251c1	movl	%eax, -0x4a4(%rbp)
00007fff2a6251c7	movabsq	$0x11000000000000, %rax         ## imm = 0x11000000000000
00007fff2a6251d1	movq	%rax, -0x4a0(%rbp)
00007fff2a6251d8	movb	$0x0, -0x478(%rbp)
00007fff2a6251df	movq	%r14, %rbx
00007fff2a6251e2	leaq	-0x4c0(%rbp), %r14
00007fff2a6251e9	movq	%r14, %rdi
00007fff2a6251ec	callq	0x7fff2a62adea                  ## symbol stub for: _voucher_mach_msg_set
00007fff2a6251f1	movl	-0x4b4(%rbp), %r8d
00007fff2a6251f8	movl	$0x0, (%rsp)
00007fff2a6251ff	movq	%r14, %rdi
00007fff2a625202	movq	%rbx, %r14
00007fff2a625205	movl	$0x7304003, %esi                ## imm = 0x7304003
00007fff2a62520a	movl	$0x4c, %edx
00007fff2a62520f	movl	$0x490, %ecx                    ## imm = 0x490
00007fff2a625214	xorl	%r9d, %r9d
00007fff2a625217	callq	0x7fff2a62ad4e                  ## symbol stub for: _mach_msg
00007fff2a62521c	testl	%eax, %eax
00007fff2a62521e	jne	0x7fff2a62524a
00007fff2a625220	cmpl	$0x3addd, -0x4ac(%rbp)          ## imm = 0x3ADDD
00007fff2a62522a	jne	0x7fff2a62524a
00007fff2a62522c	cmpl	$0x44c, -0x4bc(%rbp)            ## imm = 0x44C
00007fff2a625236	jne	0x7fff2a62524a
00007fff2a625238	movl	-0x78(%rbp), %eax
00007fff2a62523b	testl	%eax, %eax
00007fff2a62523d	je	0x7fff2a625295
00007fff2a62523f	cmpl	$0xfffffece, %eax               ## imm = 0xFFFFFECE
00007fff2a625244	je	0x7fff2a62534d
00007fff2a62524a	movq	-0x4d0(%rbp), %rbx
00007fff2a625251	movl	$0x73, %edi
00007fff2a625256	leaq	0x5f12(%rip), %rsi              ## literal pool for: "AOT translation failed for %s"
00007fff2a62525d	movq	%r13, %rdx
00007fff2a625260	xorl	%eax, %eax
00007fff2a625262	callq	0x7fff2a62adcc                  ## symbol stub for: _syslog$DARWIN_EXTSN
00007fff2a625267	movl	%r12d, %edi
00007fff2a62526a	callq	0x7fff2a62ad24                  ## symbol stub for: _close
00007fff2a62526f	jmp	0x7fff2a625287
00007fff2a625271	movl	$0x73, %edi
00007fff2a625276	leaq	0x5ecc(%rip), %rsi              ## literal pool for: "Could not open %s for AOT translation"
00007fff2a62527d	movq	%r13, %rdx
00007fff2a625280	xorl	%eax, %eax
00007fff2a625282	callq	0x7fff2a62adcc                  ## symbol stub for: _syslog$DARWIN_EXTSN
00007fff2a625287	incq	%r15
00007fff2a62528a	cmpq	%r15, %r14
00007fff2a62528d	jne	0x7fff2a625144
00007fff2a625293	jmp	0x7fff2a6252f7
00007fff2a625295	cmpl	$0x0, -0x4c0(%rbp)
00007fff2a62529c	jns	0x7fff2a62524a
00007fff2a62529e	cmpl	$0x0, -0x74(%rbp)
00007fff2a6252a2	jne	0x7fff2a62524a
00007fff2a6252a4	cmpl	$0x44, -0x70(%rbp)
00007fff2a6252a8	jne	0x7fff2a62524a
00007fff2a6252aa	movzwl	-0x49a(%rbp), %eax
00007fff2a6252b1	shll	$0x10, %eax
00007fff2a6252b4	cmpl	$0x110000, %eax                 ## imm = 0x110000
00007fff2a6252b9	jne	0x7fff2a62524a
00007fff2a6252bb	movl	-0x4a4(%rbp), %esi
00007fff2a6252c1	movl	%esi, -0x4c4(%rbp)
00007fff2a6252c7	movq	0x5d222efa(%rip), %rax          ## literal pool symbol address: _mach_task_self_
00007fff2a6252ce	movl	(%rax), %edi
00007fff2a6252d0	callq	0x7fff2a62ad54                  ## symbol stub for: _mach_port_deallocate
00007fff2a6252d5	movl	$0x76, %edi
00007fff2a6252da	leaq	0x5eac(%rip), %rsi              ## literal pool for: "oahd translated %s"
00007fff2a6252e1	movq	%r13, %rdx
00007fff2a6252e4	xorl	%eax, %eax
00007fff2a6252e6	callq	0x7fff2a62adcc                  ## symbol stub for: _syslog$DARWIN_EXTSN
00007fff2a6252eb	movq	-0x4d0(%rbp), %rbx
00007fff2a6252f2	jmp	0x7fff2a625267
00007fff2a6252f7	movq	0x5d222eca(%rip), %rax          ## literal pool symbol address: _mach_task_self_
00007fff2a6252fe	movl	(%rax), %edi
00007fff2a625300	movl	-0x4c8(%rbp), %esi
00007fff2a625306	callq	0x7fff2a62ad54                  ## symbol stub for: _mach_port_deallocate
00007fff2a62530b	movb	$0x1, %bl
00007fff2a62530d	jmp	0x7fff2a625324
00007fff2a62530f	leaq	0x5e13(%rip), %rsi              ## literal pool for: "Could not connect to AOT daemon"
00007fff2a625316	xorl	%ebx, %ebx
00007fff2a625318	movl	$0x73, %edi
00007fff2a62531d	xorl	%eax, %eax
00007fff2a62531f	callq	0x7fff2a62adcc                  ## symbol stub for: _syslog$DARWIN_EXTSN
00007fff2a625324	movq	0x5d222e95(%rip), %rax          ## literal pool symbol address: ___stack_chk_guard
00007fff2a62532b	movq	(%rax), %rax
00007fff2a62532e	cmpq	-0x30(%rbp), %rax
00007fff2a625332	jne	0x7fff2a625348
00007fff2a625334	movl	%ebx, %eax
00007fff2a625336	addq	$0x4b8, %rsp                    ## imm = 0x4B8
00007fff2a62533d	popq	%rbx
00007fff2a62533e	popq	%r12
00007fff2a625340	popq	%r13
00007fff2a625342	popq	%r14
00007fff2a625344	popq	%r15
00007fff2a625346	popq	%rbp
00007fff2a625347	retq
00007fff2a625348	callq	0x7fff2a62acee                  ## symbol stub for: ___stack_chk_fail
00007fff2a62534d	leaq	0x5d9b(%rip), %rdi              ## literal pool for: "runtime routines hash mismatch between runtime and daemon"
00007fff2a625354	xorl	%eax, %eax
00007fff2a625356	callq	0x7fff2a628bb4
_oah_translate_binaries:
00007fff2a62535b	pushq	%rbp
00007fff2a62535c	movq	%rsp, %rbp
00007fff2a62535f	popq	%rbp
00007fff2a625360	jmp	_rosetta_translate_binaries
_aot_symbolication_session_create:
00007fff2a625365	pushq	%rbp
00007fff2a625366	movq	%rsp, %rbp
00007fff2a625369	pushq	%rbx
00007fff2a62536a	pushq	%rax
00007fff2a62536b	movl	$0x88, %edi
00007fff2a625370	callq	0x7fff2a62ace2                  ## symbol stub for: __Znwm
00007fff2a625375	movq	%rax, %rbx
00007fff2a625378	movl	$0x88, %esi
00007fff2a62537d	movq	%rax, %rdi
00007fff2a625380	callq	0x7fff2a62ace8                  ## symbol stub for: ___bzero
00007fff2a625385	movl	$0x3f800000, 0x80(%rbx)         ## imm = 0x3F800000
00007fff2a62538f	callq	0x7fff2a624f00
00007fff2a625394	movl	%eax, (%rbx)
00007fff2a625396	testl	%eax, %eax
00007fff2a625398	jne	0x7fff2a6253ac
00007fff2a62539a	movq	%rbx, %rdi
00007fff2a62539d	callq	0x7fff2a626bf0
00007fff2a6253a2	movq	%rbx, %rdi
00007fff2a6253a5	callq	0x7fff2a62acdc                  ## symbol stub for: __ZdlPv
00007fff2a6253aa	xorl	%ebx, %ebx
00007fff2a6253ac	movq	%rbx, %rax
00007fff2a6253af	addq	$0x8, %rsp
00007fff2a6253b3	popq	%rbx
00007fff2a6253b4	popq	%rbp
00007fff2a6253b5	retq
_aot_symbolication_session_destroy:
00007fff2a6253b6	testq	%rdi, %rdi
00007fff2a6253b9	je	0x7fff2a6253d7
00007fff2a6253bb	pushq	%rbp
00007fff2a6253bc	movq	%rsp, %rbp
00007fff2a6253bf	pushq	%rbx
00007fff2a6253c0	pushq	%rax
00007fff2a6253c1	movq	%rdi, %rbx
00007fff2a6253c4	callq	0x7fff2a626bf0
00007fff2a6253c9	movq	%rbx, %rdi
00007fff2a6253cc	addq	$0x8, %rsp
00007fff2a6253d0	popq	%rbx
00007fff2a6253d1	popq	%rbp
00007fff2a6253d2	jmp	0x7fff2a62acdc                  ## symbol stub for: __ZdlPv
00007fff2a6253d7	retq
_aot_init_shared_cache_info:
00007fff2a6253d8	pushq	%rbp
00007fff2a6253d9	movq	%rsp, %rbp
00007fff2a6253dc	testq	%rdi, %rdi
00007fff2a6253df	je	0x7fff2a6253e7
00007fff2a6253e1	popq	%rbp
00007fff2a6253e2	jmp	0x7fff2a626cb4
00007fff2a6253e7	xorl	%eax, %eax
00007fff2a6253e9	popq	%rbp
00007fff2a6253ea	retq
_aot_address_in_shared_cache:
00007fff2a6253eb	pushq	%rbp
00007fff2a6253ec	movq	%rsp, %rbp
00007fff2a6253ef	testq	%rdi, %rdi
00007fff2a6253f2	je	0x7fff2a625400
00007fff2a6253f4	cmpb	$0x0, 0x4(%rdi)
00007fff2a6253f8	je	0x7fff2a625400
00007fff2a6253fa	cmpq	%rsi, 0x18(%rdi)
00007fff2a6253fe	jbe	0x7fff2a625404
00007fff2a625400	xorl	%eax, %eax
00007fff2a625402	jmp	0x7fff2a62540b
00007fff2a625404	cmpq	%rsi, 0x20(%rdi)
00007fff2a625408	seta	%al
00007fff2a62540b	popq	%rbp
00007fff2a62540c	retq
_aot_get_shared_cache_fragment_type:
00007fff2a62540d	pushq	%rbp
00007fff2a62540e	movq	%rsp, %rbp
00007fff2a625411	pushq	%r14
00007fff2a625413	pushq	%rbx
00007fff2a625414	subq	$0x50, %rsp
00007fff2a625418	movq	0x5d222da1(%rip), %rax          ## literal pool symbol address: ___stack_chk_guard
00007fff2a62541f	movq	(%rax), %rax
00007fff2a625422	movq	%rax, -0x18(%rbp)
00007fff2a625426	testq	%rdi, %rdi
00007fff2a625429	je	0x7fff2a625495
00007fff2a62542b	movq	%rsi, -0x60(%rbp)
00007fff2a62542f	cmpb	$0x0, 0x4(%rdi)
00007fff2a625433	je	0x7fff2a6254c5
00007fff2a625439	movq	%rdx, %r14
00007fff2a62543c	movl	$0x2, -0x54(%rbp)
00007fff2a625443	movb	$0x1, %al
00007fff2a625445	cmpq	%rsi, 0x18(%rdi)
00007fff2a625449	ja	0x7fff2a6254a1
00007fff2a62544b	cmpq	%rsi, 0x20(%rdi)
00007fff2a62544f	jbe	0x7fff2a6254a1
00007fff2a625451	leaq	0x5d222f58(%rip), %rax
00007fff2a625458	leaq	-0x50(%rbp), %rbx
00007fff2a62545c	movq	%rax, (%rbx)
00007fff2a62545f	movq	%rdi, 0x8(%rbx)
00007fff2a625463	leaq	-0x60(%rbp), %rax
00007fff2a625467	movq	%rax, 0x10(%rbx)
00007fff2a62546b	leaq	-0x54(%rbp), %rax
00007fff2a62546f	movq	%rax, 0x18(%rbx)
00007fff2a625473	movq	%rbx, 0x20(%rbx)
00007fff2a625477	movq	%rbx, %rsi
00007fff2a62547a	callq	0x7fff2a626b28
00007fff2a62547f	movq	0x20(%rbx), %rdi
00007fff2a625483	cmpq	%rdi, %rbx
00007fff2a625486	je	0x7fff2a625499
00007fff2a625488	testq	%rdi, %rdi
00007fff2a62548b	je	0x7fff2a62549f
00007fff2a62548d	movq	(%rdi), %rax
00007fff2a625490	callq	*0x28(%rax)
00007fff2a625493	jmp	0x7fff2a62549f
00007fff2a625495	xorl	%eax, %eax
00007fff2a625497	jmp	0x7fff2a6254a7
00007fff2a625499	movq	(%rdi), %rax
00007fff2a62549c	callq	*0x20(%rax)
00007fff2a62549f	xorl	%eax, %eax
00007fff2a6254a1	movl	-0x54(%rbp), %ecx
00007fff2a6254a4	movl	%ecx, (%r14)
00007fff2a6254a7	movq	0x5d222d12(%rip), %rcx          ## literal pool symbol address: ___stack_chk_guard
00007fff2a6254ae	movq	(%rcx), %rcx
00007fff2a6254b1	cmpq	-0x18(%rbp), %rcx
00007fff2a6254b5	jne	0x7fff2a6254c0
00007fff2a6254b7	addq	$0x50, %rsp
00007fff2a6254bb	popq	%rbx
00007fff2a6254bc	popq	%r14
00007fff2a6254be	popq	%rbp
00007fff2a6254bf	retq
00007fff2a6254c0	callq	0x7fff2a62acee                  ## symbol stub for: ___stack_chk_fail
00007fff2a6254c5	leaq	0x5cd9(%rip), %rdi              ## literal pool for: "shared cache info is not initialized"
00007fff2a6254cc	xorl	%eax, %eax
00007fff2a6254ce	callq	0x7fff2a628bb4
_aot_get_x86_address_shared_cache:
00007fff2a6254d3	pushq	%rbp
00007fff2a6254d4	movq	%rsp, %rbp
00007fff2a6254d7	testq	%rdi, %rdi
00007fff2a6254da	je	0x7fff2a6254e2
00007fff2a6254dc	popq	%rbp
00007fff2a6254dd	jmp	0x7fff2a626ffc
00007fff2a6254e2	xorl	%eax, %eax
00007fff2a6254e4	popq	%rbp
00007fff2a6254e5	retq
_aot_get_x86_address:
00007fff2a6254e6	pushq	%rbp
00007fff2a6254e7	movq	%rsp, %rbp
00007fff2a6254ea	pushq	%r15
00007fff2a6254ec	pushq	%r14
00007fff2a6254ee	pushq	%r13
00007fff2a6254f0	pushq	%r12
00007fff2a6254f2	pushq	%rbx
00007fff2a6254f3	pushq	%rax
00007fff2a6254f4	movl	$0x81f8, %eax                   ## imm = 0x81F8
00007fff2a6254f9	callq	0x7fff2a62ac50
00007fff2a6254fe	subq	%rax, %rsp
00007fff2a625501	popq	%rax
00007fff2a625502	movq	0x5d222cb7(%rip), %rax          ## literal pool symbol address: ___stack_chk_guard
00007fff2a625509	movq	(%rax), %rax
00007fff2a62550c	movq	%rax, -0x30(%rbp)
00007fff2a625510	testq	%rdi, %rdi
00007fff2a625513	je	0x7fff2a625958
00007fff2a625519	movq	%rsi, %r14
00007fff2a62551c	movq	%rdi, -0x8170(%rbp)
00007fff2a625523	movq	%rcx, -0x8200(%rbp)
00007fff2a62552a	testq	%rsi, %rsi
00007fff2a62552d	je	0x7fff2a625e79
00007fff2a625533	testq	%r8, %r8
00007fff2a625536	je	0x7fff2a625e79
00007fff2a62553c	movq	%rdx, -0x8210(%rbp)
00007fff2a625543	movq	%r8, -0x8208(%rbp)
00007fff2a62554a	leaq	-0x8030(%rbp), %r12
00007fff2a625551	leaq	0x5c48(%rip), %r15              ## literal pool for: "%02x"
00007fff2a625558	xorl	%ebx, %ebx
00007fff2a62555a	movzbl	(%r14,%rbx), %edx
00007fff2a62555f	movq	%r12, %rdi
00007fff2a625562	movq	%r15, %rsi
00007fff2a625565	xorl	%eax, %eax
00007fff2a625567	callq	0x7fff2a62ada2                  ## symbol stub for: _sprintf
00007fff2a62556c	incq	%rbx
00007fff2a62556f	addq	$0x2, %r12
00007fff2a625573	cmpq	$0x20, %rbx
00007fff2a625577	jne	0x7fff2a62555a
00007fff2a625579	leaq	-0x8030(%rbp), %rdi
00007fff2a625580	callq	0x7fff2a62adae                  ## symbol stub for: _strlen
00007fff2a625585	cmpq	$-0x10, %rax
00007fff2a625589	jae	0x7fff2a625e87
00007fff2a62558f	movq	%rax, %r13
00007fff2a625592	cmpq	$0x17, %rax
00007fff2a625596	jae	0x7fff2a6255bd
00007fff2a625598	leal	(%r13,%r13), %eax
00007fff2a62559d	leaq	-0x8190(%rbp), %r12
00007fff2a6255a4	movb	%al, (%r12)
00007fff2a6255a8	leaq	-0x818f(%rbp), %r15
00007fff2a6255af	testq	%r13, %r13
00007fff2a6255b2	movq	-0x8170(%rbp), %rbx
00007fff2a6255b9	jne	0x7fff2a6255f3
00007fff2a6255bb	jmp	0x7fff2a625605
00007fff2a6255bd	movq	%r13, %rbx
00007fff2a6255c0	addq	$0x10, %rbx
00007fff2a6255c4	andq	$-0x10, %rbx
00007fff2a6255c8	movq	%rbx, %rdi
00007fff2a6255cb	callq	0x7fff2a62ace2                  ## symbol stub for: __Znwm
00007fff2a6255d0	movq	%rax, %r15
00007fff2a6255d3	leaq	-0x8190(%rbp), %r12
00007fff2a6255da	movq	%rax, 0x10(%r12)
00007fff2a6255df	orq	$0x1, %rbx
00007fff2a6255e3	movq	%rbx, (%r12)
00007fff2a6255e7	movq	%r13, 0x8(%r12)
00007fff2a6255ec	movq	-0x8170(%rbp), %rbx
00007fff2a6255f3	leaq	-0x8030(%rbp), %rsi
00007fff2a6255fa	movq	%r15, %rdi
00007fff2a6255fd	movq	%r13, %rdx
00007fff2a625600	callq	0x7fff2a62ad72                  ## symbol stub for: _memcpy
00007fff2a625605	movb	$0x0, (%r15,%r13)
00007fff2a62560a	movzbl	-0x8190(%rbp), %r15d
00007fff2a625612	testb	$0x1, %r15b
00007fff2a625616	je	0x7fff2a625628
00007fff2a625618	movq	-0x8180(%rbp), %r12
00007fff2a62561f	movq	-0x8188(%rbp), %r15
00007fff2a625626	jmp	0x7fff2a62562e
00007fff2a625628	incq	%r12
00007fff2a62562b	shrq	%r15
00007fff2a62562e	leaq	0x60(%rbx), %rax
00007fff2a625632	movq	%rax, -0x8178(%rbp)
00007fff2a625639	movq	%r12, %rdi
00007fff2a62563c	movq	%r15, %rsi
00007fff2a62563f	callq	0x7fff2a6263aa
00007fff2a625644	movq	0x68(%rbx), %r8
00007fff2a625648	testq	%r8, %r8
00007fff2a62564b	je	0x7fff2a6257e8
00007fff2a625651	movq	%rax, %rsi
00007fff2a625654	movq	%r8, %rax
00007fff2a625657	shrq	%rax
00007fff2a62565a	movabsq	$0x5555555555555555, %rcx       ## imm = 0x5555555555555555
00007fff2a625664	andq	%rax, %rcx
00007fff2a625667	movq	%r8, %rax
00007fff2a62566a	subq	%rcx, %rax
00007fff2a62566d	movabsq	$0x3333333333333333, %rcx       ## imm = 0x3333333333333333
00007fff2a625677	movq	%rax, %rdx
00007fff2a62567a	andq	%rcx, %rdx
00007fff2a62567d	shrq	$0x2, %rax
00007fff2a625681	andq	%rcx, %rax
00007fff2a625684	addq	%rdx, %rax
00007fff2a625687	movq	%rax, %rcx
00007fff2a62568a	shrq	$0x4, %rcx
00007fff2a62568e	addq	%rax, %rcx
00007fff2a625691	movabsq	$0xf0f0f0f0f0f0f0f, %rax        ## imm = 0xF0F0F0F0F0F0F0F
00007fff2a62569b	andq	%rcx, %rax
00007fff2a62569e	movabsq	$0x101010101010101, %r13        ## imm = 0x101010101010101
00007fff2a6256a8	imulq	%rax, %r13
00007fff2a6256ac	shrq	$0x38, %r13
00007fff2a6256b0	cmpq	$0x1, %r13
00007fff2a6256b4	ja	0x7fff2a6256bf
00007fff2a6256b6	leaq	-0x1(%r8), %r9
00007fff2a6256ba	andq	%rsi, %r9
00007fff2a6256bd	jmp	0x7fff2a6256d4
00007fff2a6256bf	cmpq	%r8, %rsi
00007fff2a6256c2	jae	0x7fff2a6256c9
00007fff2a6256c4	movq	%rsi, %r9
00007fff2a6256c7	jmp	0x7fff2a6256d4
00007fff2a6256c9	movq	%rsi, %rax
00007fff2a6256cc	xorl	%edx, %edx
00007fff2a6256ce	divq	%r8
00007fff2a6256d1	movq	%rdx, %r9
00007fff2a6256d4	movq	-0x8178(%rbp), %rax
00007fff2a6256db	movq	(%rax), %rax
00007fff2a6256de	movq	(%rax,%r9,8), %rax
00007fff2a6256e2	testq	%rax, %rax
00007fff2a6256e5	je	0x7fff2a6257e8
00007fff2a6256eb	movq	(%rax), %rbx
00007fff2a6256ee	testq	%rbx, %rbx
00007fff2a6256f1	je	0x7fff2a6257e8
00007fff2a6256f7	leaq	-0x1(%r8), %r10
00007fff2a6256fb	movq	%rsi, -0x8168(%rbp)
00007fff2a625702	movq	%r8, -0x81f8(%rbp)
00007fff2a625709	movq	%r9, -0x81f0(%rbp)
00007fff2a625710	movq	%r10, -0x81e8(%rbp)
00007fff2a625717	movq	0x8(%rbx), %rax
00007fff2a62571b	cmpq	%rsi, %rax
00007fff2a62571e	jne	0x7fff2a625768
00007fff2a625720	movzbl	0x10(%rbx), %ecx
00007fff2a625724	movq	%rcx, %rax
00007fff2a625727	shrq	%rax
00007fff2a62572a	movq	%rax, %rdx
00007fff2a62572d	testb	$0x1, %cl
00007fff2a625730	je	0x7fff2a625736
00007fff2a625732	movq	0x18(%rbx), %rdx
00007fff2a625736	cmpq	%r15, %rdx
00007fff2a625739	jne	0x7fff2a625785
00007fff2a62573b	leaq	0x10(%rbx), %rdi
00007fff2a62573f	incq	%rdi
00007fff2a625742	testb	$0x1, %cl
00007fff2a625745	je	0x7fff2a62574b
00007fff2a625747	movq	0x20(%rbx), %rdi
00007fff2a62574b	jne	0x7fff2a62578f
00007fff2a62574d	testq	%r15, %r15
00007fff2a625750	je	0x7fff2a6257c6
00007fff2a625752	xorl	%ecx, %ecx
00007fff2a625754	movb	0x11(%rbx,%rcx), %dl
00007fff2a625758	cmpb	(%r12,%rcx), %dl
00007fff2a62575c	jne	0x7fff2a625785
00007fff2a62575e	incq	%rcx
00007fff2a625761	cmpq	%rcx, %rax
00007fff2a625764	jne	0x7fff2a625754
00007fff2a625766	jmp	0x7fff2a6257c1
00007fff2a625768	cmpl	$0x1, %r13d
00007fff2a62576c	ja	0x7fff2a625773
00007fff2a62576e	andq	%r10, %rax
00007fff2a625771	jmp	0x7fff2a625780
00007fff2a625773	cmpq	%r8, %rax
00007fff2a625776	jb	0x7fff2a625780
00007fff2a625778	xorl	%edx, %edx
00007fff2a62577a	divq	%r8
00007fff2a62577d	movq	%rdx, %rax
00007fff2a625780	cmpq	%r9, %rax
00007fff2a625783	jne	0x7fff2a6257e8
00007fff2a625785	movq	(%rbx), %rbx
00007fff2a625788	testq	%rbx, %rbx
00007fff2a62578b	jne	0x7fff2a625717
00007fff2a62578d	jmp	0x7fff2a6257e8
00007fff2a62578f	testq	%r15, %r15
00007fff2a625792	je	0x7fff2a6257c6
00007fff2a625794	movq	%r12, %rsi
00007fff2a625797	movq	%r15, %rdx
00007fff2a62579a	callq	0x7fff2a62ad6c                  ## symbol stub for: _memcmp
00007fff2a62579f	movq	-0x81e8(%rbp), %r10
00007fff2a6257a6	movq	-0x81f0(%rbp), %r9
00007fff2a6257ad	movq	-0x81f8(%rbp), %r8
00007fff2a6257b4	movq	-0x8168(%rbp), %rsi
00007fff2a6257bb	testl	%eax, %eax
00007fff2a6257bd	jne	0x7fff2a625785
00007fff2a6257bf	jmp	0x7fff2a6257c6
00007fff2a6257c1	testq	%rbx, %rbx
00007fff2a6257c4	je	0x7fff2a6257e8
00007fff2a6257c6	leaq	-0x8190(%rbp), %rdx
00007fff2a6257cd	movq	-0x8178(%rbp), %rdi
00007fff2a6257d4	movq	%rdx, %rsi
00007fff2a6257d7	callq	0x7fff2a625eb4
00007fff2a6257dc	movq	%rax, %r13
00007fff2a6257df	addq	$0x28, %r13
00007fff2a6257e3	jmp	0x7fff2a625915
00007fff2a6257e8	movq	-0x8170(%rbp), %rax
00007fff2a6257ef	movl	(%rax), %edi
00007fff2a6257f1	testl	%edi, %edi
00007fff2a6257f3	je	0x7fff2a625912
00007fff2a6257f9	leaq	-0x8030(%rbp), %rcx
00007fff2a625800	movl	$0xffffffff, (%rcx)             ## imm = 0xFFFFFFFF
00007fff2a625806	movl	$0x20, %edx
00007fff2a62580b	movq	%r14, %rsi
00007fff2a62580e	callq	0x7fff2a624f70
00007fff2a625813	xorl	%r13d, %r13d
00007fff2a625816	testl	%eax, %eax
00007fff2a625818	jne	0x7fff2a625915
00007fff2a62581e	movl	-0x8030(%rbp), %r15d
00007fff2a625825	cmpl	$-0x1, %r15d
00007fff2a625829	je	0x7fff2a625915
00007fff2a62582f	leaq	-0x8218(%rbp), %rcx
00007fff2a625836	movq	$0x0, (%rcx)
00007fff2a62583d	leaq	-0x8148(%rbp), %rbx
00007fff2a625844	leaq	-0x8030(%rbp), %rdx
00007fff2a62584b	movq	%rbx, %rdi
00007fff2a62584e	movl	%r15d, %esi
00007fff2a625851	callq	0x7fff2a629077
00007fff2a625856	cmpb	$0x0, 0x110(%rbx)
00007fff2a62585d	je	0x7fff2a62590a
00007fff2a625863	cmpb	$0x0, -0x80a8(%rbp)
00007fff2a62586a	je	0x7fff2a62590a
00007fff2a625870	movl	-0x80f0(%rbp), %r12d
00007fff2a625877	movl	-0x80ec(%rbp), %r14d
00007fff2a62587e	subl	%r12d, %r14d
00007fff2a625881	je	0x7fff2a62590a
00007fff2a625887	cmpl	$0x0, -0x8090(%rbp)
00007fff2a62588e	je	0x7fff2a62590a
00007fff2a625890	movl	%r12d, %r9d
00007fff2a625893	andl	$0xfffff000, %r9d               ## imm = 0xFFFFF000
00007fff2a62589a	andl	$0xfff, %r12d                   ## imm = 0xFFF
00007fff2a6258a1	addl	%r12d, %r14d
00007fff2a6258a4	xorl	%r13d, %r13d
00007fff2a6258a7	xorl	%edi, %edi
00007fff2a6258a9	movq	%r14, %rsi
00007fff2a6258ac	movl	$0x1, %edx
00007fff2a6258b1	movl	$0x2, %ecx
00007fff2a6258b6	movl	%r15d, %r8d
00007fff2a6258b9	callq	0x7fff2a62ad7e                  ## symbol stub for: _mmap
00007fff2a6258be	movq	%rax, %rbx
00007fff2a6258c1	movl	%r15d, %edi
00007fff2a6258c4	callq	0x7fff2a62ad24                  ## symbol stub for: _close
00007fff2a6258c9	movq	%rbx, -0x8168(%rbp)
00007fff2a6258d0	cmpq	$-0x1, %rbx
00007fff2a6258d4	je	0x7fff2a625915
00007fff2a6258d6	movq	-0x8170(%rbp), %rax
00007fff2a6258dd	movq	0x50(%rax), %r13
00007fff2a6258e1	movq	0x58(%rax), %rbx
00007fff2a6258e5	cmpq	%rbx, %r13
00007fff2a6258e8	jae	0x7fff2a6259a7
00007fff2a6258ee	movq	-0x8168(%rbp), %rcx
00007fff2a6258f5	movq	%rcx, (%r13)
00007fff2a6258f9	movq	%r14, 0x8(%r13)
00007fff2a6258fd	addq	$0x10, %r13
00007fff2a625901	movq	%r13, 0x50(%rax)
00007fff2a625905	jmp	0x7fff2a625a79
00007fff2a62590a	movl	%r15d, %edi
00007fff2a62590d	callq	0x7fff2a62ad24                  ## symbol stub for: _close
00007fff2a625912	xorl	%r13d, %r13d
00007fff2a625915	testb	$0x1, -0x8190(%rbp)
00007fff2a62591c	je	0x7fff2a62592a
00007fff2a62591e	movq	-0x8180(%rbp), %rdi
00007fff2a625925	callq	0x7fff2a62acdc                  ## symbol stub for: __ZdlPv
00007fff2a62592a	testq	%r13, %r13
00007fff2a62592d	je	0x7fff2a625958
00007fff2a62592f	movq	(%r13), %rbx
00007fff2a625933	movq	0x8(%r13), %rax
00007fff2a625937	cmpq	%rax, %rbx
00007fff2a62593a	je	0x7fff2a625958
00007fff2a62593c	movq	-0x8210(%rbp), %rsi
00007fff2a625943	movl	0x8(%rbx), %ecx
00007fff2a625946	cmpl	%esi, %ecx
00007fff2a625948	ja	0x7fff2a62594f
00007fff2a62594a	cmpl	%esi, 0xc(%rbx)
00007fff2a62594d	ja	0x7fff2a625980
00007fff2a62594f	addq	$0x28, %rbx
00007fff2a625953	cmpq	%rbx, %rax
00007fff2a625956	jne	0x7fff2a625943
00007fff2a625958	xorl	%eax, %eax
00007fff2a62595a	movq	0x5d22285f(%rip), %rcx          ## literal pool symbol address: ___stack_chk_guard
00007fff2a625961	movq	(%rcx), %rcx
00007fff2a625964	cmpq	-0x30(%rbp), %rcx
00007fff2a625968	jne	0x7fff2a625e74
00007fff2a62596e	addq	$0x81f8, %rsp                   ## imm = 0x81F8
00007fff2a625975	popq	%rbx
00007fff2a625976	popq	%r12
00007fff2a625978	popq	%r13
00007fff2a62597a	popq	%r14
00007fff2a62597c	popq	%r15
00007fff2a62597e	popq	%rbp
00007fff2a62597f	retq
00007fff2a625980	leaq	0x10(%rbx), %rdi
00007fff2a625984	subl	%ecx, %esi
00007fff2a625986	callq	0x7fff2a628d1c
00007fff2a62598b	movl	(%rbx), %ecx
00007fff2a62598d	addq	-0x8200(%rbp), %rcx
00007fff2a625994	movl	%eax, %eax
00007fff2a625996	addq	%rcx, %rax
00007fff2a625999	movq	-0x8208(%rbp), %rcx
00007fff2a6259a0	movq	%rax, (%rcx)
00007fff2a6259a3	movb	$0x1, %al
00007fff2a6259a5	jmp	0x7fff2a62595a
00007fff2a6259a7	movq	0x48(%rax), %rdx
00007fff2a6259ab	subq	%rdx, %r13
00007fff2a6259ae	sarq	$0x4, %r13
00007fff2a6259b2	leaq	0x1(%r13), %rcx
00007fff2a6259b6	movq	%rcx, %rax
00007fff2a6259b9	shrq	$0x3c, %rax
00007fff2a6259bd	jne	0x7fff2a625e9f
00007fff2a6259c3	movabsq	$0xfffffffffffffff, %rax        ## imm = 0xFFFFFFFFFFFFFFF
00007fff2a6259cd	subq	%rdx, %rbx
00007fff2a6259d0	movq	%rbx, %rdx
00007fff2a6259d3	sarq	$0x4, %rdx
00007fff2a6259d7	sarq	$0x3, %rbx
00007fff2a6259db	cmpq	%rcx, %rbx
00007fff2a6259de	cmovbq	%rcx, %rbx
00007fff2a6259e2	movabsq	$0x7ffffffffffffff, %rcx        ## imm = 0x7FFFFFFFFFFFFFF
00007fff2a6259ec	cmpq	%rcx, %rdx
00007fff2a6259ef	cmovaeq	%rax, %rbx
00007fff2a6259f3	testq	%rbx, %rbx
00007fff2a6259f6	je	0x7fff2a625a0f
00007fff2a6259f8	cmpq	%rax, %rbx
00007fff2a6259fb	ja	0x7fff2a625eaf
00007fff2a625a01	movq	%rbx, %rdi
00007fff2a625a04	shlq	$0x4, %rdi
00007fff2a625a08	callq	0x7fff2a62ace2                  ## symbol stub for: __Znwm
00007fff2a625a0d	jmp	0x7fff2a625a11
00007fff2a625a0f	xorl	%eax, %eax
00007fff2a625a11	shlq	$0x4, %r13
00007fff2a625a15	leaq	(%rax,%r13), %r15
00007fff2a625a19	shlq	$0x4, %rbx
00007fff2a625a1d	addq	%rax, %rbx
00007fff2a625a20	leaq	0x10(%rax,%r13), %r13
00007fff2a625a25	movq	-0x8168(%rbp), %rax
00007fff2a625a2c	movq	%rax, -0x10(%r13)
00007fff2a625a30	movq	%r14, -0x8(%r13)
00007fff2a625a34	movq	-0x8170(%rbp), %rax
00007fff2a625a3b	movq	0x48(%rax), %r14
00007fff2a625a3f	movq	0x50(%rax), %rdx
00007fff2a625a43	subq	%r14, %rdx
00007fff2a625a46	subq	%rdx, %r15
00007fff2a625a49	testq	%rdx, %rdx
00007fff2a625a4c	jle	0x7fff2a625a59
00007fff2a625a4e	movq	%r15, %rdi
00007fff2a625a51	movq	%r14, %rsi
00007fff2a625a54	callq	0x7fff2a62ad72                  ## symbol stub for: _memcpy
00007fff2a625a59	movq	-0x8170(%rbp), %rax
00007fff2a625a60	movq	%r15, 0x48(%rax)
00007fff2a625a64	movq	%r13, 0x50(%rax)
00007fff2a625a68	movq	%rbx, 0x58(%rax)
00007fff2a625a6c	testq	%r14, %r14
00007fff2a625a6f	je	0x7fff2a625a79
00007fff2a625a71	movq	%r14, %rdi
00007fff2a625a74	callq	0x7fff2a62acdc                  ## symbol stub for: __ZdlPv
00007fff2a625a79	xorps	%xmm0, %xmm0
00007fff2a625a7c	movaps	%xmm0, -0x8160(%rbp)
00007fff2a625a83	movq	$0x0, -0x8150(%rbp)
00007fff2a625a8e	movl	-0x8090(%rbp), %esi
00007fff2a625a94	testq	%rsi, %rsi
00007fff2a625a97	je	0x7fff2a625dcc
00007fff2a625a9d	leaq	-0x8150(%rbp), %rbx
00007fff2a625aa4	leaq	-0x81b8(%rbp), %r14
00007fff2a625aab	movq	%r14, %rdi
00007fff2a625aae	xorl	%edx, %edx
00007fff2a625ab0	movq	%rbx, %rcx
00007fff2a625ab3	callq	0x7fff2a626332
00007fff2a625ab8	movq	-0x10(%rbx), %rsi
00007fff2a625abc	movq	-0x8(%rbx), %rcx
00007fff2a625ac0	movq	%rcx, %rdx
00007fff2a625ac3	subq	%rsi, %rdx
00007fff2a625ac6	movq	0x8(%r14), %rbx
00007fff2a625aca	subq	%rdx, %rbx
00007fff2a625acd	movq	%rbx, 0x8(%r14)
00007fff2a625ad1	testq	%rdx, %rdx
00007fff2a625ad4	jle	0x7fff2a625aec
00007fff2a625ad6	movq	%rbx, %rdi
00007fff2a625ad9	callq	0x7fff2a62ad72                  ## symbol stub for: _memcpy
00007fff2a625ade	movq	-0x8160(%rbp), %rsi
00007fff2a625ae5	movq	-0x8158(%rbp), %rcx
00007fff2a625aec	movq	%rbx, -0x8160(%rbp)
00007fff2a625af3	movq	%rsi, -0x81b0(%rbp)
00007fff2a625afa	movups	-0x81a8(%rbp), %xmm0
00007fff2a625b01	movq	%rcx, -0x81a8(%rbp)
00007fff2a625b08	movq	-0x8150(%rbp), %rax
00007fff2a625b0f	movups	%xmm0, -0x8158(%rbp)
00007fff2a625b16	movq	%rax, -0x81a0(%rbp)
00007fff2a625b1d	movq	%rsi, -0x81b8(%rbp)
00007fff2a625b24	movq	%rcx, %rax
00007fff2a625b27	movabsq	$-0x3333333333333333, %rdx      ## imm = 0xCCCCCCCCCCCCCCCD
00007fff2a625b31	subq	%rsi, %rax
00007fff2a625b34	je	0x7fff2a625b53
00007fff2a625b36	addq	$-0x28, %rax
00007fff2a625b3a	mulq	%rdx
00007fff2a625b3d	shrq	$0x5, %rdx
00007fff2a625b41	notq	%rdx
00007fff2a625b44	leaq	(%rdx,%rdx,4), %rax
00007fff2a625b48	leaq	(%rcx,%rax,8), %rax
00007fff2a625b4c	movq	%rax, -0x81a8(%rbp)
00007fff2a625b53	testq	%rsi, %rsi
00007fff2a625b56	je	0x7fff2a625b60
00007fff2a625b58	movq	%rsi, %rdi
00007fff2a625b5b	callq	0x7fff2a62acdc                  ## symbol stub for: __ZdlPv
00007fff2a625b60	cmpl	$0x0, -0x8090(%rbp)
00007fff2a625b67	je	0x7fff2a625dcc
00007fff2a625b6d	movl	%r12d, %eax
00007fff2a625b70	movq	-0x8168(%rbp), %rcx
00007fff2a625b77	addq	%rax, %rcx
00007fff2a625b7a	movl	-0x8094(%rbp), %r15d
00007fff2a625b81	movq	%rcx, -0x8168(%rbp)
00007fff2a625b88	addq	%rcx, %r15
00007fff2a625b8b	movabsq	$0x666666666666666, %r14        ## imm = 0x666666666666666
00007fff2a625b95	leaq	-0x81d0(%rbp), %r13
00007fff2a625b9c	xorl	%r12d, %r12d
00007fff2a625b9f	movl	0x18(%r15), %esi
00007fff2a625ba3	addq	-0x8168(%rbp), %rsi
00007fff2a625baa	movl	-0x808c(%rbp), %eax
00007fff2a625bb0	addl	0x8(%r15), %eax
00007fff2a625bb4	movl	-0x8108(%rbp), %ecx
00007fff2a625bba	addl	(%r15), %ecx
00007fff2a625bbd	movl	0xc(%r15), %edx
00007fff2a625bc1	addl	%eax, %edx
00007fff2a625bc3	movl	%eax, -0x81e0(%rbp)
00007fff2a625bc9	movl	%edx, -0x81dc(%rbp)
00007fff2a625bcf	movl	0x4(%r15), %eax
00007fff2a625bd3	addl	%ecx, %eax
00007fff2a625bd5	movl	%ecx, -0x81d8(%rbp)
00007fff2a625bdb	movl	%eax, -0x81d4(%rbp)
00007fff2a625be1	movl	0x1c(%r15), %edx
00007fff2a625be5	movq	%r13, %rdi
00007fff2a625be8	callq	0x7fff2a628c5c
00007fff2a625bed	movq	-0x8158(%rbp), %rdx
00007fff2a625bf4	movq	-0x8150(%rbp), %rax
00007fff2a625bfb	cmpq	%rax, %rdx
00007fff2a625bfe	jae	0x7fff2a625c46
00007fff2a625c00	movq	-0x81c0(%rbp), %rax
00007fff2a625c07	movq	%rax, 0x20(%rdx)
00007fff2a625c0b	movq	-0x81c8(%rbp), %rax
00007fff2a625c12	movq	%rax, 0x18(%rdx)
00007fff2a625c16	movq	-0x81d0(%rbp), %rax
00007fff2a625c1d	movq	%rax, 0x10(%rdx)
00007fff2a625c21	movq	-0x81e0(%rbp), %rax
00007fff2a625c28	movq	-0x81d8(%rbp), %rcx
00007fff2a625c2f	movq	%rcx, 0x8(%rdx)
00007fff2a625c33	movq	%rax, (%rdx)
00007fff2a625c36	addq	$0x28, %rdx
00007fff2a625c3a	movq	%rdx, -0x8158(%rbp)
00007fff2a625c41	jmp	0x7fff2a625db6
00007fff2a625c46	movq	-0x8160(%rbp), %rsi
00007fff2a625c4d	subq	%rsi, %rdx
00007fff2a625c50	sarq	$0x3, %rdx
00007fff2a625c54	movabsq	$-0x3333333333333333, %rdi      ## imm = 0xCCCCCCCCCCCCCCCD
00007fff2a625c5e	imulq	%rdi, %rdx
00007fff2a625c62	leaq	0x1(%rdx), %rcx
00007fff2a625c66	cmpq	%r14, %rcx
00007fff2a625c69	ja	0x7fff2a625e93
00007fff2a625c6f	subq	%rsi, %rax
00007fff2a625c72	sarq	$0x3, %rax
00007fff2a625c76	imulq	%rdi, %rax
00007fff2a625c7a	leaq	(%rax,%rax), %rsi
00007fff2a625c7e	cmpq	%rcx, %rsi
00007fff2a625c81	cmovbq	%rcx, %rsi
00007fff2a625c85	movabsq	$0x333333333333333, %rcx        ## imm = 0x333333333333333
00007fff2a625c8f	cmpq	%rcx, %rax
00007fff2a625c92	cmovaeq	%r14, %rsi
00007fff2a625c96	leaq	-0x81b8(%rbp), %rdi
00007fff2a625c9d	leaq	-0x8150(%rbp), %rcx
00007fff2a625ca4	callq	0x7fff2a626332
00007fff2a625ca9	movq	-0x81a8(%rbp), %r14
00007fff2a625cb0	movq	-0x81c0(%rbp), %rax
00007fff2a625cb7	movq	%rax, 0x20(%r14)
00007fff2a625cbb	movq	-0x81c8(%rbp), %rax
00007fff2a625cc2	movq	%rax, 0x18(%r14)
00007fff2a625cc6	movq	-0x81d0(%rbp), %rax
00007fff2a625ccd	movq	%rax, 0x10(%r14)
00007fff2a625cd1	movq	-0x81e0(%rbp), %rax
00007fff2a625cd8	movq	-0x81d8(%rbp), %rcx
00007fff2a625cdf	movq	%rcx, 0x8(%r14)
00007fff2a625ce3	movq	%rax, (%r14)
00007fff2a625ce6	addq	$0x28, %r14
00007fff2a625cea	movq	%r14, -0x81a8(%rbp)
00007fff2a625cf1	movq	-0x8160(%rbp), %rsi
00007fff2a625cf8	movq	-0x8158(%rbp), %rcx
00007fff2a625cff	movq	%rcx, %rdx
00007fff2a625d02	subq	%rsi, %rdx
00007fff2a625d05	movq	-0x81b0(%rbp), %rbx
00007fff2a625d0c	subq	%rdx, %rbx
00007fff2a625d0f	movq	%rbx, -0x81b0(%rbp)
00007fff2a625d16	testq	%rdx, %rdx
00007fff2a625d19	jle	0x7fff2a625d31
00007fff2a625d1b	movq	%rbx, %rdi
00007fff2a625d1e	callq	0x7fff2a62ad72                  ## symbol stub for: _memcpy
00007fff2a625d23	movq	-0x8160(%rbp), %rsi
00007fff2a625d2a	movq	-0x8158(%rbp), %rcx
00007fff2a625d31	movq	%rbx, -0x8160(%rbp)
00007fff2a625d38	movq	%rsi, -0x81b0(%rbp)
00007fff2a625d3f	movq	%r14, -0x8158(%rbp)
00007fff2a625d46	movq	%rcx, -0x81a8(%rbp)
00007fff2a625d4d	movq	-0x8150(%rbp), %rax
00007fff2a625d54	movq	-0x81a0(%rbp), %rdx
00007fff2a625d5b	movq	%rdx, -0x8150(%rbp)
00007fff2a625d62	movq	%rax, -0x81a0(%rbp)
00007fff2a625d69	movq	%rsi, -0x81b8(%rbp)
00007fff2a625d70	movq	%rcx, %rax
00007fff2a625d73	subq	%rsi, %rax
00007fff2a625d76	movabsq	$-0x3333333333333333, %rdx      ## imm = 0xCCCCCCCCCCCCCCCD
00007fff2a625d80	je	0x7fff2a625d9f
00007fff2a625d82	addq	$-0x28, %rax
00007fff2a625d86	mulq	%rdx
00007fff2a625d89	shrq	$0x5, %rdx
00007fff2a625d8d	notq	%rdx
00007fff2a625d90	leaq	(%rdx,%rdx,4), %rax
00007fff2a625d94	leaq	(%rcx,%rax,8), %rax
00007fff2a625d98	movq	%rax, -0x81a8(%rbp)
00007fff2a625d9f	testq	%rsi, %rsi
00007fff2a625da2	movabsq	$0x666666666666666, %r14        ## imm = 0x666666666666666
00007fff2a625dac	je	0x7fff2a625db6
00007fff2a625dae	movq	%rsi, %rdi
00007fff2a625db1	callq	0x7fff2a62acdc                  ## symbol stub for: __ZdlPv
00007fff2a625db6	incq	%r12
00007fff2a625db9	movl	-0x8090(%rbp), %eax
00007fff2a625dbf	addq	$0x20, %r15
00007fff2a625dc3	cmpq	%rax, %r12
00007fff2a625dc6	jb	0x7fff2a625b9f
00007fff2a625dcc	leaq	-0x8190(%rbp), %rdx
00007fff2a625dd3	movq	-0x8178(%rbp), %rdi
00007fff2a625dda	movq	%rdx, %rsi
00007fff2a625ddd	callq	0x7fff2a625eb4
00007fff2a625de2	movq	%rax, %rbx
00007fff2a625de5	movq	0x28(%rax), %rdi
00007fff2a625de9	testq	%rdi, %rdi
00007fff2a625dec	je	0x7fff2a625e0b
00007fff2a625dee	movq	%rbx, %r14
00007fff2a625df1	addq	$0x28, %r14
00007fff2a625df5	movq	%rdi, 0x30(%rbx)
00007fff2a625df9	callq	0x7fff2a62acdc                  ## symbol stub for: __ZdlPv
00007fff2a625dfe	xorl	%eax, %eax
00007fff2a625e00	movq	%rax, 0x10(%r14)
00007fff2a625e04	movq	%rax, 0x8(%r14)
00007fff2a625e08	movq	%rax, (%r14)
00007fff2a625e0b	movaps	-0x8160(%rbp), %xmm0
00007fff2a625e12	movups	%xmm0, 0x28(%rbx)
00007fff2a625e16	movq	-0x8150(%rbp), %rax
00007fff2a625e1d	movq	%rax, 0x38(%rbx)
00007fff2a625e21	xorps	%xmm0, %xmm0
00007fff2a625e24	movaps	%xmm0, -0x8160(%rbp)
00007fff2a625e2b	movq	$0x0, -0x8150(%rbp)
00007fff2a625e36	leaq	-0x8190(%rbp), %rdx
00007fff2a625e3d	movq	-0x8178(%rbp), %rdi
00007fff2a625e44	movq	%rdx, %rsi
00007fff2a625e47	callq	0x7fff2a625eb4
00007fff2a625e4c	movq	%rax, %r13
00007fff2a625e4f	addq	$0x28, %r13
00007fff2a625e53	movq	-0x8160(%rbp), %rdi
00007fff2a625e5a	testq	%rdi, %rdi
00007fff2a625e5d	je	0x7fff2a625915
00007fff2a625e63	movq	%rdi, -0x8158(%rbp)
00007fff2a625e6a	callq	0x7fff2a62acdc                  ## symbol stub for: __ZdlPv
00007fff2a625e6f	jmp	0x7fff2a625915
00007fff2a625e74	callq	0x7fff2a62acee                  ## symbol stub for: ___stack_chk_fail
00007fff2a625e79	leaq	0x5468(%rip), %rdi              ## literal pool for: "aot_image_key, info or x86_address_result is nullptr"
00007fff2a625e80	xorl	%eax, %eax
00007fff2a625e82	callq	0x7fff2a628bb4
00007fff2a625e87	leaq	-0x8190(%rbp), %rdi
00007fff2a625e8e	callq	0x7fff2a62acac                  ## symbol stub for: __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv
00007fff2a625e93	leaq	-0x8160(%rbp), %rdi
00007fff2a625e9a	callq	0x7fff2a62aca6                  ## symbol stub for: __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv
00007fff2a625e9f	movq	-0x8170(%rbp), %rdi
00007fff2a625ea6	addq	$0x48, %rdi
00007fff2a625eaa	callq	0x7fff2a62aca6                  ## symbol stub for: __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv
00007fff2a625eaf	callq	0x7fff2a62ad18                  ## symbol stub for: _abort
00007fff2a625eb4	pushq	%rbp
00007fff2a625eb5	movq	%rsp, %rbp
00007fff2a625eb8	pushq	%r15
00007fff2a625eba	pushq	%r14
00007fff2a625ebc	pushq	%r13
00007fff2a625ebe	pushq	%r12
00007fff2a625ec0	pushq	%rbx
00007fff2a625ec1	subq	$0x28, %rsp
00007fff2a625ec5	movq	%rdx, %rbx
00007fff2a625ec8	movq	%rsi, %r13
00007fff2a625ecb	movq	%rdi, %r12
00007fff2a625ece	movzbl	(%rsi), %r15d
00007fff2a625ed2	testb	$0x1, %r15b
00007fff2a625ed6	je	0x7fff2a625ee2
00007fff2a625ed8	movq	0x8(%r13), %r15
00007fff2a625edc	movq	0x10(%r13), %r13
00007fff2a625ee0	jmp	0x7fff2a625ee8
00007fff2a625ee2	incq	%r13
00007fff2a625ee5	shrq	%r15
00007fff2a625ee8	movq	%r13, %rdi
00007fff2a625eeb	movq	%r15, %rsi
00007fff2a625eee	callq	0x7fff2a6263aa
00007fff2a625ef3	movq	0x8(%r12), %r14
00007fff2a625ef8	testq	%r14, %r14
00007fff2a625efb	movq	%rax, -0x30(%rbp)
00007fff2a625eff	movq	%rbx, -0x50(%rbp)
00007fff2a625f03	je	0x7fff2a625f77
00007fff2a625f05	movq	%rax, %rsi
00007fff2a625f08	movq	%r12, -0x38(%rbp)
00007fff2a625f0c	movq	%r14, %rax
00007fff2a625f0f	shrq	%rax
00007fff2a625f12	movabsq	$0x5555555555555555, %rcx       ## imm = 0x5555555555555555
00007fff2a625f1c	andq	%rax, %rcx
00007fff2a625f1f	movq	%r14, %rax
00007fff2a625f22	subq	%rcx, %rax
00007fff2a625f25	movabsq	$0x3333333333333333, %rcx       ## imm = 0x3333333333333333
00007fff2a625f2f	movq	%rax, %rdx
00007fff2a625f32	andq	%rcx, %rdx
00007fff2a625f35	shrq	$0x2, %rax
00007fff2a625f39	andq	%rcx, %rax
00007fff2a625f3c	addq	%rdx, %rax
00007fff2a625f3f	movq	%rax, %rcx
00007fff2a625f42	shrq	$0x4, %rcx
00007fff2a625f46	addq	%rax, %rcx
00007fff2a625f49	movabsq	$0xf0f0f0f0f0f0f0f, %rax        ## imm = 0xF0F0F0F0F0F0F0F
00007fff2a625f53	andq	%rcx, %rax
00007fff2a625f56	movabsq	$0x101010101010101, %r12        ## imm = 0x101010101010101
00007fff2a625f60	imulq	%rax, %r12
00007fff2a625f64	shrq	$0x38, %r12
00007fff2a625f68	cmpq	$0x1, %r12
00007fff2a625f6c	ja	0x7fff2a625f7c
00007fff2a625f6e	leaq	-0x1(%r14), %r8
00007fff2a625f72	andq	%rsi, %r8
00007fff2a625f75	jmp	0x7fff2a625f8f
00007fff2a625f77	jmp	0x7fff2a62606d
00007fff2a625f7c	movq	%rsi, %r8
00007fff2a625f7f	cmpq	%r14, %rsi
00007fff2a625f82	jb	0x7fff2a625f8f
00007fff2a625f84	movq	%rsi, %rax
00007fff2a625f87	xorl	%edx, %edx
00007fff2a625f89	divq	%r14
00007fff2a625f8c	movq	%rdx, %r8
00007fff2a625f8f	movq	-0x38(%rbp), %rax
00007fff2a625f93	movq	(%rax), %rax
00007fff2a625f96	movq	(%rax,%r8,8), %rax
00007fff2a625f9a	testq	%rax, %rax
00007fff2a625f9d	je	0x7fff2a626066
00007fff2a625fa3	movq	(%rax), %rbx
00007fff2a625fa6	testq	%rbx, %rbx
00007fff2a625fa9	je	0x7fff2a626066
00007fff2a625faf	leaq	-0x1(%r14), %rax
00007fff2a625fb3	movq	%rax, -0x48(%rbp)
00007fff2a625fb7	movq	%r8, -0x40(%rbp)
00007fff2a625fbb	movq	0x8(%rbx), %rax
00007fff2a625fbf	cmpq	%rsi, %rax
00007fff2a625fc2	je	0x7fff2a625fe6
00007fff2a625fc4	cmpl	$0x1, %r12d
00007fff2a625fc8	ja	0x7fff2a625fd0
00007fff2a625fca	andq	-0x48(%rbp), %rax
00007fff2a625fce	jmp	0x7fff2a625fdd
00007fff2a625fd0	cmpq	%r14, %rax
00007fff2a625fd3	jb	0x7fff2a625fdd
00007fff2a625fd5	xorl	%edx, %edx
00007fff2a625fd7	divq	%r14
00007fff2a625fda	movq	%rdx, %rax
00007fff2a625fdd	cmpq	%r8, %rax
00007fff2a625fe0	jne	0x7fff2a626066
00007fff2a625fe6	movzbl	0x10(%rbx), %ecx
00007fff2a625fea	movq	%rcx, %rax
00007fff2a625fed	shrq	%rax
00007fff2a625ff0	movq	%rax, %rdx
00007fff2a625ff3	testb	$0x1, %cl
00007fff2a625ff6	je	0x7fff2a625ffc
00007fff2a625ff8	movq	0x18(%rbx), %rdx
00007fff2a625ffc	cmpq	%r15, %rdx
00007fff2a625fff	jne	0x7fff2a62605a
00007fff2a626001	leaq	0x10(%rbx), %rdi
00007fff2a626005	incq	%rdi
00007fff2a626008	testb	$0x1, %cl
00007fff2a62600b	je	0x7fff2a626011
00007fff2a62600d	movq	0x20(%rbx), %rdi
00007fff2a626011	jne	0x7fff2a626036
00007fff2a626013	testq	%r15, %r15
00007fff2a626016	je	0x7fff2a626320
00007fff2a62601c	xorl	%ecx, %ecx
00007fff2a62601e	movb	0x11(%rbx,%rcx), %dl
00007fff2a626022	cmpb	(%r13,%rcx), %dl
00007fff2a626027	jne	0x7fff2a62605a
00007fff2a626029	incq	%rcx
00007fff2a62602c	cmpq	%rcx, %rax
00007fff2a62602f	jne	0x7fff2a62601e
00007fff2a626031	jmp	0x7fff2a626320
00007fff2a626036	testq	%r15, %r15
00007fff2a626039	je	0x7fff2a626320
00007fff2a62603f	movq	%r13, %rsi
00007fff2a626042	movq	%r15, %rdx
00007fff2a626045	callq	0x7fff2a62ad6c                  ## symbol stub for: _memcmp
00007fff2a62604a	movq	-0x40(%rbp), %r8
00007fff2a62604e	movq	-0x30(%rbp), %rsi
00007fff2a626052	testl	%eax, %eax
00007fff2a626054	je	0x7fff2a626320
00007fff2a62605a	movq	(%rbx), %rbx
00007fff2a62605d	testq	%rbx, %rbx
00007fff2a626060	jne	0x7fff2a625fbb
00007fff2a626066	movq	%r8, %r15
00007fff2a626069	movq	-0x38(%rbp), %r12
00007fff2a62606d	movl	$0x40, %edi
00007fff2a626072	callq	0x7fff2a62ace2                  ## symbol stub for: __Znwm
00007fff2a626077	movq	%rax, %rbx
00007fff2a62607a	leaq	0x10(%rax), %rdi
00007fff2a62607e	movq	-0x50(%rbp), %rsi
00007fff2a626082	callq	0x7fff2a62acca                  ## symbol stub for: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_
00007fff2a626087	xorl	%eax, %eax
00007fff2a626089	movq	%rax, 0x38(%rbx)
00007fff2a62608d	movq	%rax, 0x30(%rbx)
00007fff2a626091	movq	%rax, 0x28(%rbx)
00007fff2a626095	movq	-0x30(%rbp), %rsi
00007fff2a626099	movq	%rsi, 0x8(%rbx)
00007fff2a62609d	movq	%rax, (%rbx)
00007fff2a6260a0	movq	0x18(%r12), %rax
00007fff2a6260a5	incq	%rax
00007fff2a6260a8	js	0x7fff2a6260b1
00007fff2a6260aa	cvtsi2ss	%rax, %xmm0
00007fff2a6260af	jmp	0x7fff2a6260c6
00007fff2a6260b1	movq	%rax, %rcx
00007fff2a6260b4	shrq	%rcx
00007fff2a6260b7	andl	$0x1, %eax
00007fff2a6260ba	orq	%rcx, %rax
00007fff2a6260bd	cvtsi2ss	%rax, %xmm0
00007fff2a6260c2	addss	%xmm0, %xmm0
00007fff2a6260c6	movq	%r14, %rcx
00007fff2a6260c9	shrq	%rcx
00007fff2a6260cc	movl	%r14d, %eax
00007fff2a6260cf	andl	$0x1, %eax
00007fff2a6260d2	orq	%rcx, %rax
00007fff2a6260d5	testq	%r14, %r14
00007fff2a6260d8	movq	%r15, %rdx
00007fff2a6260db	js	0x7fff2a6260e4
00007fff2a6260dd	cvtsi2ss	%r14, %xmm2
00007fff2a6260e2	jmp	0x7fff2a6260ed
00007fff2a6260e4	cvtsi2ss	%rax, %xmm2
00007fff2a6260e9	addss	%xmm2, %xmm2
00007fff2a6260ed	movss	0x20(%r12), %xmm1               ## xmm1 = mem[0],zero,zero,zero
00007fff2a6260f4	je	0x7fff2a626103
00007fff2a6260f6	mulss	%xmm1, %xmm2
00007fff2a6260fa	ucomiss	%xmm2, %xmm0
00007fff2a6260fd	jbe	0x7fff2a6262be
00007fff2a626103	cmpq	$0x3, %r14
00007fff2a626107	setb	%al
00007fff2a62610a	leaq	-0x1(%r14), %rcx
00007fff2a62610e	testq	%rcx, %r14
00007fff2a626111	setne	%cl
00007fff2a626114	orb	%al, %cl
00007fff2a626116	divss	%xmm1, %xmm0
00007fff2a62611a	roundss	$0xa, %xmm0, %xmm0
00007fff2a626120	cvttss2si	%xmm0, %rax
00007fff2a626125	movss	0x4f13(%rip), %xmm2             ## xmm2 = mem[0],zero,zero,zero
00007fff2a62612d	movaps	%xmm0, %xmm1
00007fff2a626130	subss	%xmm2, %xmm1
00007fff2a626134	cvttss2si	%xmm1, %rdi
00007fff2a626139	movzbl	%cl, %ecx
00007fff2a62613c	btcq	$0x3f, %rdi
00007fff2a626141	ucomiss	%xmm2, %xmm0
00007fff2a626144	leaq	(%rcx,%r14,2), %rcx
00007fff2a626148	cmovbq	%rax, %rdi
00007fff2a62614c	cmpq	%rdi, %rcx
00007fff2a62614f	cmovaeq	%rcx, %rdi
00007fff2a626153	movl	$0x2, %r15d
00007fff2a626159	cmpq	$0x1, %rdi
00007fff2a62615d	je	0x7fff2a626181
00007fff2a62615f	leaq	-0x1(%rdi), %rax
00007fff2a626163	testq	%rax, %rdi
00007fff2a626166	jne	0x7fff2a62616d
00007fff2a626168	movq	%rdi, %r15
00007fff2a62616b	jmp	0x7fff2a626181
00007fff2a62616d	callq	0x7fff2a62acb2                  ## symbol stub for: __ZNSt3__112__next_primeEm
00007fff2a626172	movss	0x4ec6(%rip), %xmm2             ## xmm2 = mem[0],zero,zero,zero
00007fff2a62617a	movq	-0x30(%rbp), %rsi
00007fff2a62617e	movq	%rax, %r15
00007fff2a626181	movq	0x8(%r12), %r14
00007fff2a626186	cmpq	%r14, %r15
00007fff2a626189	ja	0x7fff2a62628a
00007fff2a62618f	jae	0x7fff2a626299
00007fff2a626195	movq	0x18(%r12), %rax
00007fff2a62619a	testq	%rax, %rax
00007fff2a62619d	js	0x7fff2a6261a9
00007fff2a62619f	xorps	%xmm0, %xmm0
00007fff2a6261a2	cvtsi2ss	%rax, %xmm0
00007fff2a6261a7	jmp	0x7fff2a6261c1
00007fff2a6261a9	movq	%rax, %rcx
00007fff2a6261ac	shrq	%rcx
00007fff2a6261af	andl	$0x1, %eax
00007fff2a6261b2	orq	%rcx, %rax
00007fff2a6261b5	xorps	%xmm0, %xmm0
00007fff2a6261b8	cvtsi2ss	%rax, %xmm0
00007fff2a6261bd	addss	%xmm0, %xmm0
00007fff2a6261c1	divss	0x20(%r12), %xmm0
00007fff2a6261c8	roundss	$0xa, %xmm0, %xmm0
00007fff2a6261ce	cvttss2si	%xmm0, %rax
00007fff2a6261d3	movaps	%xmm0, %xmm1
00007fff2a6261d6	subss	%xmm2, %xmm1
00007fff2a6261da	cvttss2si	%xmm1, %rdi
00007fff2a6261df	btcq	$0x3f, %rdi
00007fff2a6261e4	ucomiss	%xmm2, %xmm0
00007fff2a6261e7	cmovbq	%rax, %rdi
00007fff2a6261eb	cmpq	$0x3, %r14
00007fff2a6261ef	jb	0x7fff2a626275
00007fff2a6261f5	movq	%r14, %rax
00007fff2a6261f8	shrq	%rax
00007fff2a6261fb	movabsq	$0x5555555555555555, %rcx       ## imm = 0x5555555555555555
00007fff2a626205	andq	%rax, %rcx
00007fff2a626208	movq	%r14, %rax
00007fff2a62620b	subq	%rcx, %rax
00007fff2a62620e	movabsq	$0x3333333333333333, %rcx       ## imm = 0x3333333333333333
00007fff2a626218	movq	%rax, %rdx
00007fff2a62621b	shrq	$0x2, %rdx
00007fff2a62621f	andq	%rcx, %rax
00007fff2a626222	andq	%rcx, %rdx
00007fff2a626225	addq	%rax, %rdx
00007fff2a626228	movq	%rdx, %rax
00007fff2a62622b	shrq	$0x4, %rax
00007fff2a62622f	addq	%rdx, %rax
00007fff2a626232	movabsq	$0xf0f0f0f0f0f0f0f, %rcx        ## imm = 0xF0F0F0F0F0F0F0F
00007fff2a62623c	andq	%rax, %rcx
00007fff2a62623f	movabsq	$0x101010101010101, %rax        ## imm = 0x101010101010101
00007fff2a626249	imulq	%rcx, %rax
00007fff2a62624d	shrq	$0x38, %rax
00007fff2a626251	cmpl	$0x1, %eax
00007fff2a626254	ja	0x7fff2a626275
00007fff2a626256	leaq	-0x1(%rdi), %rax
00007fff2a62625a	bsrq	%rax, %rcx
00007fff2a62625e	xorl	$0x3f, %ecx
00007fff2a626261	negb	%cl
00007fff2a626263	movl	$0x1, %eax
00007fff2a626268	shlq	%cl, %rax
00007fff2a62626b	cmpq	$0x2, %rdi
00007fff2a62626f	cmovbq	%rdi, %rax
00007fff2a626273	jmp	0x7fff2a62627e
00007fff2a626275	callq	0x7fff2a62acb2                  ## symbol stub for: __ZNSt3__112__next_primeEm
00007fff2a62627a	movq	-0x30(%rbp), %rsi
00007fff2a62627e	cmpq	%rax, %r15
00007fff2a626281	cmovbq	%rax, %r15
00007fff2a626285	cmpq	%r14, %r15
00007fff2a626288	jae	0x7fff2a626299
00007fff2a62628a	movq	%r12, %rdi
00007fff2a62628d	movq	%r15, %rsi
00007fff2a626290	callq	0x7fff2a626882
00007fff2a626295	movq	-0x30(%rbp), %rsi
00007fff2a626299	movq	0x8(%r12), %r14
00007fff2a62629e	leaq	-0x1(%r14), %rdx
00007fff2a6262a2	testq	%rdx, %r14
00007fff2a6262a5	jne	0x7fff2a6262ac
00007fff2a6262a7	andq	%rsi, %rdx
00007fff2a6262aa	jmp	0x7fff2a6262be
00007fff2a6262ac	cmpq	%r14, %rsi
00007fff2a6262af	jae	0x7fff2a6262b6
00007fff2a6262b1	movq	%rsi, %rdx
00007fff2a6262b4	jmp	0x7fff2a6262be
00007fff2a6262b6	movq	%rsi, %rax
00007fff2a6262b9	xorl	%edx, %edx
00007fff2a6262bb	divq	%r14
00007fff2a6262be	movq	(%r12), %rcx
00007fff2a6262c2	movq	(%rcx,%rdx,8), %rax
00007fff2a6262c6	testq	%rax, %rax
00007fff2a6262c9	je	0x7fff2a6262d3
00007fff2a6262cb	movq	(%rax), %rcx
00007fff2a6262ce	movq	%rcx, (%rbx)
00007fff2a6262d1	jmp	0x7fff2a626318
00007fff2a6262d3	leaq	0x10(%r12), %rax
00007fff2a6262d8	movq	0x10(%r12), %rsi
00007fff2a6262dd	movq	%rsi, (%rbx)
00007fff2a6262e0	movq	%rbx, 0x10(%r12)
00007fff2a6262e5	movq	%rax, (%rcx,%rdx,8)
00007fff2a6262e9	movq	(%rbx), %rax
00007fff2a6262ec	testq	%rax, %rax
00007fff2a6262ef	je	0x7fff2a62631b
00007fff2a6262f1	movq	0x8(%rax), %rax
00007fff2a6262f5	leaq	-0x1(%r14), %rcx
00007fff2a6262f9	testq	%rcx, %r14
00007fff2a6262fc	jne	0x7fff2a626303
00007fff2a6262fe	andq	%rcx, %rax
00007fff2a626301	jmp	0x7fff2a626310
00007fff2a626303	cmpq	%r14, %rax
00007fff2a626306	jb	0x7fff2a626310
00007fff2a626308	xorl	%edx, %edx
00007fff2a62630a	divq	%r14
00007fff2a62630d	movq	%rdx, %rax
00007fff2a626310	shlq	$0x3, %rax
00007fff2a626314	addq	(%r12), %rax
00007fff2a626318	movq	%rbx, (%rax)
00007fff2a62631b	incq	0x18(%r12)
00007fff2a626320	movq	%rbx, %rax
00007fff2a626323	addq	$0x28, %rsp
00007fff2a626327	popq	%rbx
00007fff2a626328	popq	%r12
00007fff2a62632a	popq	%r13
00007fff2a62632c	popq	%r14
00007fff2a62632e	popq	%r15
00007fff2a626330	popq	%rbp
00007fff2a626331	retq
00007fff2a626332	pushq	%rbp
00007fff2a626333	movq	%rsp, %rbp
00007fff2a626336	pushq	%r15
00007fff2a626338	pushq	%r14
00007fff2a62633a	pushq	%rbx
00007fff2a62633b	pushq	%rax
00007fff2a62633c	movq	%rdx, %r15
00007fff2a62633f	movq	%rsi, %r14
00007fff2a626342	movq	%rdi, %rbx
00007fff2a626345	movq	$0x0, 0x18(%rdi)
00007fff2a62634d	movq	%rcx, 0x20(%rdi)
00007fff2a626351	testq	%rsi, %rsi
00007fff2a626354	je	0x7fff2a626378
00007fff2a626356	movabsq	$0x666666666666667, %rax        ## imm = 0x666666666666667
00007fff2a626360	cmpq	%rax, %r14
00007fff2a626363	jae	0x7fff2a6263a4
00007fff2a626365	leaq	(,%r14,8), %rax
00007fff2a62636d	leaq	(%rax,%rax,4), %rdi
00007fff2a626371	callq	0x7fff2a62ace2                  ## symbol stub for: __Znwm
00007fff2a626376	jmp	0x7fff2a62637a
00007fff2a626378	xorl	%eax, %eax
00007fff2a62637a	movq	%rax, (%rbx)
00007fff2a62637d	leaq	(%r15,%r15,4), %rcx
00007fff2a626381	leaq	(%rax,%rcx,8), %rcx
00007fff2a626385	movq	%rcx, 0x10(%rbx)
00007fff2a626389	movq	%rcx, 0x8(%rbx)
00007fff2a62638d	leaq	(%r14,%r14,4), %rcx
00007fff2a626391	leaq	(%rax,%rcx,8), %rax
00007fff2a626395	movq	%rax, 0x18(%rbx)
00007fff2a626399	addq	$0x8, %rsp
00007fff2a62639d	popq	%rbx
00007fff2a62639e	popq	%r14
00007fff2a6263a0	popq	%r15
00007fff2a6263a2	popq	%rbp
00007fff2a6263a3	retq
00007fff2a6263a4	callq	0x7fff2a62ad18                  ## symbol stub for: _abort
00007fff2a6263a9	nop
00007fff2a6263aa	pushq	%rbp
00007fff2a6263ab	movq	%rsp, %rbp
00007fff2a6263ae	pushq	%r15
00007fff2a6263b0	pushq	%r14
00007fff2a6263b2	pushq	%r13
00007fff2a6263b4	pushq	%r12
00007fff2a6263b6	pushq	%rbx
00007fff2a6263b7	cmpq	$0x20, %rsi
00007fff2a6263bb	ja	0x7fff2a62641a
00007fff2a6263bd	cmpq	$0x10, %rsi
00007fff2a6263c1	ja	0x7fff2a6264e9
00007fff2a6263c7	cmpq	$0x9, %rsi
00007fff2a6263cb	jb	0x7fff2a6267ed
00007fff2a6263d1	movq	-0x8(%rdi,%rsi), %rdx
00007fff2a6263d6	leaq	(%rdx,%rsi), %rax
00007fff2a6263da	movl	%esi, %ecx
00007fff2a6263dc	rorq	%cl, %rax
00007fff2a6263df	movq	(%rdi), %rcx
00007fff2a6263e2	xorq	%rax, %rcx
00007fff2a6263e5	movabsq	$-0x622015f714c7d297, %rsi      ## imm = 0x9DDFEA08EB382D69
00007fff2a6263ef	imulq	%rsi, %rcx
00007fff2a6263f3	movq	%rcx, %rdi
00007fff2a6263f6	shrq	$0x2f, %rdi
00007fff2a6263fa	xorq	%rax, %rcx
00007fff2a6263fd	xorq	%rdi, %rcx
00007fff2a626400	imulq	%rsi, %rcx
00007fff2a626404	movq	%rcx, %rax
00007fff2a626407	shrq	$0x2f, %rax
00007fff2a62640b	xorq	%rcx, %rax
00007fff2a62640e	imulq	%rsi, %rax
00007fff2a626412	xorq	%rdx, %rax
00007fff2a626415	jmp	0x7fff2a6267e2
00007fff2a62641a	cmpq	$0x40, %rsi
00007fff2a62641e	ja	0x7fff2a626592
00007fff2a626424	movq	0x10(%rdi), %rbx
00007fff2a626428	movq	0x18(%rdi), %r14
00007fff2a62642c	movq	-0x10(%rdi,%rsi), %r9
00007fff2a626431	leaq	(%r9,%rsi), %rax
00007fff2a626435	movabsq	$-0x3c5a37a36834ced9, %r8       ## imm = 0xC3A5C85C97CB3127
00007fff2a62643f	imulq	%r8, %rax
00007fff2a626443	addq	(%rdi), %rax
00007fff2a626446	leaq	(%rax,%r14), %r10
00007fff2a62644a	rolq	$0xc, %r10
00007fff2a62644e	movq	%rax, %rdx
00007fff2a626451	rolq	$0x1b, %rdx
00007fff2a626455	addq	0x8(%rdi), %rax
00007fff2a626459	movq	%rax, %rcx
00007fff2a62645c	rolq	$0x39, %rcx
00007fff2a626460	addq	%rdx, %rcx
00007fff2a626463	addq	%rbx, %rax
00007fff2a626466	movq	%rax, %r11
00007fff2a626469	rolq	$0x21, %r11
00007fff2a62646d	addq	%r10, %rcx
00007fff2a626470	addq	%rcx, %r11
00007fff2a626473	addq	-0x20(%rdi,%rsi), %rbx
00007fff2a626478	addq	%r14, %rax
00007fff2a62647b	addq	-0x8(%rdi,%rsi), %r14
00007fff2a626480	leaq	(%r14,%rbx), %rcx
00007fff2a626484	rolq	$0xc, %rcx
00007fff2a626488	movq	%rbx, %rdx
00007fff2a62648b	rolq	$0x1b, %rdx
00007fff2a62648f	addq	-0x18(%rdi,%rsi), %rbx
00007fff2a626494	movq	%rbx, %rdi
00007fff2a626497	rolq	$0x39, %rdi
00007fff2a62649b	addq	%r9, %rbx
00007fff2a62649e	addq	%rbx, %r14
00007fff2a6264a1	rolq	$0x21, %rbx
00007fff2a6264a5	addq	%rax, %rdx
00007fff2a6264a8	addq	%rdi, %rdx
00007fff2a6264ab	addq	%rcx, %rdx
00007fff2a6264ae	addq	%rbx, %rdx
00007fff2a6264b1	movabsq	$-0x651e95c4d06fbfb1, %rcx      ## imm = 0x9AE16A3B2F90404F
00007fff2a6264bb	imulq	%rcx, %rdx
00007fff2a6264bf	addq	%r11, %r14
00007fff2a6264c2	imulq	%r8, %r14
00007fff2a6264c6	addq	%rdx, %r14
00007fff2a6264c9	movq	%r14, %rdx
00007fff2a6264cc	shrq	$0x2f, %rdx
00007fff2a6264d0	xorq	%r14, %rdx
00007fff2a6264d3	imulq	%r8, %rdx
00007fff2a6264d7	addq	%r11, %rdx
00007fff2a6264da	movq	%rdx, %rax
00007fff2a6264dd	shrq	$0x2f, %rax
00007fff2a6264e1	xorq	%rdx, %rax
00007fff2a6264e4	jmp	0x7fff2a626589
00007fff2a6264e9	movabsq	$-0x4b6d499041670d8d, %rax      ## imm = 0xB492B66FBE98F273
00007fff2a6264f3	imulq	(%rdi), %rax
00007fff2a6264f7	movq	0x8(%rdi), %r8
00007fff2a6264fb	movq	-0x8(%rdi,%rsi), %rdx
00007fff2a626500	movabsq	$-0x3c5a37a36834ced9, %rcx      ## imm = 0xC3A5C85C97CB3127
00007fff2a62650a	imulq	-0x10(%rdi,%rsi), %rcx
00007fff2a626510	movabsq	$-0x651e95c4d06fbfb1, %rdi      ## imm = 0x9AE16A3B2F90404F
00007fff2a62651a	movq	%rax, %rbx
00007fff2a62651d	subq	%r8, %rbx
00007fff2a626520	rolq	$0x15, %rbx
00007fff2a626524	imulq	%rdx, %rdi
00007fff2a626528	addq	%rcx, %rbx
00007fff2a62652b	addq	%rsi, %rax
00007fff2a62652e	subq	%rdi, %rax
00007fff2a626531	shrq	$0x1e, %rdi
00007fff2a626535	movabsq	$-0x41befec400000000, %rsi      ## imm = 0xBE41013C00000000
00007fff2a62653f	imulq	%rdx, %rsi
00007fff2a626543	orq	%rdi, %rsi
00007fff2a626546	movabsq	$-0x36b62838af619aa9, %rdx      ## imm = 0xC949D7C7509E6557
00007fff2a626550	xorq	%r8, %rdx
00007fff2a626553	rolq	$0x2c, %rdx
00007fff2a626557	addq	%rbx, %rsi
00007fff2a62655a	addq	%rdx, %rax
00007fff2a62655d	xorq	%rax, %rsi
00007fff2a626560	movabsq	$-0x622015f714c7d297, %rcx      ## imm = 0x9DDFEA08EB382D69
00007fff2a62656a	imulq	%rcx, %rsi
00007fff2a62656e	movq	%rsi, %rdx
00007fff2a626571	shrq	$0x2f, %rdx
00007fff2a626575	xorq	%rax, %rsi
00007fff2a626578	xorq	%rdx, %rsi
00007fff2a62657b	imulq	%rcx, %rsi
00007fff2a62657f	movq	%rsi, %rax
00007fff2a626582	shrq	$0x2f, %rax
00007fff2a626586	xorq	%rsi, %rax
00007fff2a626589	imulq	%rcx, %rax
00007fff2a62658d	jmp	0x7fff2a6267e2
00007fff2a626592	movabsq	$-0x4b6d499041670d8d, %r13      ## imm = 0xB492B66FBE98F273
00007fff2a62659c	movabsq	$-0x622015f714c7d297, %r15      ## imm = 0x9DDFEA08EB382D69
00007fff2a6265a6	movq	-0x28(%rdi,%rsi), %rax
00007fff2a6265ab	movq	-0x10(%rdi,%rsi), %r8
00007fff2a6265b0	movq	-0x38(%rdi,%rsi), %r10
00007fff2a6265b5	movq	-0x30(%rdi,%rsi), %r9
00007fff2a6265ba	leaq	(%r10,%r8), %rcx
00007fff2a6265be	leaq	(%r9,%rsi), %rbx
00007fff2a6265c2	movq	-0x18(%rdi,%rsi), %rdx
00007fff2a6265c7	xorq	%rdx, %rbx
00007fff2a6265ca	imulq	%r15, %rbx
00007fff2a6265ce	movq	%rbx, %r11
00007fff2a6265d1	shrq	$0x2f, %r11
00007fff2a6265d5	xorq	%rdx, %rbx
00007fff2a6265d8	xorq	%r11, %rbx
00007fff2a6265db	imulq	%r15, %rbx
00007fff2a6265df	movq	%rbx, %r14
00007fff2a6265e2	shrq	$0x2f, %r14
00007fff2a6265e6	xorq	%rbx, %r14
00007fff2a6265e9	imulq	%r15, %r14
00007fff2a6265ed	movq	-0x40(%rdi,%rsi), %r15
00007fff2a6265f2	addq	%rsi, %r15
00007fff2a6265f5	leaq	(%rax,%r15), %rbx
00007fff2a6265f9	addq	%r14, %rbx
00007fff2a6265fc	rolq	$0x2b, %rbx
00007fff2a626600	addq	%r15, %r10
00007fff2a626603	addq	%r9, %r10
00007fff2a626606	movq	%r10, %r11
00007fff2a626609	rolq	$0x14, %r11
00007fff2a62660d	addq	%r15, %r11
00007fff2a626610	addq	%rbx, %r11
00007fff2a626613	movq	-0x20(%rdi,%rsi), %r12
00007fff2a626618	addq	%rcx, %r12
00007fff2a62661b	movq	-0x8(%rdi,%rsi), %r9
00007fff2a626620	addq	%r13, %r12
00007fff2a626623	leaq	(%r12,%rax), %r15
00007fff2a626627	addq	%r9, %r15
00007fff2a62662a	addq	%r12, %rdx
00007fff2a62662d	addq	%r8, %rdx
00007fff2a626630	movq	%rdx, %rbx
00007fff2a626633	addq	%r9, %rdx
00007fff2a626636	addq	%rax, %r10
00007fff2a626639	rolq	$0x2b, %r15
00007fff2a62663d	rolq	$0x14, %rbx
00007fff2a626641	addq	%r12, %rbx
00007fff2a626644	movq	%rdi, %r9
00007fff2a626647	addq	%r15, %rbx
00007fff2a62664a	imulq	%r13, %rax
00007fff2a62664e	movq	(%rdi), %rdi
00007fff2a626651	movq	%rdi, -0x30(%rbp)
00007fff2a626655	addq	%rdi, %rax
00007fff2a626658	decq	%rsi
00007fff2a62665b	andq	$-0x40, %rsi
00007fff2a62665f	movq	%rsi, -0x38(%rbp)
00007fff2a626663	movl	$0x40, %r15d
00007fff2a626669	movabsq	$-0x4b6d499041670d8d, %rdi      ## imm = 0xB492B66FBE98F273
00007fff2a626673	movq	%r14, %r8
00007fff2a626676	addq	%r10, %rax
00007fff2a626679	addq	%rcx, %rax
00007fff2a62667c	movq	-0x38(%r9,%r15), %r14
00007fff2a626681	movq	-0x30(%r9,%r15), %r12
00007fff2a626686	addq	%r14, %rax
00007fff2a626689	addq	%r11, %rcx
00007fff2a62668c	movq	-0x10(%r9,%r15), %rsi
00007fff2a626691	movq	%rsi, -0x40(%rbp)
00007fff2a626695	addq	%rsi, %rcx
00007fff2a626698	rolq	$0x16, %rcx
00007fff2a62669c	movq	%rcx, %r13
00007fff2a62669f	imulq	%rdi, %r13
00007fff2a6266a3	movq	-0x18(%r9,%r15), %rsi
00007fff2a6266a8	addq	%rsi, %r10
00007fff2a6266ab	movq	%r10, %rcx
00007fff2a6266ae	addq	%r13, %rcx
00007fff2a6266b1	addq	%rdx, %r8
00007fff2a6266b4	imulq	%rdi, %r11
00007fff2a6266b8	addq	-0x30(%rbp), %r11
00007fff2a6266bc	movq	-0x28(%r9,%r15), %r13
00007fff2a6266c1	addq	%r11, %rdx
00007fff2a6266c4	addq	%r13, %rdx
00007fff2a6266c7	addq	%r11, %r14
00007fff2a6266ca	addq	%r12, %r14
00007fff2a6266cd	movq	%r14, %r10
00007fff2a6266d0	addq	%r13, %r10
00007fff2a6266d3	rolq	$0x14, %r14
00007fff2a6266d7	addq	%r14, %r11
00007fff2a6266da	rolq	$0x1b, %rax
00007fff2a6266de	imulq	%rdi, %rax
00007fff2a6266e2	movq	%rax, %r14
00007fff2a6266e5	xorq	%rbx, %r14
00007fff2a6266e8	rolq	$0x1f, %r8
00007fff2a6266ec	movq	%r8, %rax
00007fff2a6266ef	imulq	%rdi, %rax
00007fff2a6266f3	addq	%r14, %rdx
00007fff2a6266f6	rolq	$0x2b, %rdx
00007fff2a6266fa	addq	%rdx, %r11
00007fff2a6266fd	addq	%rax, %rbx
00007fff2a626700	addq	%rcx, %r12
00007fff2a626703	movq	-0x8(%r9,%r15), %r8
00007fff2a626708	addq	-0x20(%r9,%r15), %rbx
00007fff2a62670d	addq	%rbx, %r12
00007fff2a626710	addq	%r8, %r12
00007fff2a626713	addq	%rbx, %rsi
00007fff2a626716	addq	-0x40(%rbp), %rsi
00007fff2a62671a	movq	%rsi, %rdx
00007fff2a62671d	addq	%r8, %rdx
00007fff2a626720	rolq	$0x14, %rsi
00007fff2a626724	addq	%rsi, %rbx
00007fff2a626727	rolq	$0x2b, %r12
00007fff2a62672b	addq	%r12, %rbx
00007fff2a62672e	cmpq	%r15, -0x38(%rbp)
00007fff2a626732	je	0x7fff2a626745
00007fff2a626734	movq	(%r9,%r15), %rsi
00007fff2a626738	movq	%rsi, -0x30(%rbp)
00007fff2a62673c	addq	$0x40, %r15
00007fff2a626740	jmp	0x7fff2a626673
00007fff2a626745	xorq	%rdx, %r10
00007fff2a626748	movabsq	$-0x622015f714c7d297, %rdi      ## imm = 0x9DDFEA08EB382D69
00007fff2a626752	imulq	%rdi, %r10
00007fff2a626756	movq	%r10, %rsi
00007fff2a626759	shrq	$0x2f, %rsi
00007fff2a62675d	xorq	%rdx, %r10
00007fff2a626760	xorq	%rsi, %r10
00007fff2a626763	imulq	%rdi, %r10
00007fff2a626767	movq	%r10, %rsi
00007fff2a62676a	shrq	$0x2f, %rsi
00007fff2a62676e	xorq	%r10, %rsi
00007fff2a626771	imulq	%rdi, %rsi
00007fff2a626775	movq	%rcx, %rdx
00007fff2a626778	shrq	$0x2f, %rdx
00007fff2a62677c	xorq	%rcx, %rdx
00007fff2a62677f	movabsq	$-0x4b6d499041670d8d, %rcx      ## imm = 0xB492B66FBE98F273
00007fff2a626789	imulq	%rcx, %rdx
00007fff2a62678d	addq	%r14, %rdx
00007fff2a626790	addq	%rsi, %rdx
00007fff2a626793	xorq	%rbx, %r11
00007fff2a626796	imulq	%rdi, %r11
00007fff2a62679a	movq	%r11, %rcx
00007fff2a62679d	shrq	$0x2f, %rcx
00007fff2a6267a1	xorq	%rbx, %r11
00007fff2a6267a4	xorq	%rcx, %r11
00007fff2a6267a7	imulq	%rdi, %r11
00007fff2a6267ab	movq	%r11, %rcx
00007fff2a6267ae	shrq	$0x2f, %rcx
00007fff2a6267b2	xorq	%r11, %rcx
00007fff2a6267b5	imulq	%rdi, %rcx
00007fff2a6267b9	addq	%rax, %rcx
00007fff2a6267bc	xorq	%rcx, %rdx
00007fff2a6267bf	imulq	%rdi, %rdx
00007fff2a6267c3	movq	%rdx, %rax
00007fff2a6267c6	shrq	$0x2f, %rax
00007fff2a6267ca	xorq	%rcx, %rdx
00007fff2a6267cd	xorq	%rax, %rdx
00007fff2a6267d0	imulq	%rdi, %rdx
00007fff2a6267d4	movq	%rdx, %rax
00007fff2a6267d7	shrq	$0x2f, %rax
00007fff2a6267db	xorq	%rdx, %rax
00007fff2a6267de	imulq	%rdi, %rax
00007fff2a6267e2	popq	%rbx
00007fff2a6267e3	popq	%r12
00007fff2a6267e5	popq	%r13
00007fff2a6267e7	popq	%r14
00007fff2a6267e9	popq	%r15
00007fff2a6267eb	popq	%rbp
00007fff2a6267ec	retq
00007fff2a6267ed	cmpq	$0x4, %rsi
00007fff2a6267f1	jb	0x7fff2a626831
00007fff2a6267f3	movl	(%rdi), %ecx
00007fff2a6267f5	movl	-0x4(%rdi,%rsi), %eax
00007fff2a6267f9	shll	$0x3, %ecx
00007fff2a6267fc	addq	%rsi, %rcx
00007fff2a6267ff	xorq	%rax, %rcx
00007fff2a626802	movabsq	$-0x622015f714c7d297, %rdx      ## imm = 0x9DDFEA08EB382D69
00007fff2a62680c	imulq	%rdx, %rcx
00007fff2a626810	movq	%rcx, %rsi
00007fff2a626813	shrq	$0x2f, %rsi
00007fff2a626817	xorq	%rax, %rcx
00007fff2a62681a	xorq	%rsi, %rcx
00007fff2a62681d	imulq	%rdx, %rcx
00007fff2a626821	movq	%rcx, %rax
00007fff2a626824	shrq	$0x2f, %rax
00007fff2a626828	xorq	%rcx, %rax
00007fff2a62682b	imulq	%rdx, %rax
00007fff2a62682f	jmp	0x7fff2a6267e2
00007fff2a626831	movabsq	$-0x651e95c4d06fbfb1, %rax      ## imm = 0x9AE16A3B2F90404F
00007fff2a62683b	testq	%rsi, %rsi
00007fff2a62683e	je	0x7fff2a6267e2
00007fff2a626840	movzbl	(%rdi), %ecx
00007fff2a626843	movq	%rsi, %rdx
00007fff2a626846	shrq	%rdx
00007fff2a626849	movzbl	(%rdi,%rdx), %edx
00007fff2a62684d	movzbl	-0x1(%rsi,%rdi), %edi
00007fff2a626852	shlq	$0x8, %rdx
00007fff2a626856	orq	%rcx, %rdx
00007fff2a626859	leaq	(%rsi,%rdi,4), %rcx
00007fff2a62685d	imulq	%rax, %rdx
00007fff2a626861	movabsq	$-0x36b62838af619aa9, %rsi      ## imm = 0xC949D7C7509E6557
00007fff2a62686b	imulq	%rcx, %rsi
00007fff2a62686f	xorq	%rdx, %rsi
00007fff2a626872	movq	%rsi, %rcx
00007fff2a626875	shrq	$0x2f, %rcx
00007fff2a626879	xorq	%rsi, %rcx
00007fff2a62687c	jmp	0x7fff2a626589
00007fff2a626881	nop
00007fff2a626882	pushq	%rbp
00007fff2a626883	movq	%rsp, %rbp
00007fff2a626886	pushq	%r15
00007fff2a626888	pushq	%r14
00007fff2a62688a	pushq	%r13
00007fff2a62688c	pushq	%r12
00007fff2a62688e	pushq	%rbx
00007fff2a62688f	subq	$0x48, %rsp
00007fff2a626893	movq	%rdi, %r12
00007fff2a626896	testq	%rsi, %rsi
00007fff2a626899	je	0x7fff2a62696b
00007fff2a62689f	movq	%rsi, %r14
00007fff2a6268a2	movq	%rsi, %rax
00007fff2a6268a5	shrq	$0x3d, %rax
00007fff2a6268a9	jne	0x7fff2a626b23
00007fff2a6268af	leaq	(,%r14,8), %rdi
00007fff2a6268b7	callq	0x7fff2a62ace2                  ## symbol stub for: __Znwm
00007fff2a6268bc	movq	(%r12), %rdi
00007fff2a6268c0	movq	%rax, (%r12)
00007fff2a6268c4	testq	%rdi, %rdi
00007fff2a6268c7	je	0x7fff2a6268ce
00007fff2a6268c9	callq	0x7fff2a62acdc                  ## symbol stub for: __ZdlPv
00007fff2a6268ce	movq	%r14, 0x8(%r12)
00007fff2a6268d3	xorl	%eax, %eax
00007fff2a6268d5	movq	(%r12), %rcx
00007fff2a6268d9	movq	$0x0, (%rcx,%rax,8)
00007fff2a6268e1	incq	%rax
00007fff2a6268e4	cmpq	%r14, %rax
00007fff2a6268e7	jb	0x7fff2a6268d5
00007fff2a6268e9	movq	0x10(%r12), %r8
00007fff2a6268ee	testq	%r8, %r8
00007fff2a6268f1	je	0x7fff2a626b14
00007fff2a6268f7	leaq	0x10(%r12), %rcx
00007fff2a6268fc	movq	0x8(%r8), %r9
00007fff2a626900	movq	%r14, %rax
00007fff2a626903	shrq	%rax
00007fff2a626906	movabsq	$0x5555555555555555, %rdx       ## imm = 0x5555555555555555
00007fff2a626910	andq	%rax, %rdx
00007fff2a626913	movq	%r14, %rax
00007fff2a626916	subq	%rdx, %rax
00007fff2a626919	movabsq	$0x3333333333333333, %rdx       ## imm = 0x3333333333333333
00007fff2a626923	movq	%rax, %rsi
00007fff2a626926	andq	%rdx, %rsi
00007fff2a626929	shrq	$0x2, %rax
00007fff2a62692d	andq	%rdx, %rax
00007fff2a626930	addq	%rsi, %rax
00007fff2a626933	movq	%rax, %rdx
00007fff2a626936	shrq	$0x4, %rdx
00007fff2a62693a	addq	%rax, %rdx
00007fff2a62693d	movabsq	$0xf0f0f0f0f0f0f0f, %rax        ## imm = 0xF0F0F0F0F0F0F0F
00007fff2a626947	andq	%rdx, %rax
00007fff2a62694a	movabsq	$0x101010101010101, %r10        ## imm = 0x101010101010101
00007fff2a626954	imulq	%rax, %r10
00007fff2a626958	shrq	$0x38, %r10
00007fff2a62695c	cmpq	$0x1, %r10
00007fff2a626960	ja	0x7fff2a62698f
00007fff2a626962	leaq	-0x1(%r14), %rax
00007fff2a626966	andq	%rax, %r9
00007fff2a626969	jmp	0x7fff2a62699f
00007fff2a62696b	movq	(%r12), %rdi
00007fff2a62696f	movq	$0x0, (%r12)
00007fff2a626977	testq	%rdi, %rdi
00007fff2a62697a	je	0x7fff2a626981
00007fff2a62697c	callq	0x7fff2a62acdc                  ## symbol stub for: __ZdlPv
00007fff2a626981	movq	$0x0, 0x8(%r12)
00007fff2a62698a	jmp	0x7fff2a626b14
00007fff2a62698f	cmpq	%r14, %r9
00007fff2a626992	jb	0x7fff2a62699f
00007fff2a626994	movq	%r9, %rax
00007fff2a626997	xorl	%edx, %edx
00007fff2a626999	divq	%r14
00007fff2a62699c	movq	%rdx, %r9
00007fff2a62699f	movq	(%r12), %rax
00007fff2a6269a3	movq	%rcx, (%rax,%r9,8)
00007fff2a6269a7	movq	(%r8), %r15
00007fff2a6269aa	testq	%r15, %r15
00007fff2a6269ad	je	0x7fff2a626b14
00007fff2a6269b3	leaq	-0x1(%r14), %rax
00007fff2a6269b7	movq	%rax, -0x68(%rbp)
00007fff2a6269bb	movq	%r12, -0x40(%rbp)
00007fff2a6269bf	movq	%r14, -0x38(%rbp)
00007fff2a6269c3	movq	%r10, -0x30(%rbp)
00007fff2a6269c7	movq	0x8(%r15), %rbx
00007fff2a6269cb	cmpl	$0x1, %r10d
00007fff2a6269cf	ja	0x7fff2a6269d7
00007fff2a6269d1	andq	-0x68(%rbp), %rbx
00007fff2a6269d5	jmp	0x7fff2a6269e7
00007fff2a6269d7	cmpq	%r14, %rbx
00007fff2a6269da	jb	0x7fff2a6269e7
00007fff2a6269dc	movq	%rbx, %rax
00007fff2a6269df	xorl	%edx, %edx
00007fff2a6269e1	divq	%r14
00007fff2a6269e4	movq	%rdx, %rbx
00007fff2a6269e7	cmpq	%r9, %rbx
00007fff2a6269ea	jne	0x7fff2a6269f4
00007fff2a6269ec	movq	%r15, %r8
00007fff2a6269ef	jmp	0x7fff2a626b08
00007fff2a6269f4	movq	(%r12), %rax
00007fff2a6269f8	cmpq	$0x0, (%rax,%rbx,8)
00007fff2a6269fd	je	0x7fff2a626afe
00007fff2a626a03	movq	(%r15), %rax
00007fff2a626a06	movq	%r15, %r14
00007fff2a626a09	testq	%rax, %rax
00007fff2a626a0c	je	0x7fff2a626ad5
00007fff2a626a12	movzbl	0x10(%r15), %r11d
00007fff2a626a17	movq	%r11, %r13
00007fff2a626a1a	shrq	%r13
00007fff2a626a1d	movq	%r13, %rdx
00007fff2a626a20	testb	$0x1, %r11b
00007fff2a626a24	je	0x7fff2a626a2a
00007fff2a626a26	movq	0x18(%r15), %rdx
00007fff2a626a2a	leaq	0x11(%r15), %rcx
00007fff2a626a2e	movq	%rcx, -0x70(%rbp)
00007fff2a626a32	movq	%r15, %r12
00007fff2a626a35	movq	%r8, -0x60(%rbp)
00007fff2a626a39	movq	%r9, -0x58(%rbp)
00007fff2a626a3d	movq	%r11, -0x50(%rbp)
00007fff2a626a41	movq	%rdx, -0x48(%rbp)
00007fff2a626a45	movq	%r12, %r14
00007fff2a626a48	movq	%rax, %r12
00007fff2a626a4b	movzbl	0x10(%rax), %eax
00007fff2a626a4f	testb	$0x1, %al
00007fff2a626a51	je	0x7fff2a626a5a
00007fff2a626a53	movq	0x18(%r12), %rcx
00007fff2a626a58	jmp	0x7fff2a626a60
00007fff2a626a5a	movq	%rax, %rcx
00007fff2a626a5d	shrq	%rcx
00007fff2a626a60	cmpq	%rcx, %rdx
00007fff2a626a63	jne	0x7fff2a626ad5
00007fff2a626a65	testb	$0x1, %al
00007fff2a626a67	je	0x7fff2a626a70
00007fff2a626a69	movq	0x20(%r12), %rsi
00007fff2a626a6e	jmp	0x7fff2a626a78
00007fff2a626a70	leaq	0x10(%r12), %rsi
00007fff2a626a75	incq	%rsi
00007fff2a626a78	movq	-0x70(%rbp), %rdi
00007fff2a626a7c	testb	$0x1, %r11b
00007fff2a626a80	je	0x7fff2a626a86
00007fff2a626a82	movq	0x20(%r15), %rdi
00007fff2a626a86	jne	0x7fff2a626aa3
00007fff2a626a88	testq	%rdx, %rdx
00007fff2a626a8b	je	0x7fff2a626ac5
00007fff2a626a8d	xorl	%eax, %eax
00007fff2a626a8f	movb	0x11(%r15,%rax), %cl
00007fff2a626a94	cmpb	(%rsi,%rax), %cl
00007fff2a626a97	jne	0x7fff2a626ad5
00007fff2a626a99	incq	%rax
00007fff2a626a9c	cmpq	%rax, %r13
00007fff2a626a9f	jne	0x7fff2a626a8f
00007fff2a626aa1	jmp	0x7fff2a626ac5
00007fff2a626aa3	testq	%rdx, %rdx
00007fff2a626aa6	je	0x7fff2a626ac5
00007fff2a626aa8	callq	0x7fff2a62ad6c                  ## symbol stub for: _memcmp
00007fff2a626aad	movq	-0x48(%rbp), %rdx
00007fff2a626ab1	movq	-0x50(%rbp), %r11
00007fff2a626ab5	movq	-0x30(%rbp), %r10
00007fff2a626ab9	movq	-0x58(%rbp), %r9
00007fff2a626abd	movq	-0x60(%rbp), %r8
00007fff2a626ac1	testl	%eax, %eax
00007fff2a626ac3	jne	0x7fff2a626ad5
00007fff2a626ac5	movq	(%r12), %rax
00007fff2a626ac9	movq	%r12, %r14
00007fff2a626acc	testq	%rax, %rax
00007fff2a626acf	jne	0x7fff2a626a45
00007fff2a626ad5	movq	(%r14), %rax
00007fff2a626ad8	movq	%rax, (%r8)
00007fff2a626adb	movq	-0x40(%rbp), %r12
00007fff2a626adf	movq	(%r12), %rax
00007fff2a626ae3	movq	(%rax,%rbx,8), %rax
00007fff2a626ae7	movq	(%rax), %rax
00007fff2a626aea	movq	%rax, (%r14)
00007fff2a626aed	movq	(%r12), %rax
00007fff2a626af1	movq	(%rax,%rbx,8), %rax
00007fff2a626af5	movq	%r15, (%rax)
00007fff2a626af8	movq	-0x38(%rbp), %r14
00007fff2a626afc	jmp	0x7fff2a626b08
00007fff2a626afe	movq	%r8, (%rax,%rbx,8)
00007fff2a626b02	movq	%r15, %r8
00007fff2a626b05	movq	%rbx, %r9
00007fff2a626b08	movq	(%r8), %r15
00007fff2a626b0b	testq	%r15, %r15
00007fff2a626b0e	jne	0x7fff2a6269c7
00007fff2a626b14	addq	$0x48, %rsp
00007fff2a626b18	popq	%rbx
00007fff2a626b19	popq	%r12
00007fff2a626b1b	popq	%r13
00007fff2a626b1d	popq	%r14
00007fff2a626b1f	popq	%r15
00007fff2a626b21	popq	%rbp
00007fff2a626b22	retq
00007fff2a626b23	callq	0x7fff2a62ad18                  ## symbol stub for: _abort
00007fff2a626b28	pushq	%rbp
00007fff2a626b29	movq	%rsp, %rbp
00007fff2a626b2c	pushq	%r15
00007fff2a626b2e	pushq	%r14
00007fff2a626b30	pushq	%r13
00007fff2a626b32	pushq	%r12
00007fff2a626b34	pushq	%rbx
00007fff2a626b35	pushq	%rax
00007fff2a626b36	cmpb	$0x0, 0x4(%rdi)
00007fff2a626b3a	je	0x7fff2a626bde
00007fff2a626b40	movq	%rsi, %r14
00007fff2a626b43	movq	%rdi, %r12
00007fff2a626b46	movq	0x28(%rdi), %rcx
00007fff2a626b4a	movq	0x38(%rdi), %rax
00007fff2a626b4e	movl	0x58(%rax), %r13d
00007fff2a626b52	incl	%r13d
00007fff2a626b55	leaq	-0x30(%rbp), %r15
00007fff2a626b59	decl	%r13d
00007fff2a626b5c	je	0x7fff2a626bb3
00007fff2a626b5e	movq	%rcx, %rbx
00007fff2a626b61	addq	$0x28, %rbx
00007fff2a626b65	jb	0x7fff2a626bc2
00007fff2a626b67	movq	0x30(%r12), %rax
00007fff2a626b6c	cmpq	%rax, %rbx
00007fff2a626b6f	ja	0x7fff2a626bc2
00007fff2a626b71	movb	(%rcx), %dl
00007fff2a626b73	cmpb	$0x1, %dl
00007fff2a626b76	je	0x7fff2a626b96
00007fff2a626b78	testb	%dl, %dl
00007fff2a626b7a	jne	0x7fff2a626bd0
00007fff2a626b7c	movl	0x1c(%rcx), %edx
00007fff2a626b7f	addq	%rdx, %rbx
00007fff2a626b82	jb	0x7fff2a626bc2
00007fff2a626b84	cmpq	%rax, %rbx
00007fff2a626b87	ja	0x7fff2a626bc2
00007fff2a626b89	movl	0x24(%rcx), %edx
00007fff2a626b8c	addq	%rdx, %rbx
00007fff2a626b8f	jb	0x7fff2a626bc2
00007fff2a626b91	cmpq	%rax, %rbx
00007fff2a626b94	ja	0x7fff2a626bc2
00007fff2a626b96	movq	%rcx, -0x30(%rbp)
00007fff2a626b9a	movq	0x20(%r14), %rdi
00007fff2a626b9e	testq	%rdi, %rdi
00007fff2a626ba1	je	0x7fff2a626bd9
00007fff2a626ba3	movq	(%rdi), %rax
00007fff2a626ba6	movq	%r15, %rsi
00007fff2a626ba9	callq	*0x30(%rax)
00007fff2a626bac	movq	%rbx, %rcx
00007fff2a626baf	testb	%al, %al
00007fff2a626bb1	jne	0x7fff2a626b59
00007fff2a626bb3	addq	$0x8, %rsp
00007fff2a626bb7	popq	%rbx
00007fff2a626bb8	popq	%r12
00007fff2a626bba	popq	%r13
00007fff2a626bbc	popq	%r14
00007fff2a626bbe	popq	%r15
00007fff2a626bc0	popq	%rbp
00007fff2a626bc1	retq
00007fff2a626bc2	leaq	0x4601(%rip), %rdi              ## literal pool for: "invalid shared cache AOT metadata"
00007fff2a626bc9	xorl	%eax, %eax
00007fff2a626bcb	callq	0x7fff2a628bb4
00007fff2a626bd0	leaq	0x4615(%rip), %rdi              ## literal pool for: "invalid fragment type"
00007fff2a626bd7	jmp	0x7fff2a626bc9
00007fff2a626bd9	callq	0x7fff2a626be7
00007fff2a626bde	leaq	0x45c0(%rip), %rdi              ## literal pool for: "shared cache info is not initialized"
00007fff2a626be5	jmp	0x7fff2a626bc9
00007fff2a626be7	pushq	%rbp
00007fff2a626be8	movq	%rsp, %rbp
00007fff2a626beb	callq	0x7fff2a62ad18                  ## symbol stub for: _abort
00007fff2a626bf0	pushq	%rbp
00007fff2a626bf1	movq	%rsp, %rbp
00007fff2a626bf4	pushq	%r15
00007fff2a626bf6	pushq	%r14
00007fff2a626bf8	pushq	%rbx
00007fff2a626bf9	pushq	%rax
00007fff2a626bfa	movq	%rdi, %r14
00007fff2a626bfd	movq	0x48(%rdi), %rbx
00007fff2a626c01	movq	0x50(%rdi), %r15
00007fff2a626c05	cmpq	%r15, %rbx
00007fff2a626c08	je	0x7fff2a626c1c
00007fff2a626c0a	movq	(%rbx), %rdi
00007fff2a626c0d	movq	0x8(%rbx), %rsi
00007fff2a626c11	callq	0x7fff2a62ad84                  ## symbol stub for: _munmap
00007fff2a626c16	addq	$0x10, %rbx
00007fff2a626c1a	jmp	0x7fff2a626c05
00007fff2a626c1c	movq	0x38(%r14), %rdi
00007fff2a626c20	movq	0x40(%r14), %rsi
00007fff2a626c24	callq	0x7fff2a62ad84                  ## symbol stub for: _munmap
00007fff2a626c29	movq	0x5d221598(%rip), %rax          ## literal pool symbol address: _mach_task_self_
00007fff2a626c30	movl	(%rax), %edi
00007fff2a626c32	movl	(%r14), %esi
00007fff2a626c35	callq	0x7fff2a62ad54                  ## symbol stub for: _mach_port_deallocate
00007fff2a626c3a	movq	0x70(%r14), %rbx
00007fff2a626c3e	testq	%rbx, %rbx
00007fff2a626c41	je	0x7fff2a626c77
00007fff2a626c43	movq	(%rbx), %r15
00007fff2a626c46	movq	0x28(%rbx), %rdi
00007fff2a626c4a	testq	%rdi, %rdi
00007fff2a626c4d	je	0x7fff2a626c58
00007fff2a626c4f	movq	%rdi, 0x30(%rbx)
00007fff2a626c53	callq	0x7fff2a62acdc                  ## symbol stub for: __ZdlPv
00007fff2a626c58	testb	$0x1, 0x10(%rbx)
00007fff2a626c5c	je	0x7fff2a626c67
00007fff2a626c5e	movq	0x20(%rbx), %rdi
00007fff2a626c62	callq	0x7fff2a62acdc                  ## symbol stub for: __ZdlPv
00007fff2a626c67	movq	%rbx, %rdi
00007fff2a626c6a	callq	0x7fff2a62acdc                  ## symbol stub for: __ZdlPv
00007fff2a626c6f	movq	%r15, %rbx
00007fff2a626c72	testq	%r15, %r15
00007fff2a626c75	jne	0x7fff2a626c43
00007fff2a626c77	movq	0x60(%r14), %rdi
00007fff2a626c7b	movq	$0x0, 0x60(%r14)
00007fff2a626c83	testq	%rdi, %rdi
00007fff2a626c86	je	0x7fff2a626c8d
00007fff2a626c88	callq	0x7fff2a62acdc                  ## symbol stub for: __ZdlPv
00007fff2a626c8d	movq	0x48(%r14), %rdi
00007fff2a626c91	testq	%rdi, %rdi
00007fff2a626c94	je	0x7fff2a626ca9
00007fff2a626c96	movq	%rdi, 0x50(%r14)
00007fff2a626c9a	addq	$0x8, %rsp
00007fff2a626c9e	popq	%rbx
00007fff2a626c9f	popq	%r14
00007fff2a626ca1	popq	%r15
00007fff2a626ca3	popq	%rbp
00007fff2a626ca4	jmp	0x7fff2a62acdc                  ## symbol stub for: __ZdlPv
00007fff2a626ca9	addq	$0x8, %rsp
00007fff2a626cad	popq	%rbx
00007fff2a626cae	popq	%r14
00007fff2a626cb0	popq	%r15
00007fff2a626cb2	popq	%rbp
00007fff2a626cb3	retq
00007fff2a626cb4	pushq	%rbp
00007fff2a626cb5	movq	%rsp, %rbp
00007fff2a626cb8	pushq	%r15
00007fff2a626cba	pushq	%r14
00007fff2a626cbc	pushq	%r13
00007fff2a626cbe	pushq	%r12
00007fff2a626cc0	pushq	%rbx
00007fff2a626cc1	subq	$0x38, %rsp
00007fff2a626cc5	xorl	%eax, %eax
00007fff2a626cc7	testq	%rdx, %rdx
00007fff2a626cca	je	0x7fff2a626e69
00007fff2a626cd0	movq	%r8, %r13
00007fff2a626cd3	testq	%r8, %r8
00007fff2a626cd6	je	0x7fff2a626e69
00007fff2a626cdc	movq	%rdi, %rbx
00007fff2a626cdf	cmpb	$0x0, 0x4(%rdi)
00007fff2a626ce3	je	0x7fff2a626cec
00007fff2a626ce5	xorl	%eax, %eax
00007fff2a626ce7	jmp	0x7fff2a626e69
00007fff2a626cec	movq	%rdx, %r12
00007fff2a626cef	movq	%rsi, -0x40(%rbp)
00007fff2a626cf3	movq	%rcx, -0x48(%rbp)
00007fff2a626cf7	leaq	0x4504(%rip), %rdi              ## literal pool for: "/System/Library/dyld/aot_shared_cache"
00007fff2a626cfe	movl	$0x100, %esi                    ## imm = 0x100
00007fff2a626d03	xorl	%eax, %eax
00007fff2a626d05	callq	0x7fff2a62ad8a                  ## symbol stub for: _open
00007fff2a626d0a	cmpl	$-0x1, %eax
00007fff2a626d0d	je	0x7fff2a626d49
00007fff2a626d0f	movl	%eax, %r15d
00007fff2a626d12	leaq	-0x60(%rbp), %r14
00007fff2a626d16	movq	%r14, %rdi
00007fff2a626d19	movl	%eax, %esi
00007fff2a626d1b	movq	%r13, %rdx
00007fff2a626d1e	callq	0x7fff2a626e8f
00007fff2a626d23	movq	%r14, %rcx
00007fff2a626d26	movq	(%r14), %r14
00007fff2a626d29	movq	0x8(%rcx), %rax
00007fff2a626d2d	movq	%rax, -0x38(%rbp)
00007fff2a626d31	movb	0x10(%rcx), %al
00007fff2a626d34	movb	%al, -0x29(%rbp)
00007fff2a626d37	movl	%r15d, %edi
00007fff2a626d3a	callq	0x7fff2a62ad24                  ## symbol stub for: _close
00007fff2a626d3f	cmpb	$0x0, -0x29(%rbp)
00007fff2a626d43	jne	0x7fff2a626dff
00007fff2a626d49	leaq	0x44d8(%rip), %rdi              ## literal pool for: "/System/Library/dyld/aot_shared_cache.t8027"
00007fff2a626d50	movl	$0x100, %esi                    ## imm = 0x100
00007fff2a626d55	xorl	%eax, %eax
00007fff2a626d57	callq	0x7fff2a62ad8a                  ## symbol stub for: _open
00007fff2a626d5c	cmpl	$-0x1, %eax
00007fff2a626d5f	je	0x7fff2a626d97
00007fff2a626d61	movl	%eax, %r15d
00007fff2a626d64	leaq	-0x60(%rbp), %r14
00007fff2a626d68	movq	%r14, %rdi
00007fff2a626d6b	movl	%eax, %esi
00007fff2a626d6d	movq	%r13, %rdx
00007fff2a626d70	callq	0x7fff2a626e8f
00007fff2a626d75	movq	%r14, %rcx
00007fff2a626d78	movq	(%r14), %r14
00007fff2a626d7b	movq	0x8(%rcx), %rax
00007fff2a626d7f	movq	%rax, -0x38(%rbp)
00007fff2a626d83	movb	0x10(%rcx), %al
00007fff2a626d86	movb	%al, -0x29(%rbp)
00007fff2a626d89	movl	%r15d, %edi
00007fff2a626d8c	callq	0x7fff2a62ad24                  ## symbol stub for: _close
00007fff2a626d91	cmpb	$0x0, -0x29(%rbp)
00007fff2a626d95	jne	0x7fff2a626dff
00007fff2a626d97	movl	(%rbx), %edi
00007fff2a626d99	testl	%edi, %edi
00007fff2a626d9b	je	0x7fff2a626e78
00007fff2a626da1	leaq	-0x60(%rbp), %rcx
00007fff2a626da5	movl	$0xffffffff, (%rcx)             ## imm = 0xFFFFFFFF
00007fff2a626dab	movl	$0x10, %edx
00007fff2a626db0	movq	%r12, %rsi
00007fff2a626db3	callq	0x7fff2a624f70
00007fff2a626db8	testl	%eax, %eax
00007fff2a626dba	jne	0x7fff2a626e78
00007fff2a626dc0	movl	-0x60(%rbp), %r15d
00007fff2a626dc4	cmpl	$-0x1, %r15d
00007fff2a626dc8	je	0x7fff2a626e78
00007fff2a626dce	leaq	-0x60(%rbp), %r14
00007fff2a626dd2	movq	%r14, %rdi
00007fff2a626dd5	movl	%r15d, %esi
00007fff2a626dd8	movq	%r13, %rdx
00007fff2a626ddb	callq	0x7fff2a626e8f
00007fff2a626de0	movq	%r14, %rcx
00007fff2a626de3	movq	(%r14), %r14
00007fff2a626de6	movq	0x8(%rcx), %rax
00007fff2a626dea	movq	%rax, -0x38(%rbp)
00007fff2a626dee	movb	0x10(%rcx), %r13b
00007fff2a626df2	movl	%r15d, %edi
00007fff2a626df5	callq	0x7fff2a62ad24                  ## symbol stub for: _close
00007fff2a626dfa	testb	%r13b, %r13b
00007fff2a626dfd	je	0x7fff2a626e78
00007fff2a626dff	leaq	0x18(%r14), %rdi
00007fff2a626e03	movq	%r12, %rsi
00007fff2a626e06	callq	0x7fff2a62adde                  ## symbol stub for: _uuid_compare
00007fff2a626e0b	testl	%eax, %eax
00007fff2a626e0d	jne	0x7fff2a626e81
00007fff2a626e0f	movq	-0x40(%rbp), %rax
00007fff2a626e13	movq	%rax, 0x8(%rbx)
00007fff2a626e17	movq	-0x48(%rbp), %rsi
00007fff2a626e1b	movq	%rsi, 0x10(%rbx)
00007fff2a626e1f	movq	%r14, 0x38(%rbx)
00007fff2a626e23	movq	-0x38(%rbp), %rax
00007fff2a626e27	movq	%rax, 0x40(%rbx)
00007fff2a626e2b	movl	0x68(%r14), %eax
00007fff2a626e2f	addq	0xa0(%r14), %rsi
00007fff2a626e36	movq	0xa8(%r14), %rcx
00007fff2a626e3d	addq	%rsi, %rcx
00007fff2a626e40	movq	0x70(%r14), %rdx
00007fff2a626e44	addq	%r14, %rdx
00007fff2a626e47	movq	%rsi, 0x18(%rbx)
00007fff2a626e4b	movq	%rcx, 0x20(%rbx)
00007fff2a626e4f	movl	0x5c(%r14), %ecx
00007fff2a626e53	addq	%rcx, %rdx
00007fff2a626e56	subl	%ecx, %eax
00007fff2a626e58	addq	%rdx, %rax
00007fff2a626e5b	movq	%rdx, 0x28(%rbx)
00007fff2a626e5f	movq	%rax, 0x30(%rbx)
00007fff2a626e63	movb	$0x1, 0x4(%rbx)
00007fff2a626e67	movb	$0x1, %al
00007fff2a626e69	addq	$0x38, %rsp
00007fff2a626e6d	popq	%rbx
00007fff2a626e6e	popq	%r12
00007fff2a626e70	popq	%r13
00007fff2a626e72	popq	%r14
00007fff2a626e74	popq	%r15
00007fff2a626e76	popq	%rbp
00007fff2a626e77	retq
00007fff2a626e78	leaq	0x43d5(%rip), %rdi              ## literal pool for: "aot cache uuid does not match either B&I or local caches on disk"
00007fff2a626e7f	jmp	0x7fff2a626e88
00007fff2a626e81	leaq	0x440d(%rip), %rdi              ## literal pool for: "x86 cache uuid arg does not match aot cache x86 uuid"
00007fff2a626e88	xorl	%eax, %eax
00007fff2a626e8a	callq	0x7fff2a628bb4
00007fff2a626e8f	pushq	%rbp
00007fff2a626e90	movq	%rsp, %rbp
00007fff2a626e93	pushq	%r15
00007fff2a626e95	pushq	%r14
00007fff2a626e97	pushq	%r12
00007fff2a626e99	pushq	%rbx
00007fff2a626e9a	subq	$0x90, %rsp
00007fff2a626ea1	movq	%rdx, %r15
00007fff2a626ea4	movl	%esi, %ebx
00007fff2a626ea6	movq	%rdi, %r14
00007fff2a626ea9	leaq	-0xb0(%rbp), %r12
00007fff2a626eb0	movl	%esi, %edi
00007fff2a626eb2	movq	%r12, %rsi
00007fff2a626eb5	callq	0x7fff2a62ad3c                  ## symbol stub for: _fstat$INODE64
00007fff2a626eba	movl	0x60(%r12), %r12d
00007fff2a626ebf	xorl	%edi, %edi
00007fff2a626ec1	movq	%r12, %rsi
00007fff2a626ec4	movl	$0x1, %edx
00007fff2a626ec9	movl	$0x2, %ecx
00007fff2a626ece	movl	%ebx, %r8d
00007fff2a626ed1	xorl	%r9d, %r9d
00007fff2a626ed4	callq	0x7fff2a62ad7e                  ## symbol stub for: _mmap
00007fff2a626ed9	cmpq	$-0x1, %rax
00007fff2a626edd	je	0x7fff2a626f00
00007fff2a626edf	movq	%rax, %rbx
00007fff2a626ee2	movq	%rax, %rdi
00007fff2a626ee5	addq	$0x8, %rdi
00007fff2a626ee9	movq	%r15, %rsi
00007fff2a626eec	callq	0x7fff2a62adde                  ## symbol stub for: _uuid_compare
00007fff2a626ef1	testl	%eax, %eax
00007fff2a626ef3	je	0x7fff2a626f08
00007fff2a626ef5	movq	%rbx, %rdi
00007fff2a626ef8	movq	%r12, %rsi
00007fff2a626efb	callq	0x7fff2a62ad84                  ## symbol stub for: _munmap
00007fff2a626f00	movb	$0x0, (%r14)
00007fff2a626f04	xorl	%eax, %eax
00007fff2a626f06	jmp	0x7fff2a626f11
00007fff2a626f08	movq	%rbx, (%r14)
00007fff2a626f0b	movq	%r12, 0x8(%r14)
00007fff2a626f0f	movb	$0x1, %al
00007fff2a626f11	movb	%al, 0x10(%r14)
00007fff2a626f15	addq	$0x90, %rsp
00007fff2a626f1c	popq	%rbx
00007fff2a626f1d	popq	%r12
00007fff2a626f1f	popq	%r14
00007fff2a626f21	popq	%r15
00007fff2a626f23	popq	%rbp
00007fff2a626f24	retq
00007fff2a626f25	nop
00007fff2a626f26	pushq	%rbp
00007fff2a626f27	movq	%rsp, %rbp
00007fff2a626f2a	popq	%rbp
00007fff2a626f2b	retq
00007fff2a626f2c	pushq	%rbp
00007fff2a626f2d	movq	%rsp, %rbp
00007fff2a626f30	popq	%rbp
00007fff2a626f31	jmp	0x7fff2a62acdc                  ## symbol stub for: __ZdlPv
00007fff2a626f36	pushq	%rbp
00007fff2a626f37	movq	%rsp, %rbp
00007fff2a626f3a	pushq	%rbx
00007fff2a626f3b	pushq	%rax
00007fff2a626f3c	movq	%rdi, %rbx
00007fff2a626f3f	movl	$0x20, %edi
00007fff2a626f44	callq	0x7fff2a62ace2                  ## symbol stub for: __Znwm
00007fff2a626f49	leaq	0x5d221460(%rip), %rcx
00007fff2a626f50	movq	%rcx, (%rax)
00007fff2a626f53	movq	0x8(%rbx), %rcx
00007fff2a626f57	movq	0x10(%rbx), %rdx
00007fff2a626f5b	movq	%rcx, 0x8(%rax)
00007fff2a626f5f	movq	%rdx, 0x10(%rax)
00007fff2a626f63	movq	0x18(%rbx), %rcx
00007fff2a626f67	movq	%rcx, 0x18(%rax)
00007fff2a626f6b	addq	$0x8, %rsp
00007fff2a626f6f	popq	%rbx
00007fff2a626f70	popq	%rbp
00007fff2a626f71	retq
00007fff2a626f72	pushq	%rbp
00007fff2a626f73	movq	%rsp, %rbp
00007fff2a626f76	leaq	0x5d221433(%rip), %rax
00007fff2a626f7d	movq	%rax, (%rsi)
00007fff2a626f80	movq	0x8(%rdi), %rax
00007fff2a626f84	movq	0x10(%rdi), %rcx
00007fff2a626f88	movq	%rax, 0x8(%rsi)
00007fff2a626f8c	movq	%rcx, 0x10(%rsi)
00007fff2a626f90	movq	0x18(%rdi), %rax
00007fff2a626f94	movq	%rax, 0x18(%rsi)
00007fff2a626f98	popq	%rbp
00007fff2a626f99	retq
00007fff2a626f9a	pushq	%rbp
00007fff2a626f9b	movq	%rsp, %rbp
00007fff2a626f9e	popq	%rbp
00007fff2a626f9f	retq
00007fff2a626fa0	pushq	%rbp
00007fff2a626fa1	movq	%rsp, %rbp
00007fff2a626fa4	popq	%rbp
00007fff2a626fa5	jmp	0x7fff2a62acdc                  ## symbol stub for: __ZdlPv
00007fff2a626faa	pushq	%rbp
00007fff2a626fab	movq	%rsp, %rbp
00007fff2a626fae	movq	(%rsi), %r8
00007fff2a626fb1	movl	0x10(%r8), %edx
00007fff2a626fb5	movq	0x8(%rdi), %rax
00007fff2a626fb9	addq	0x18(%rax), %rdx
00007fff2a626fbd	movq	0x10(%rdi), %rax
00007fff2a626fc1	movq	(%rax), %rsi
00007fff2a626fc4	movb	$0x1, %al
00007fff2a626fc6	cmpq	%rsi, %rdx
00007fff2a626fc9	ja	0x7fff2a626ffa
00007fff2a626fcb	movl	0x14(%r8), %ecx
00007fff2a626fcf	addq	%rcx, %rdx
00007fff2a626fd2	cmpq	%rsi, %rdx
00007fff2a626fd5	jbe	0x7fff2a626ffa
00007fff2a626fd7	movb	(%r8), %al
00007fff2a626fda	cmpb	$0x1, %al
00007fff2a626fdc	je	0x7fff2a626fee
00007fff2a626fde	testb	%al, %al
00007fff2a626fe0	jne	0x7fff2a626ff8
00007fff2a626fe2	movq	0x18(%rdi), %rax
00007fff2a626fe6	movl	$0x0, (%rax)
00007fff2a626fec	jmp	0x7fff2a626ff8
00007fff2a626fee	movq	0x18(%rdi), %rax
00007fff2a626ff2	movl	$0x1, (%rax)
00007fff2a626ff8	xorl	%eax, %eax
00007fff2a626ffa	popq	%rbp
00007fff2a626ffb	retq
00007fff2a626ffc	pushq	%rbp
00007fff2a626ffd	movq	%rsp, %rbp
00007fff2a627000	pushq	%r15
00007fff2a627002	pushq	%r14
00007fff2a627004	pushq	%rbx
00007fff2a627005	subq	$0x58, %rsp
00007fff2a627009	movq	0x5d2211b0(%rip), %rax          ## literal pool symbol address: ___stack_chk_guard
00007fff2a627010	movq	(%rax), %rax
00007fff2a627013	movq	%rax, -0x20(%rbp)
00007fff2a627017	movq	%rsi, -0x68(%rbp)
00007fff2a62701b	movq	%rdx, -0x60(%rbp)
00007fff2a62701f	cmpb	$0x0, 0x4(%rdi)
00007fff2a627023	je	0x7fff2a6270a0
00007fff2a627025	testq	%rdx, %rdx
00007fff2a627028	je	0x7fff2a6270a9
00007fff2a62702a	movq	%rdi, %r14
00007fff2a62702d	leaq	-0x51(%rbp), %r15
00007fff2a627031	movb	$0x0, (%r15)
00007fff2a627035	movl	$0x28, %edi
00007fff2a62703a	callq	0x7fff2a62ace2                  ## symbol stub for: __Znwm
00007fff2a62703f	movq	%rax, %rbx
00007fff2a627042	leaq	0x5d2213af(%rip), %rax
00007fff2a627049	movq	%rax, (%rbx)
00007fff2a62704c	movq	%r14, 0x8(%rbx)
00007fff2a627050	leaq	-0x68(%rbp), %rax
00007fff2a627054	movq	%rax, 0x10(%rbx)
00007fff2a627058	leaq	-0x60(%rbp), %rax
00007fff2a62705c	movq	%rax, 0x18(%rbx)
00007fff2a627060	movq	%r15, 0x20(%rbx)
00007fff2a627064	leaq	-0x50(%rbp), %rsi
00007fff2a627068	movq	%rbx, 0x20(%rsi)
00007fff2a62706c	movq	%r14, %rdi
00007fff2a62706f	callq	0x7fff2a626b28
00007fff2a627074	movq	(%rbx), %rax
00007fff2a627077	movq	%rbx, %rdi
00007fff2a62707a	callq	*0x28(%rax)
00007fff2a62707d	movb	(%r15), %al
00007fff2a627080	movq	0x5d221139(%rip), %rcx          ## literal pool symbol address: ___stack_chk_guard
00007fff2a627087	movq	(%rcx), %rcx
00007fff2a62708a	cmpq	-0x20(%rbp), %rcx
00007fff2a62708e	jne	0x7fff2a62709b
00007fff2a627090	addq	$0x58, %rsp
00007fff2a627094	popq	%rbx
00007fff2a627095	popq	%r14
00007fff2a627097	popq	%r15
00007fff2a627099	popq	%rbp
00007fff2a62709a	retq
00007fff2a62709b	callq	0x7fff2a62acee                  ## symbol stub for: ___stack_chk_fail
00007fff2a6270a0	leaq	0x40fe(%rip), %rdi              ## literal pool for: "shared cache info is not initialized"
00007fff2a6270a7	jmp	0x7fff2a6270b0
00007fff2a6270a9	leaq	0x421a(%rip), %rdi              ## literal pool for: "x86_address_result is nullptr"
00007fff2a6270b0	xorl	%eax, %eax
00007fff2a6270b2	callq	0x7fff2a628bb4
00007fff2a6270b7	nop
00007fff2a6270b8	pushq	%rbp
00007fff2a6270b9	movq	%rsp, %rbp
00007fff2a6270bc	popq	%rbp
00007fff2a6270bd	retq
00007fff2a6270be	pushq	%rbp
00007fff2a6270bf	movq	%rsp, %rbp
00007fff2a6270c2	popq	%rbp
00007fff2a6270c3	jmp	0x7fff2a62acdc                  ## symbol stub for: __ZdlPv
00007fff2a6270c8	pushq	%rbp
00007fff2a6270c9	movq	%rsp, %rbp
00007fff2a6270cc	pushq	%rbx
00007fff2a6270cd	pushq	%rax
00007fff2a6270ce	movq	%rdi, %rbx
00007fff2a6270d1	movl	$0x28, %edi
00007fff2a6270d6	callq	0x7fff2a62ace2                  ## symbol stub for: __Znwm
00007fff2a6270db	leaq	0x5d221316(%rip), %rcx
00007fff2a6270e2	movq	%rcx, (%rax)
00007fff2a6270e5	movq	0x8(%rbx), %rcx
00007fff2a6270e9	movq	0x10(%rbx), %rdx
00007fff2a6270ed	movq	%rcx, 0x8(%rax)
00007fff2a6270f1	movq	%rdx, 0x10(%rax)
00007fff2a6270f5	movq	0x18(%rbx), %rcx
00007fff2a6270f9	movq	%rcx, 0x18(%rax)
00007fff2a6270fd	movq	0x20(%rbx), %rcx
00007fff2a627101	movq	%rcx, 0x20(%rax)
00007fff2a627105	addq	$0x8, %rsp
00007fff2a627109	popq	%rbx
00007fff2a62710a	popq	%rbp
00007fff2a62710b	retq
00007fff2a62710c	pushq	%rbp
00007fff2a62710d	movq	%rsp, %rbp
00007fff2a627110	leaq	0x5d2212e1(%rip), %rax
00007fff2a627117	movq	%rax, (%rsi)
00007fff2a62711a	movq	0x8(%rdi), %rax
00007fff2a62711e	movq	0x10(%rdi), %rcx
00007fff2a627122	movq	%rax, 0x8(%rsi)
00007fff2a627126	movq	%rcx, 0x10(%rsi)
00007fff2a62712a	movq	0x18(%rdi), %rax
00007fff2a62712e	movq	%rax, 0x18(%rsi)
00007fff2a627132	movq	0x20(%rdi), %rax
00007fff2a627136	movq	%rax, 0x20(%rsi)
00007fff2a62713a	popq	%rbp
00007fff2a62713b	retq
00007fff2a62713c	pushq	%rbp
00007fff2a62713d	movq	%rsp, %rbp
00007fff2a627140	popq	%rbp
00007fff2a627141	retq
00007fff2a627142	pushq	%rbp
00007fff2a627143	movq	%rsp, %rbp
00007fff2a627146	popq	%rbp
00007fff2a627147	jmp	0x7fff2a62acdc                  ## symbol stub for: __ZdlPv
00007fff2a62714c	pushq	%rbp
00007fff2a62714d	movq	%rsp, %rbp
00007fff2a627150	pushq	%r15
00007fff2a627152	pushq	%r14
00007fff2a627154	pushq	%r13
00007fff2a627156	pushq	%r12
00007fff2a627158	pushq	%rbx
00007fff2a627159	subq	$0x18, %rsp
00007fff2a62715d	movq	(%rsi), %rbx
00007fff2a627160	movb	$0x1, %al
00007fff2a627162	cmpb	$0x0, (%rbx)
00007fff2a627165	jne	0x7fff2a6271ca
00007fff2a627167	movq	%rdi, %r14
00007fff2a62716a	movq	0x8(%rdi), %r13
00007fff2a62716e	movl	0x10(%rbx), %ecx
00007fff2a627171	addq	0x18(%r13), %rcx
00007fff2a627175	movq	0x10(%rdi), %rdx
00007fff2a627179	movq	(%rdx), %r12
00007fff2a62717c	cmpq	%rcx, %r12
00007fff2a62717f	jb	0x7fff2a6271ca
00007fff2a627181	movl	0x14(%rbx), %edx
00007fff2a627184	addq	%rcx, %rdx
00007fff2a627187	cmpq	%r12, %rdx
00007fff2a62718a	jbe	0x7fff2a6271ca
00007fff2a62718c	subl	%ecx, %r12d
00007fff2a62718f	movl	0x20(%rbx), %esi
00007fff2a627192	addq	0x28(%r13), %rsi
00007fff2a627196	movl	0x24(%rbx), %edx
00007fff2a627199	leaq	-0x40(%rbp), %r15
00007fff2a62719d	movq	%r15, %rdi
00007fff2a6271a0	callq	0x7fff2a628c5c
00007fff2a6271a5	movq	%r15, %rdi
00007fff2a6271a8	movl	%r12d, %esi
00007fff2a6271ab	callq	0x7fff2a628d1c
00007fff2a6271b0	addl	0x8(%rbx), %eax
00007fff2a6271b3	addq	0x8(%r13), %rax
00007fff2a6271b7	movq	0x18(%r14), %rcx
00007fff2a6271bb	movq	(%rcx), %rcx
00007fff2a6271be	movq	%rax, (%rcx)
00007fff2a6271c1	movq	0x20(%r14), %rax
00007fff2a6271c5	movb	$0x1, (%rax)
00007fff2a6271c8	xorl	%eax, %eax
00007fff2a6271ca	addq	$0x18, %rsp
00007fff2a6271ce	popq	%rbx
00007fff2a6271cf	popq	%r12
00007fff2a6271d1	popq	%r13
00007fff2a6271d3	popq	%r14
00007fff2a6271d5	popq	%r15
00007fff2a6271d7	popq	%rbp
00007fff2a6271d8	retq
_oah_get_runtime_location:
00007fff2a6271d9	pushq	%rbp
00007fff2a6271da	movq	%rsp, %rbp
00007fff2a6271dd	movabsq	$0x7fffffe00010, %rax           ## imm = 0x7FFFFFE00010
00007fff2a6271e7	testb	$0x40, 0x7(%rax)
00007fff2a6271eb	jne	0x7fff2a6271f6
00007fff2a6271ed	leaq	0x4156(%rip), %rax              ## literal pool for: "/Library/Apple/usr/libexec/oah/runtime"
00007fff2a6271f4	jmp	0x7fff2a627212
00007fff2a6271f6	cmpl	$0x7d34b9f, 0xfec(%rax)         ## imm = 0x7D34B9F
00007fff2a627200	leaq	0x4116(%rip), %rcx              ## literal pool for: "/Library/Apple/usr/libexec/oah/runtime_t8027"
00007fff2a627207	leaq	0x413c(%rip), %rax              ## literal pool for: "/Library/Apple/usr/libexec/oah/runtime"
00007fff2a62720e	cmoveq	%rcx, %rax
00007fff2a627212	popq	%rbp
00007fff2a627213	retq
_oah_get_runtime_version:
00007fff2a627214	pushq	%rbp
00007fff2a627215	movq	%rsp, %rbp
00007fff2a627218	popq	%rbp
00007fff2a627219	jmp	_rosetta_get_runtime_version
_oah_is_translation_available:
00007fff2a62721e	pushq	%rbp
00007fff2a62721f	movq	%rsp, %rbp
00007fff2a627222	leaq	0x417d(%rip), %rdi              ## literal pool for: "/"
00007fff2a627229	popq	%rbp
00007fff2a62722a	jmp	_rosetta_is_translation_available_on_volume
_oah_is_current_process_translated:
00007fff2a62722f	pushq	%rbp
00007fff2a627230	movq	%rsp, %rbp
00007fff2a627233	movabsq	$0x7fffffe00017, %rax           ## imm = 0x7FFFFFE00017
00007fff2a62723d	movb	(%rax), %al
00007fff2a62723f	andb	$0x40, %al
00007fff2a627241	shrb	$0x6, %al
00007fff2a627244	popq	%rbp
00007fff2a627245	retq
_oah_is_process_translated:
00007fff2a627246	pushq	%rbp
00007fff2a627247	movq	%rsp, %rbp
00007fff2a62724a	popq	%rbp
00007fff2a62724b	jmp	_rosetta_is_process_translated
_oah_get_preferred_architecture_from_architectures:
00007fff2a627250	pushq	%rbp
00007fff2a627251	movq	%rsp, %rbp
00007fff2a627254	popq	%rbp
00007fff2a627255	jmp	_rosetta_get_preferred_architecture_from_architectures
_rosetta_get_runtime_location:
00007fff2a62725a	pushq	%rbp
00007fff2a62725b	movq	%rsp, %rbp
00007fff2a62725e	movabsq	$0x7fffffe00010, %rax           ## imm = 0x7FFFFFE00010
00007fff2a627268	testb	$0x40, 0x7(%rax)
00007fff2a62726c	jne	0x7fff2a627277
00007fff2a62726e	leaq	0x40d5(%rip), %rax              ## literal pool for: "/Library/Apple/usr/libexec/oah/runtime"
00007fff2a627275	popq	%rbp
00007fff2a627276	retq
00007fff2a627277	cmpl	$0x7d34b9f, 0xfec(%rax)         ## imm = 0x7D34B9F
00007fff2a627281	leaq	0x4095(%rip), %rcx              ## literal pool for: "/Library/Apple/usr/libexec/oah/runtime_t8027"
00007fff2a627288	leaq	0x40bb(%rip), %rax              ## literal pool for: "/Library/Apple/usr/libexec/oah/runtime"
00007fff2a62728f	cmoveq	%rcx, %rax
00007fff2a627293	popq	%rbp
00007fff2a627294	retq
_rosetta_get_runtime_version:
00007fff2a627295	pushq	%rbp
00007fff2a627296	movq	%rsp, %rbp
00007fff2a627299	pushq	%rbx
00007fff2a62729a	pushq	%rax
00007fff2a62729b	movl	$0x8128, %eax                   ## imm = 0x8128
00007fff2a6272a0	callq	0x7fff2a62ac50
00007fff2a6272a5	subq	%rax, %rsp
00007fff2a6272a8	popq	%rax
00007fff2a6272a9	movq	0x5d220f10(%rip), %rax          ## literal pool symbol address: ___stack_chk_guard
00007fff2a6272b0	movq	(%rax), %rax
00007fff2a6272b3	movq	%rax, -0x10(%rbp)
00007fff2a6272b7	movabsq	$0x7fffffe00010, %rax           ## imm = 0x7FFFFFE00010
00007fff2a6272c1	testb	$0x40, 0x7(%rax)
00007fff2a6272c5	jne	0x7fff2a6272d0
00007fff2a6272c7	leaq	0x407c(%rip), %rdi              ## literal pool for: "/Library/Apple/usr/libexec/oah/runtime"
00007fff2a6272ce	jmp	0x7fff2a6272ec
00007fff2a6272d0	cmpl	$0x7d34b9f, 0xfec(%rax)         ## imm = 0x7D34B9F
00007fff2a6272da	leaq	0x403c(%rip), %rax              ## literal pool for: "/Library/Apple/usr/libexec/oah/runtime_t8027"
00007fff2a6272e1	leaq	0x4062(%rip), %rdi              ## literal pool for: "/Library/Apple/usr/libexec/oah/runtime"
00007fff2a6272e8	cmoveq	%rax, %rdi
00007fff2a6272ec	xorl	%ebx, %ebx
00007fff2a6272ee	movl	$0x100, %esi                    ## imm = 0x100
00007fff2a6272f3	xorl	%eax, %eax
00007fff2a6272f5	callq	0x7fff2a62ad8a                  ## symbol stub for: _open
00007fff2a6272fa	testl	%eax, %eax
00007fff2a6272fc	js	0x7fff2a627341
00007fff2a6272fe	leaq	-0x8130(%rbp), %rcx
00007fff2a627305	movq	$0x0, (%rcx)
00007fff2a62730c	leaq	-0x8128(%rbp), %rbx
00007fff2a627313	leaq	-0x8010(%rbp), %rdx
00007fff2a62731a	movq	%rbx, %rdi
00007fff2a62731d	movl	%eax, %esi
00007fff2a62731f	callq	0x7fff2a629077
00007fff2a627324	cmpb	$0x0, 0x110(%rbx)
00007fff2a62732b	je	0x7fff2a62733f
00007fff2a62732d	cmpb	$0x0, -0x8020(%rbp)
00007fff2a627334	je	0x7fff2a62733f
00007fff2a627336	movq	-0x8028(%rbp), %rbx
00007fff2a62733d	jmp	0x7fff2a627341
00007fff2a62733f	xorl	%ebx, %ebx
00007fff2a627341	movq	0x5d220e78(%rip), %rax          ## literal pool symbol address: ___stack_chk_guard
00007fff2a627348	movq	(%rax), %rax
00007fff2a62734b	cmpq	-0x10(%rbp), %rax
00007fff2a62734f	jne	0x7fff2a62735e
00007fff2a627351	movq	%rbx, %rax
00007fff2a627354	addq	$0x8128, %rsp                   ## imm = 0x8128
00007fff2a62735b	popq	%rbx
00007fff2a62735c	popq	%rbp
00007fff2a62735d	retq
00007fff2a62735e	callq	0x7fff2a62acee                  ## symbol stub for: ___stack_chk_fail
_rosetta_get_expected_version:
00007fff2a627363	pushq	%rbp
00007fff2a627364	movq	%rsp, %rbp
00007fff2a627367	pushq	%r15
00007fff2a627369	pushq	%r14
00007fff2a62736b	pushq	%r13
00007fff2a62736d	pushq	%r12
00007fff2a62736f	pushq	%rbx
00007fff2a627370	pushq	%rax
00007fff2a627371	leaq	0x3ff9(%rip), %rdi              ## literal pool for: "203.46"
00007fff2a627378	leaq	-0x30(%rbp), %rbx
00007fff2a62737c	movq	%rbx, %rsi
00007fff2a62737f	movl	$0xa, %edx
00007fff2a627384	callq	0x7fff2a62adba                  ## symbol stub for: _strtoul
00007fff2a627389	movq	%rax, %r14
00007fff2a62738c	movq	(%rbx), %rdi
00007fff2a62738f	movb	(%rdi), %cl
00007fff2a627391	cmpb	$0x2e, %cl
00007fff2a627394	jne	0x7fff2a62741a
00007fff2a62739a	incq	%rdi
00007fff2a62739d	leaq	-0x30(%rbp), %rbx
00007fff2a6273a1	movq	%rbx, %rsi
00007fff2a6273a4	movl	$0xa, %edx
00007fff2a6273a9	callq	0x7fff2a62adba                  ## symbol stub for: _strtoul
00007fff2a6273ae	movq	%rax, %r15
00007fff2a6273b1	movq	(%rbx), %rdi
00007fff2a6273b4	movb	(%rdi), %cl
00007fff2a6273b6	cmpb	$0x2e, %cl
00007fff2a6273b9	jne	0x7fff2a62741d
00007fff2a6273bb	incq	%rdi
00007fff2a6273be	leaq	-0x30(%rbp), %rbx
00007fff2a6273c2	movq	%rbx, %rsi
00007fff2a6273c5	movl	$0xa, %edx
00007fff2a6273ca	callq	0x7fff2a62adba                  ## symbol stub for: _strtoul
00007fff2a6273cf	movq	%rax, %r12
00007fff2a6273d2	movq	(%rbx), %rdi
00007fff2a6273d5	movb	(%rdi), %cl
00007fff2a6273d7	cmpb	$0x2e, %cl
00007fff2a6273da	jne	0x7fff2a627420
00007fff2a6273dc	incq	%rdi
00007fff2a6273df	leaq	-0x30(%rbp), %r13
00007fff2a6273e3	movq	%r13, %rsi
00007fff2a6273e6	movl	$0xa, %edx
00007fff2a6273eb	callq	0x7fff2a62adba                  ## symbol stub for: _strtoul
00007fff2a6273f0	movq	%rax, %rbx
00007fff2a6273f3	movq	(%r13), %rdi
00007fff2a6273f7	movb	(%rdi), %cl
00007fff2a6273f9	cmpb	$0x2e, %cl
00007fff2a6273fc	jne	0x7fff2a627422
00007fff2a6273fe	incq	%rdi
00007fff2a627401	leaq	-0x30(%rbp), %r13
00007fff2a627405	movq	%r13, %rsi
00007fff2a627408	movl	$0xa, %edx
00007fff2a62740d	callq	0x7fff2a62adba                  ## symbol stub for: _strtoul
00007fff2a627412	movq	(%r13), %rcx
00007fff2a627416	movb	(%rcx), %cl
00007fff2a627418	jmp	0x7fff2a627424
00007fff2a62741a	xorl	%r15d, %r15d
00007fff2a62741d	xorl	%r12d, %r12d
00007fff2a627420	xorl	%ebx, %ebx
00007fff2a627422	xorl	%eax, %eax
00007fff2a627424	movq	%r15, %rdx
00007fff2a627427	orq	%rbx, %rdx
00007fff2a62742a	movq	%r12, %rsi
00007fff2a62742d	orq	%rax, %rsi
00007fff2a627430	orq	%rdx, %rsi
00007fff2a627433	cmpq	$0x3ff, %rsi                    ## imm = 0x3FF
00007fff2a62743a	ja	0x7fff2a627477
00007fff2a62743c	cmpq	$0xffffff, %r14                 ## imm = 0xFFFFFF
00007fff2a627443	ja	0x7fff2a627477
00007fff2a627445	testb	%cl, %cl
00007fff2a627447	jne	0x7fff2a627477
00007fff2a627449	shlq	$0x28, %r14
00007fff2a62744d	shlq	$0x1e, %r15
00007fff2a627451	shlq	$0x14, %r12
00007fff2a627455	orq	%r15, %r12
00007fff2a627458	orq	%r14, %r12
00007fff2a62745b	shlq	$0xa, %rbx
00007fff2a62745f	orq	%r12, %rbx
00007fff2a627462	orq	%rax, %rbx
00007fff2a627465	movq	%rbx, %rax
00007fff2a627468	addq	$0x8, %rsp
00007fff2a62746c	popq	%rbx
00007fff2a62746d	popq	%r12
00007fff2a62746f	popq	%r13
00007fff2a627471	popq	%r14
00007fff2a627473	popq	%r15
00007fff2a627475	popq	%rbp
00007fff2a627476	retq
00007fff2a627477	leaq	0x3efa(%rip), %rdi              ## literal pool for: "malformed 64-bit a.b.c.d.e version number: %s"
00007fff2a62747e	leaq	0x3eec(%rip), %rsi              ## literal pool for: "203.46"
00007fff2a627485	xorl	%eax, %eax
00007fff2a627487	callq	0x7fff2a628bb4
_rosetta_is_translation_available_on_volume:
00007fff2a62748c	pushq	%rbp
00007fff2a62748d	movq	%rsp, %rbp
00007fff2a627490	pushq	%r15
00007fff2a627492	pushq	%r14
00007fff2a627494	pushq	%rbx
00007fff2a627495	subq	$0x38, %rsp
00007fff2a627499	movq	%rdi, %rsi
00007fff2a62749c	xorps	%xmm0, %xmm0
00007fff2a62749f	movaps	%xmm0, -0x30(%rbp)
00007fff2a6274a3	movq	$0x0, -0x20(%rbp)
00007fff2a6274ab	leaq	-0x1(%rdi), %rdx
00007fff2a6274af	cmpb	$0x0, 0x1(%rdx)
00007fff2a6274b3	leaq	0x1(%rdx), %rdx
00007fff2a6274b7	jne	0x7fff2a6274af
00007fff2a6274b9	movabsq	$0x7fffffe00010, %rbx           ## imm = 0x7FFFFFE00010
00007fff2a6274c3	leaq	-0x30(%rbp), %rdi
00007fff2a6274c7	callq	0x7fff2a627568
00007fff2a6274cc	testb	$0x40, 0x7(%rbx)
00007fff2a6274d0	jne	0x7fff2a6274db
00007fff2a6274d2	leaq	0x3e71(%rip), %rsi              ## literal pool for: "/Library/Apple/usr/libexec/oah/runtime"
00007fff2a6274d9	jmp	0x7fff2a6274f7
00007fff2a6274db	cmpl	$0x7d34b9f, 0xfec(%rbx)         ## imm = 0x7D34B9F
00007fff2a6274e5	leaq	0x3e31(%rip), %rax              ## literal pool for: "/Library/Apple/usr/libexec/oah/runtime_t8027"
00007fff2a6274ec	leaq	0x3e57(%rip), %rsi              ## literal pool for: "/Library/Apple/usr/libexec/oah/runtime"
00007fff2a6274f3	cmoveq	%rax, %rsi
00007fff2a6274f7	leaq	-0x30(%rbp), %r14
00007fff2a6274fb	movq	%r14, %rdi
00007fff2a6274fe	callq	0x7fff2a62acb8                  ## symbol stub for: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc
00007fff2a627503	leaq	-0x48(%rbp), %rbx
00007fff2a627507	movl	$0x0, (%rbx)
00007fff2a62750d	callq	0x7fff2a62acd0                  ## symbol stub for: __ZNSt3__115system_categoryEv
00007fff2a627512	movq	%rax, 0x8(%rbx)
00007fff2a627516	leaq	-0x38(%rbp), %r15
00007fff2a62751a	movq	%r15, %rdi
00007fff2a62751d	movq	%r14, %rsi
00007fff2a627520	movq	%rbx, %rdx
00007fff2a627523	callq	0x7fff2a62acd6                  ## symbol stub for: __ZNSt3__14__fs10filesystem8__statusERKNS1_4pathEPNS_10error_codeE
00007fff2a627528	cmpb	$0x0, (%r15)
00007fff2a62752c	je	0x7fff2a62754a
00007fff2a62752e	movl	$0x0, -0x48(%rbp)
00007fff2a627535	callq	0x7fff2a62acd0                  ## symbol stub for: __ZNSt3__115system_categoryEv
00007fff2a62753a	movq	%rax, -0x40(%rbp)
00007fff2a62753e	movb	-0x38(%rbp), %al
00007fff2a627541	incb	%al
00007fff2a627543	cmpb	$0x1, %al
00007fff2a627545	seta	%bl
00007fff2a627548	jmp	0x7fff2a62754c
00007fff2a62754a	xorl	%ebx, %ebx
00007fff2a62754c	testb	$0x1, -0x30(%rbp)
00007fff2a627550	je	0x7fff2a62755b
00007fff2a627552	movq	-0x20(%rbp), %rdi
00007fff2a627556	callq	0x7fff2a62acdc                  ## symbol stub for: __ZdlPv
00007fff2a62755b	movl	%ebx, %eax
00007fff2a62755d	addq	$0x38, %rsp
00007fff2a627561	popq	%rbx
00007fff2a627562	popq	%r14
00007fff2a627564	popq	%r15
00007fff2a627566	popq	%rbp
00007fff2a627567	retq
00007fff2a627568	pushq	%rbp
00007fff2a627569	movq	%rsp, %rbp
00007fff2a62756c	pushq	%r15
00007fff2a62756e	pushq	%r14
00007fff2a627570	pushq	%r13
00007fff2a627572	pushq	%r12
00007fff2a627574	pushq	%rbx
00007fff2a627575	subq	$0x28, %rsp
00007fff2a627579	movq	%rdx, %r15
00007fff2a62757c	movq	%rsi, %rbx
00007fff2a62757f	movq	%rdi, %r14
00007fff2a627582	movb	(%rdi), %al
00007fff2a627584	movq	%rdx, %r13
00007fff2a627587	subq	%rsi, %r13
00007fff2a62758a	testb	$0x1, %al
00007fff2a62758c	jne	0x7fff2a6275a9
00007fff2a62758e	testq	%r13, %r13
00007fff2a627591	je	0x7fff2a6276ca
00007fff2a627597	movzbl	%al, %r12d
00007fff2a62759b	shrq	%r12
00007fff2a62759e	leaq	0x1(%r14), %rcx
00007fff2a6275a2	movl	$0x16, %esi
00007fff2a6275a7	jmp	0x7fff2a6275c7
00007fff2a6275a9	testq	%r13, %r13
00007fff2a6275ac	je	0x7fff2a6276ca
00007fff2a6275b2	movq	(%r14), %rax
00007fff2a6275b5	movq	0x8(%r14), %r12
00007fff2a6275b9	movq	%rax, %rsi
00007fff2a6275bc	andq	$-0x2, %rsi
00007fff2a6275c0	decq	%rsi
00007fff2a6275c3	movq	0x10(%r14), %rcx
00007fff2a6275c7	cmpq	%rbx, %rcx
00007fff2a6275ca	ja	0x7fff2a6275f4
00007fff2a6275cc	addq	%r12, %rcx
00007fff2a6275cf	cmpq	%rbx, %rcx
00007fff2a6275d2	jbe	0x7fff2a6275f4
00007fff2a6275d4	cmpq	$-0x10, %r13
00007fff2a6275d8	jae	0x7fff2a6276dc
00007fff2a6275de	cmpq	$0x16, %r13
00007fff2a6275e2	ja	0x7fff2a627662
00007fff2a6275e4	addb	%r13b, %r13b
00007fff2a6275e7	leaq	-0x3f(%rbp), %rax
00007fff2a6275eb	movb	%r13b, -0x1(%rax)
00007fff2a6275ef	jmp	0x7fff2a627682
00007fff2a6275f4	movq	%rsi, %rcx
00007fff2a6275f7	subq	%r12, %rcx
00007fff2a6275fa	cmpq	%r13, %rcx
00007fff2a6275fd	jae	0x7fff2a627623
00007fff2a6275ff	leaq	(%r13,%r12), %rdx
00007fff2a627604	subq	%rsi, %rdx
00007fff2a627607	movq	$0x0, (%rsp)
00007fff2a62760f	movq	%r14, %rdi
00007fff2a627612	movq	%r12, %rcx
00007fff2a627615	movq	%r12, %r8
00007fff2a627618	xorl	%r9d, %r9d
00007fff2a62761b	callq	0x7fff2a62acc4                  ## symbol stub for: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm
00007fff2a627620	movb	(%r14), %al
00007fff2a627623	testb	$0x1, %al
00007fff2a627625	jne	0x7fff2a62762d
00007fff2a627627	leaq	0x1(%r14), %rax
00007fff2a62762b	jmp	0x7fff2a627631
00007fff2a62762d	movq	0x10(%r14), %rax
00007fff2a627631	addq	%r12, %rax
00007fff2a627634	cmpq	%r15, %rbx
00007fff2a627637	je	0x7fff2a627648
00007fff2a627639	movb	(%rbx), %cl
00007fff2a62763b	movb	%cl, (%rax)
00007fff2a62763d	incq	%rax
00007fff2a627640	incq	%rbx
00007fff2a627643	cmpq	%rbx, %r15
00007fff2a627646	jne	0x7fff2a627639
00007fff2a627648	movb	$0x0, (%rax)
00007fff2a62764b	addq	%r12, %r13
00007fff2a62764e	testb	$0x1, (%r14)
00007fff2a627652	jne	0x7fff2a62765c
00007fff2a627654	addb	%r13b, %r13b
00007fff2a627657	movb	%r13b, (%r14)
00007fff2a62765a	jmp	0x7fff2a6276ca
00007fff2a62765c	movq	%r13, 0x8(%r14)
00007fff2a627660	jmp	0x7fff2a6276ca
00007fff2a627662	leaq	0x10(%r13), %r12
00007fff2a627666	andq	$-0x10, %r12
00007fff2a62766a	movq	%r12, %rdi
00007fff2a62766d	callq	0x7fff2a62ace2                  ## symbol stub for: __Znwm
00007fff2a627672	movq	%rax, -0x30(%rbp)
00007fff2a627676	orq	$0x1, %r12
00007fff2a62767a	movq	%r12, -0x40(%rbp)
00007fff2a62767e	movq	%r13, -0x38(%rbp)
00007fff2a627682	cmpq	%r15, %rbx
00007fff2a627685	je	0x7fff2a627696
00007fff2a627687	movb	(%rbx), %cl
00007fff2a627689	movb	%cl, (%rax)
00007fff2a62768b	incq	%rbx
00007fff2a62768e	incq	%rax
00007fff2a627691	cmpq	%rbx, %r15
00007fff2a627694	jne	0x7fff2a627687
00007fff2a627696	movb	$0x0, (%rax)
00007fff2a627699	movzbl	-0x40(%rbp), %edx
00007fff2a62769d	testb	$0x1, %dl
00007fff2a6276a0	je	0x7fff2a6276ac
00007fff2a6276a2	movq	-0x30(%rbp), %rsi
00007fff2a6276a6	movq	-0x38(%rbp), %rdx
00007fff2a6276aa	jmp	0x7fff2a6276b3
00007fff2a6276ac	shrq	%rdx
00007fff2a6276af	leaq	-0x3f(%rbp), %rsi
00007fff2a6276b3	movq	%r14, %rdi
00007fff2a6276b6	callq	0x7fff2a62acbe                  ## symbol stub for: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm
00007fff2a6276bb	testb	$0x1, -0x40(%rbp)
00007fff2a6276bf	je	0x7fff2a6276ca
00007fff2a6276c1	movq	-0x30(%rbp), %rdi
00007fff2a6276c5	callq	0x7fff2a62acdc                  ## symbol stub for: __ZdlPv
00007fff2a6276ca	movq	%r14, %rax
00007fff2a6276cd	addq	$0x28, %rsp
00007fff2a6276d1	popq	%rbx
00007fff2a6276d2	popq	%r12
00007fff2a6276d4	popq	%r13
00007fff2a6276d6	popq	%r14
00007fff2a6276d8	popq	%r15
00007fff2a6276da	popq	%rbp
00007fff2a6276db	retq
00007fff2a6276dc	leaq	-0x40(%rbp), %rdi
00007fff2a6276e0	callq	0x7fff2a62acac                  ## symbol stub for: __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv
_rosetta_is_translation_available:
00007fff2a6276e5	pushq	%rbp
00007fff2a6276e6	movq	%rsp, %rbp
00007fff2a6276e9	leaq	0x3cb6(%rip), %rdi              ## literal pool for: "/"
00007fff2a6276f0	popq	%rbp
00007fff2a6276f1	jmp	_rosetta_is_translation_available_on_volume
_rosetta_has_been_previously_installed_on_volume:
00007fff2a6276f6	pushq	%rbp
00007fff2a6276f7	movq	%rsp, %rbp
00007fff2a6276fa	pushq	%r15
00007fff2a6276fc	pushq	%r14
00007fff2a6276fe	pushq	%r12
00007fff2a627700	pushq	%rbx
00007fff2a627701	subq	$0x30, %rsp
00007fff2a627705	movq	%rdi, %r14
00007fff2a627708	xorps	%xmm0, %xmm0
00007fff2a62770b	movaps	%xmm0, -0x40(%rbp)
00007fff2a62770f	movq	$0x0, -0x30(%rbp)
00007fff2a627717	leaq	-0x1(%rdi), %rdx
00007fff2a62771b	cmpb	$0x0, 0x1(%rdx)
00007fff2a62771f	leaq	0x1(%rdx), %rdx
00007fff2a627723	jne	0x7fff2a62771b
00007fff2a627725	leaq	-0x40(%rbp), %r15
00007fff2a627729	movq	%r15, %rdi
00007fff2a62772c	movq	%r14, %rsi
00007fff2a62772f	callq	0x7fff2a627568
00007fff2a627734	leaq	0x3c6d(%rip), %rsi              ## literal pool for: "/Library/Apple/usr/share/rosetta/rosetta"
00007fff2a62773b	movq	%r15, %rdi
00007fff2a62773e	callq	0x7fff2a62acb8                  ## symbol stub for: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc
00007fff2a627743	leaq	-0x50(%rbp), %rbx
00007fff2a627747	movl	$0x0, (%rbx)
00007fff2a62774d	callq	0x7fff2a62acd0                  ## symbol stub for: __ZNSt3__115system_categoryEv
00007fff2a627752	movq	%rax, 0x8(%rbx)
00007fff2a627756	leaq	-0x28(%rbp), %r12
00007fff2a62775a	movq	%r12, %rdi
00007fff2a62775d	movq	%r15, %rsi
00007fff2a627760	movq	%rbx, %rdx
00007fff2a627763	callq	0x7fff2a62acd6                  ## symbol stub for: __ZNSt3__14__fs10filesystem8__statusERKNS1_4pathEPNS_10error_codeE
00007fff2a627768	cmpb	$0x0, (%r12)
00007fff2a62776d	je	0x7fff2a62778a
00007fff2a62776f	movl	$0x0, -0x50(%rbp)
00007fff2a627776	callq	0x7fff2a62acd0                  ## symbol stub for: __ZNSt3__115system_categoryEv
00007fff2a62777b	movq	%rax, -0x48(%rbp)
00007fff2a62777f	movb	-0x28(%rbp), %al
00007fff2a627782	incb	%al
00007fff2a627784	movb	$0x1, %bl
00007fff2a627786	cmpb	$0x1, %al
00007fff2a627788	ja	0x7fff2a627794
00007fff2a62778a	movq	%r14, %rdi
00007fff2a62778d	callq	_rosetta_is_translation_available_on_volume
00007fff2a627792	movl	%eax, %ebx
00007fff2a627794	testb	$0x1, -0x40(%rbp)
00007fff2a627798	je	0x7fff2a6277a3
00007fff2a62779a	movq	-0x30(%rbp), %rdi
00007fff2a62779e	callq	0x7fff2a62acdc                  ## symbol stub for: __ZdlPv
00007fff2a6277a3	movl	%ebx, %eax
00007fff2a6277a5	addq	$0x30, %rsp
00007fff2a6277a9	popq	%rbx
00007fff2a6277aa	popq	%r12
00007fff2a6277ac	popq	%r14
00007fff2a6277ae	popq	%r15
00007fff2a6277b0	popq	%rbp
00007fff2a6277b1	retq
_rosetta_has_been_previously_installed:
00007fff2a6277b2	pushq	%rbp
00007fff2a6277b3	movq	%rsp, %rbp
00007fff2a6277b6	leaq	0x3be9(%rip), %rdi              ## literal pool for: "/"
00007fff2a6277bd	popq	%rbp
00007fff2a6277be	jmp	_rosetta_has_been_previously_installed_on_volume
_rosetta_is_current_process_translated:
00007fff2a6277c3	pushq	%rbp
00007fff2a6277c4	movq	%rsp, %rbp
00007fff2a6277c7	movabsq	$0x7fffffe00017, %rax           ## imm = 0x7FFFFFE00017
00007fff2a6277d1	movb	(%rax), %al
00007fff2a6277d3	andb	$0x40, %al
00007fff2a6277d5	shrb	$0x6, %al
00007fff2a6277d8	popq	%rbp
00007fff2a6277d9	retq
_rosetta_is_process_translated:
00007fff2a6277da	pushq	%rbp
00007fff2a6277db	movq	%rsp, %rbp
00007fff2a6277de	subq	$0x2b0, %rsp                    ## imm = 0x2B0
00007fff2a6277e5	movq	0x5d2209d4(%rip), %rax          ## literal pool symbol address: ___stack_chk_guard
00007fff2a6277ec	movq	(%rax), %rax
00007fff2a6277ef	movq	%rax, -0x8(%rbp)
00007fff2a6277f3	cmpl	$-0x1, %edi
00007fff2a6277f6	je	0x7fff2a627857
00007fff2a6277f8	movabsq	$0xe00000001, %rcx              ## imm = 0xE00000001
00007fff2a627802	leaq	-0x20(%rbp), %rax
00007fff2a627806	movq	%rcx, (%rax)
00007fff2a627809	movl	$0x1, 0x8(%rax)
00007fff2a627810	movl	%edi, 0xc(%rax)
00007fff2a627813	leaq	-0x2b0(%rbp), %rcx
00007fff2a62781a	movq	$0x288, (%rcx)                  ## imm = 0x288
00007fff2a627821	leaq	-0x2a8(%rbp), %rdx
00007fff2a627828	movq	%rax, %rdi
00007fff2a62782b	movl	$0x4, %esi
00007fff2a627830	xorl	%r8d, %r8d
00007fff2a627833	xorl	%r9d, %r9d
00007fff2a627836	callq	0x7fff2a62adc6                  ## symbol stub for: _sysctl
00007fff2a62783b	testl	%eax, %eax
00007fff2a62783d	jne	0x7fff2a627857
00007fff2a62783f	cmpq	$0x0, -0x2b0(%rbp)
00007fff2a627847	je	0x7fff2a627857
00007fff2a627849	movl	-0x288(%rbp), %eax
00007fff2a62784f	shrl	$0x11, %eax
00007fff2a627852	andl	$0x1, %eax
00007fff2a627855	jmp	0x7fff2a627859
00007fff2a627857	xorl	%eax, %eax
00007fff2a627859	movq	0x5d220960(%rip), %rcx          ## literal pool symbol address: ___stack_chk_guard
00007fff2a627860	movq	(%rcx), %rcx
00007fff2a627863	cmpq	-0x8(%rbp), %rcx
00007fff2a627867	jne	0x7fff2a627872
00007fff2a627869	addq	$0x2b0, %rsp                    ## imm = 0x2B0
00007fff2a627870	popq	%rbp
00007fff2a627871	retq
00007fff2a627872	callq	0x7fff2a62acee                  ## symbol stub for: ___stack_chk_fail
_rosetta_get_preferred_architecture_from_architectures:
00007fff2a627877	pushq	%rbp
00007fff2a627878	movq	%rsp, %rbp
00007fff2a62787b	xorl	%r8d, %r8d
00007fff2a62787e	testq	%rsi, %rsi
00007fff2a627881	je	0x7fff2a6278ae
00007fff2a627883	xorl	%edx, %edx
00007fff2a627885	xorl	%r9d, %r9d
00007fff2a627888	xorl	%eax, %eax
00007fff2a62788a	movl	(%rdi,%rdx,4), %ecx
00007fff2a62788d	cmpl	$0x1000007, %ecx                ## imm = 0x1000007
00007fff2a627893	je	0x7fff2a6278a2
00007fff2a627895	cmpl	$0x100000c, %ecx                ## imm = 0x100000C
00007fff2a62789b	jne	0x7fff2a6278a4
00007fff2a62789d	movb	$0x1, %r9b
00007fff2a6278a0	jmp	0x7fff2a6278a4
00007fff2a6278a2	movb	$0x1, %al
00007fff2a6278a4	incq	%rdx
00007fff2a6278a7	cmpq	%rdx, %rsi
00007fff2a6278aa	jne	0x7fff2a62788a
00007fff2a6278ac	jmp	0x7fff2a6278b3
00007fff2a6278ae	xorl	%eax, %eax
00007fff2a6278b0	xorl	%r9d, %r9d
00007fff2a6278b3	testb	$0x1, %al
00007fff2a6278b5	movl	$0x1000007, %ecx                ## imm = 0x1000007
00007fff2a6278ba	cmovel	%r8d, %ecx
00007fff2a6278be	movabsq	$0x7fffffe00017, %rax           ## imm = 0x7FFFFFE00017
00007fff2a6278c8	testb	$0x40, (%rax)
00007fff2a6278cb	movl	$0x100000c, %eax                ## imm = 0x100000C
00007fff2a6278d0	cmovel	%ecx, %eax
00007fff2a6278d3	testb	$0x1, %r9b
00007fff2a6278d7	cmovel	%ecx, %eax
00007fff2a6278da	popq	%rbp
00007fff2a6278db	retq
_rosetta_convert_to_rosetta_absolute_time:
00007fff2a6278dc	pushq	%rbp
00007fff2a6278dd	movq	%rsp, %rbp
00007fff2a6278e0	movq	%rdi, %rax
00007fff2a6278e3	movl	$0x7d, %ecx
00007fff2a6278e8	mulq	%rcx
00007fff2a6278eb	movq	%rdx, %rsi
00007fff2a6278ee	movl	$0x3, %edx
00007fff2a6278f3	movq	%rax, %rdi
00007fff2a6278f6	xorl	%ecx, %ecx
00007fff2a6278f8	callq	0x7fff2a62acf4                  ## symbol stub for: ___udivti3
00007fff2a6278fd	popq	%rbp
00007fff2a6278fe	retq
_rosetta_convert_to_system_absolute_time:
00007fff2a6278ff	pushq	%rbp
00007fff2a627900	movq	%rsp, %rbp
00007fff2a627903	movq	%rdi, %rax
00007fff2a627906	movl	$0x3, %ecx
00007fff2a62790b	mulq	%rcx
00007fff2a62790e	movq	%rdx, %rsi
00007fff2a627911	movl	$0x7d, %edx
00007fff2a627916	movq	%rax, %rdi
00007fff2a627919	xorl	%ecx, %ecx
00007fff2a62791b	callq	0x7fff2a62acf4                  ## symbol stub for: ___udivti3
00007fff2a627920	popq	%rbp
00007fff2a627921	retq
_rosetta_thread_create_running:
00007fff2a627922	pushq	%rbp
00007fff2a627923	movq	%rsp, %rbp
00007fff2a627926	pushq	%r15
00007fff2a627928	pushq	%r14
00007fff2a62792a	pushq	%r13
00007fff2a62792c	pushq	%r12
00007fff2a62792e	pushq	%rbx
00007fff2a62792f	subq	$0x4a8, %rsp                    ## imm = 0x4A8
00007fff2a627936	movq	0x5d220883(%rip), %rax          ## literal pool symbol address: ___stack_chk_guard
00007fff2a62793d	movq	(%rax), %rax
00007fff2a627940	movq	%rax, -0x30(%rbp)
00007fff2a627944	movl	$0x4, %eax
00007fff2a627949	testq	%rdx, %rdx
00007fff2a62794c	je	0x7fff2a627b55
00007fff2a627952	movl	%edi, %r12d
00007fff2a627955	testl	%edi, %edi
00007fff2a627957	je	0x7fff2a627b55
00007fff2a62795d	cmpl	$0x4, %esi
00007fff2a627960	jne	0x7fff2a627b55
00007fff2a627966	cmpl	$0x2a, %ecx
00007fff2a627969	jne	0x7fff2a627b55
00007fff2a62796f	movq	%r8, %r14
00007fff2a627972	movq	%rdx, %rbx
00007fff2a627975	leaq	-0x454(%rbp), %rsi
00007fff2a62797c	movl	%r12d, %edi
00007fff2a62797f	callq	0x7fff2a62ad90                  ## symbol stub for: _pid_for_task
00007fff2a627984	testl	%eax, %eax
00007fff2a627986	je	0x7fff2a6279a4
00007fff2a627988	xorl	%edx, %edx
00007fff2a62798a	movl	$0x7000003, %edi                ## imm = 0x7000003
00007fff2a62798f	movl	%r12d, %esi
00007fff2a627992	movq	%rbx, %rcx
00007fff2a627995	movq	%r14, %r8
00007fff2a627998	xorl	%eax, %eax
00007fff2a62799a	callq	0x7fff2a62adc0                  ## symbol stub for: _syscall
00007fff2a62799f	jmp	0x7fff2a627b55
00007fff2a6279a4	movabsq	$0x7fffffe00010, %rax           ## imm = 0x7FFFFFE00010
00007fff2a6279ae	movl	-0x454(%rbp), %ecx
00007fff2a6279b4	movl	%ecx, -0x450(%rbp)
00007fff2a6279ba	testb	$0x40, 0x7(%rax)
00007fff2a6279be	movq	%r14, -0x478(%rbp)
00007fff2a6279c5	movq	%rbx, -0x460(%rbp)
00007fff2a6279cc	jne	0x7fff2a6279de
00007fff2a6279ce	leaq	0x3975(%rip), %rax              ## literal pool for: "/Library/Apple/usr/libexec/oah/runtime"
00007fff2a6279d5	movq	%rax, -0x468(%rbp)
00007fff2a6279dc	jmp	0x7fff2a627a01
00007fff2a6279de	cmpl	$0x7d34b9f, 0xfec(%rax)         ## imm = 0x7D34B9F
00007fff2a6279e8	leaq	0x392e(%rip), %rax              ## literal pool for: "/Library/Apple/usr/libexec/oah/runtime_t8027"
00007fff2a6279ef	leaq	0x3954(%rip), %rcx              ## literal pool for: "/Library/Apple/usr/libexec/oah/runtime"
00007fff2a6279f6	cmoveq	%rax, %rcx
00007fff2a6279fa	movq	%rcx, -0x468(%rbp)
00007fff2a627a01	leaq	-0x448(%rbp), %rsi
00007fff2a627a08	movq	$0x0, (%rsi)
00007fff2a627a0f	leaq	-0x44c(%rbp), %r9
00007fff2a627a16	movl	$0x9, (%r9)
00007fff2a627a1d	leaq	-0x458(%rbp), %rax
00007fff2a627a24	movq	%rax, (%rsp)
00007fff2a627a28	leaq	-0x470(%rbp), %rdx
00007fff2a627a2f	leaq	-0x4a8(%rbp), %r8
00007fff2a627a36	movl	%r12d, %edi
00007fff2a627a39	movl	$0xa, %ecx
00007fff2a627a3e	callq	0x7fff2a62ad66                  ## symbol stub for: _mach_vm_region
00007fff2a627a43	testl	%eax, %eax
00007fff2a627a45	jne	0x7fff2a627b50
00007fff2a627a4b	leaq	-0x448(%rbp), %rbx
00007fff2a627a52	leaq	-0x470(%rbp), %r13
00007fff2a627a59	leaq	-0x4a8(%rbp), %r14
00007fff2a627a60	leaq	-0x44c(%rbp), %r15
00007fff2a627a67	cmpl	$0x5, -0x4a8(%rbp)
00007fff2a627a6e	jne	0x7fff2a627b0c
00007fff2a627a74	movq	$0x20, -0x480(%rbp)
00007fff2a627a7f	movq	-0x448(%rbp), %rsi
00007fff2a627a86	movl	$0x20, %edx
00007fff2a627a8b	movl	%r12d, %edi
00007fff2a627a8e	leaq	-0x4c8(%rbp), %rcx
00007fff2a627a95	leaq	-0x480(%rbp), %r8
00007fff2a627a9c	callq	0x7fff2a62ad60                  ## symbol stub for: _mach_vm_read_overwrite
00007fff2a627aa1	testl	%eax, %eax
00007fff2a627aa3	jne	0x7fff2a627c3e
00007fff2a627aa9	movl	-0x4c8(%rbp), %eax
00007fff2a627aaf	andl	$-0x2, %eax
00007fff2a627ab2	cmpl	$0xfeedface, %eax               ## imm = 0xFEEDFACE
00007fff2a627ab7	jne	0x7fff2a627b0c
00007fff2a627ab9	movl	-0x4bc(%rbp), %eax
00007fff2a627abf	cmpl	$0x7, %eax
00007fff2a627ac2	je	0x7fff2a627ac9
00007fff2a627ac4	cmpl	$0x2, %eax
00007fff2a627ac7	jne	0x7fff2a627b0c
00007fff2a627ac9	movq	-0x448(%rbp), %rsi
00007fff2a627ad0	movl	-0x450(%rbp), %edi
00007fff2a627ad6	leaq	-0x440(%rbp), %rdx
00007fff2a627add	movl	$0x400, %ecx                    ## imm = 0x400
00007fff2a627ae2	callq	0x7fff2a62ad9c                  ## symbol stub for: _proc_regionfilename
00007fff2a627ae7	testl	%eax, %eax
00007fff2a627ae9	je	0x7fff2a627af5
00007fff2a627aeb	cltq
00007fff2a627aed	movb	$0x0, -0x440(%rbp,%rax)
00007fff2a627af5	leaq	-0x440(%rbp), %rdi
00007fff2a627afc	movq	-0x468(%rbp), %rsi
00007fff2a627b03	callq	0x7fff2a62ada8                  ## symbol stub for: _strcmp
00007fff2a627b08	testl	%eax, %eax
00007fff2a627b0a	je	0x7fff2a627b7b
00007fff2a627b0c	movq	-0x470(%rbp), %rax
00007fff2a627b13	addq	%rax, -0x448(%rbp)
00007fff2a627b1a	movl	$0x9, -0x44c(%rbp)
00007fff2a627b24	leaq	-0x458(%rbp), %rax
00007fff2a627b2b	movq	%rax, (%rsp)
00007fff2a627b2f	movl	%r12d, %edi
00007fff2a627b32	movq	%rbx, %rsi
00007fff2a627b35	movq	%r13, %rdx
00007fff2a627b38	movl	$0xa, %ecx
00007fff2a627b3d	movq	%r14, %r8
00007fff2a627b40	movq	%r15, %r9
00007fff2a627b43	callq	0x7fff2a62ad66                  ## symbol stub for: _mach_vm_region
00007fff2a627b48	testl	%eax, %eax
00007fff2a627b4a	je	0x7fff2a627a67
00007fff2a627b50	movl	$0x5, %eax
00007fff2a627b55	movq	0x5d220664(%rip), %rcx          ## literal pool symbol address: ___stack_chk_guard
00007fff2a627b5c	movq	(%rcx), %rcx
00007fff2a627b5f	cmpq	-0x30(%rbp), %rcx
00007fff2a627b63	jne	0x7fff2a627c39
00007fff2a627b69	addq	$0x4a8, %rsp                    ## imm = 0x4A8
00007fff2a627b70	popq	%rbx
00007fff2a627b71	popq	%r12
00007fff2a627b73	popq	%r13
00007fff2a627b75	popq	%r14
00007fff2a627b77	popq	%r15
00007fff2a627b79	popq	%rbp
00007fff2a627b7a	retq
00007fff2a627b7b	movq	-0x448(%rbp), %r14
00007fff2a627b82	leaq	-0x440(%rbp), %rcx
00007fff2a627b89	movq	$0x0, (%rcx)
00007fff2a627b90	leaq	-0x4a8(%rbp), %r8
00007fff2a627b97	movl	$0x0, (%r8)
00007fff2a627b9e	movq	0x5d22062b(%rip), %rax          ## literal pool symbol address: _vm_kernel_page_size
00007fff2a627ba5	movq	(%rax), %rdx
00007fff2a627ba8	movl	%r12d, %edi
00007fff2a627bab	movq	%r14, %rsi
00007fff2a627bae	callq	0x7fff2a62ad5a                  ## symbol stub for: _mach_vm_read
00007fff2a627bb3	testl	%eax, %eax
00007fff2a627bb5	je	0x7fff2a627bc7
00007fff2a627bb7	movb	$0x1, %sil
00007fff2a627bba	xorl	%ecx, %ecx
00007fff2a627bbc	xorl	%edx, %edx
00007fff2a627bbe	movq	-0x460(%rbp), %rbx
00007fff2a627bc5	jmp	0x7fff2a627c1c
00007fff2a627bc7	movq	-0x440(%rbp), %rdi
00007fff2a627bce	leaq	0x3f24(%rip), %rsi              ## literal pool for: "__TEXT"
00007fff2a627bd5	leaq	0x384f(%rip), %rdx              ## literal pool for: "runtime_thread"
00007fff2a627bdc	callq	0x7fff2a62ad42                  ## symbol stub for: _getsectbynamefromheader_64
00007fff2a627be1	testq	%rax, %rax
00007fff2a627be4	movq	-0x460(%rbp), %rbx
00007fff2a627beb	je	0x7fff2a627c66
00007fff2a627bed	addq	0x20(%rax), %r14
00007fff2a627bf1	movq	0x5d2205d0(%rip), %rax          ## literal pool symbol address: _mach_task_self_
00007fff2a627bf8	movl	(%rax), %edi
00007fff2a627bfa	movq	-0x440(%rbp), %rsi
00007fff2a627c01	movl	-0x4a8(%rbp), %edx
00007fff2a627c07	callq	0x7fff2a62ade4                  ## symbol stub for: _vm_deallocate
00007fff2a627c0c	movq	%r14, %rcx
00007fff2a627c0f	andq	$-0x100, %rcx
00007fff2a627c16	movzbl	%r14b, %edx
00007fff2a627c1a	xorl	%esi, %esi
00007fff2a627c1c	movl	$0x5, %eax
00007fff2a627c21	testb	%sil, %sil
00007fff2a627c24	movq	-0x478(%rbp), %r14
00007fff2a627c2b	jne	0x7fff2a627b55
00007fff2a627c31	orq	%rcx, %rdx
00007fff2a627c34	jmp	0x7fff2a62798a
00007fff2a627c39	callq	0x7fff2a62acee                  ## symbol stub for: ___stack_chk_fail
00007fff2a627c3e	leaq	0x378c(%rip), %rdi              ## literal pool for: "ThreadInjection.cpp"
00007fff2a627c45	leaq	0x3799(%rip), %rdx              ## literal pool for: "find_runtime_address"
00007fff2a627c4c	leaq	0x37a7(%rip), %rcx              ## literal pool for: "kr == KERN_SUCCESS"
00007fff2a627c53	leaq	0x37b3(%rip), %r8               ## literal pool for: "mach_vm_read_overwrite failed"
00007fff2a627c5a	movl	$0x31, %esi
00007fff2a627c5f	xorl	%eax, %eax
00007fff2a627c61	callq	0x7fff2a6287f0
00007fff2a627c66	leaq	0x3764(%rip), %rdi              ## literal pool for: "ThreadInjection.cpp"
00007fff2a627c6d	leaq	0x37c6(%rip), %rdx              ## literal pool for: "find_section_address"
00007fff2a627c74	leaq	0x37d4(%rip), %rcx              ## literal pool for: "section != nullptr"
00007fff2a627c7b	leaq	0x37e0(%rip), %r8               ## literal pool for: "no section found"
00007fff2a627c82	movl	$0x5c, %esi
00007fff2a627c87	jmp	0x7fff2a627c5f
_oah_thread_create_running:
00007fff2a627c89	pushq	%rbp
00007fff2a627c8a	movq	%rsp, %rbp
00007fff2a627c8d	popq	%rbp
00007fff2a627c8e	jmp	_rosetta_thread_create_running
_rosetta_thread_get_state:
00007fff2a627c93	pushq	%rbp
00007fff2a627c94	movq	%rsp, %rbp
00007fff2a627c97	pushq	%r15
00007fff2a627c99	pushq	%r14
00007fff2a627c9b	pushq	%r13
00007fff2a627c9d	pushq	%r12
00007fff2a627c9f	pushq	%rbx
00007fff2a627ca0	subq	$0x3e8, %rsp                    ## imm = 0x3E8
00007fff2a627ca7	movq	0x5d220512(%rip), %rax          ## literal pool symbol address: ___stack_chk_guard
00007fff2a627cae	movq	(%rax), %rax
00007fff2a627cb1	movq	%rax, -0x30(%rbp)
00007fff2a627cb5	testl	%edi, %edi
00007fff2a627cb7	je	0x7fff2a627f86
00007fff2a627cbd	movl	%esi, %ebx
00007fff2a627cbf	testl	%esi, %esi
00007fff2a627cc1	je	0x7fff2a627f86
00007fff2a627cc7	movq	%rcx, %r14
00007fff2a627cca	testq	%rcx, %rcx
00007fff2a627ccd	je	0x7fff2a627f86
00007fff2a627cd3	testq	%r8, %r8
00007fff2a627cd6	je	0x7fff2a627f86
00007fff2a627cdc	movl	%edi, %r12d
00007fff2a627cdf	movq	0x5d2204e2(%rip), %rax          ## literal pool symbol address: _mach_task_self_
00007fff2a627ce6	movl	$0x2e, %r13d
00007fff2a627cec	cmpl	%edi, (%rax)
00007fff2a627cee	je	0x7fff2a627f8c
00007fff2a627cf4	movabsq	$0x7fffffe00010, %r15           ## imm = 0x7FFFFFE00010
00007fff2a627cfe	movabsq	$0x4000000000000000, %rax       ## imm = 0x4000000000000000
00007fff2a627d08	andq	(%r15), %rax
00007fff2a627d0b	je	0x7fff2a627f8c
00007fff2a627d11	cmpl	$0x5, %edx
00007fff2a627d14	je	0x7fff2a627fb5
00007fff2a627d1a	cmpl	$0x4, %edx
00007fff2a627d1d	jne	0x7fff2a627f86
00007fff2a627d23	cmpl	$0x2a, (%r8)
00007fff2a627d27	movl	$0x4, %r13d
00007fff2a627d2d	jb	0x7fff2a627f8c
00007fff2a627d33	movl	$0x2a, (%r8)
00007fff2a627d3a	leaq	-0x2fc(%rbp), %rcx
00007fff2a627d41	movl	$0x44, (%rcx)
00007fff2a627d47	leaq	-0x240(%rbp), %rdx
00007fff2a627d4e	movl	%ebx, %edi
00007fff2a627d50	movl	$0x6, %esi
00007fff2a627d55	callq	0x7fff2a62add8                  ## symbol stub for: _thread_get_state
00007fff2a627d5a	movl	%eax, %r13d
00007fff2a627d5d	movl	%eax, -0x244(%rbp)
00007fff2a627d63	testl	%eax, %eax
00007fff2a627d65	jne	0x7fff2a627f8c
00007fff2a627d6b	movq	-0x1b0(%rbp), %rbx
00007fff2a627d72	movl	$0x2e, %r13d
00007fff2a627d78	testb	$0x1, %bl
00007fff2a627d7b	jne	0x7fff2a627f8c
00007fff2a627d81	leaq	-0x244(%rbp), %r13
00007fff2a627d88	movl	%r12d, %edi
00007fff2a627d8b	xorl	%esi, %esi
00007fff2a627d8d	movq	%r13, %rdx
00007fff2a627d90	callq	0x7fff2a62acfa                  ## symbol stub for: __dyld_process_info_create
00007fff2a627d95	movl	(%r13), %r13d
00007fff2a627d99	testl	%r13d, %r13d
00007fff2a627d9c	jne	0x7fff2a627f8c
00007fff2a627da2	movq	%rax, -0x250(%rbp)
00007fff2a627da9	movb	$0x0, -0x2ec(%rbp)
00007fff2a627db0	xorl	%eax, %eax
00007fff2a627db2	movq	%rax, -0x2d8(%rbp)
00007fff2a627db9	movq	%rax, -0x2d0(%rbp)
00007fff2a627dc0	movq	%rax, -0x2c8(%rbp)
00007fff2a627dc7	movq	%rax, -0x2c0(%rbp)
00007fff2a627dce	movq	%rax, -0x2a8(%rbp)
00007fff2a627dd5	movq	%rax, -0x2a0(%rbp)
00007fff2a627ddc	movq	%rax, -0x298(%rbp)
00007fff2a627de3	movq	%rax, -0x290(%rbp)
00007fff2a627dea	movq	%rax, -0x288(%rbp)
00007fff2a627df1	movq	%rax, -0x280(%rbp)
00007fff2a627df8	movq	%rax, -0x278(%rbp)
00007fff2a627dff	movl	$0x3f800000, -0x270(%rbp)       ## imm = 0x3F800000
00007fff2a627e09	callq	0x7fff2a624f00
00007fff2a627e0e	movl	%eax, -0x2f0(%rbp)
00007fff2a627e14	testl	%eax, %eax
00007fff2a627e16	je	0x7fff2a6282cb
00007fff2a627e1c	movq	%rbx, %r13
00007fff2a627e1f	btrq	$0x3f, %r13
00007fff2a627e24	testq	%rbx, %rbx
00007fff2a627e27	js	0x7fff2a6282da
00007fff2a627e2d	movq	-0x240(%rbp), %rax
00007fff2a627e34	movq	%rax, (%r14)
00007fff2a627e37	movups	-0x238(%rbp), %xmm0
00007fff2a627e3e	movups	%xmm0, 0x10(%r14)
00007fff2a627e43	movq	-0x228(%rbp), %rax
00007fff2a627e4a	movq	%rax, 0x8(%r14)
00007fff2a627e4e	movdqu	-0x220(%rbp), %xmm0
00007fff2a627e56	pshufd	$0x4e, %xmm0, %xmm0             ## xmm0 = xmm0[2,3,0,1]
00007fff2a627e5b	movdqu	%xmm0, 0x30(%r14)
00007fff2a627e61	movdqu	-0x210(%rbp), %xmm0
00007fff2a627e69	pshufd	$0x4e, %xmm0, %xmm0             ## xmm0 = xmm0[2,3,0,1]
00007fff2a627e6e	movdqu	%xmm0, 0x20(%r14)
00007fff2a627e74	movq	-0x200(%rbp), %rax
00007fff2a627e7b	movq	-0x1f8(%rbp), %rcx
00007fff2a627e82	movq	%rax, 0x40(%r14)
00007fff2a627e86	movq	%rcx, 0x48(%r14)
00007fff2a627e8a	movq	-0x1f0(%rbp), %rax
00007fff2a627e91	movq	%rax, 0x50(%r14)
00007fff2a627e95	movq	-0x1e8(%rbp), %rax
00007fff2a627e9c	movq	%rax, 0x58(%r14)
00007fff2a627ea0	movq	-0x1e0(%rbp), %rax
00007fff2a627ea7	movq	%rax, 0x60(%r14)
00007fff2a627eab	movq	-0x1d8(%rbp), %rax
00007fff2a627eb2	movq	%rax, 0x68(%r14)
00007fff2a627eb6	movq	-0x1d0(%rbp), %rax
00007fff2a627ebd	movq	%rax, 0x70(%r14)
00007fff2a627ec1	movq	-0x1c8(%rbp), %rax
00007fff2a627ec8	movq	%rax, 0x78(%r14)
00007fff2a627ecc	movl	-0x138(%rbp), %edi
00007fff2a627ed2	movq	-0x1b8(%rbp), %rsi
00007fff2a627ed9	callq	0x7fff2a62abc0
00007fff2a627ede	movq	%rax, 0x88(%r14)
00007fff2a627ee5	movq	-0x140(%rbp), %rdx
00007fff2a627eec	leaq	0x80(%r14), %rbx
00007fff2a627ef3	leaq	-0x2f0(%rbp), %rdi
00007fff2a627efa	movq	-0x250(%rbp), %rsi
00007fff2a627f01	movq	%rdx, -0x2f8(%rbp)
00007fff2a627f08	movq	%rbx, %rcx
00007fff2a627f0b	callq	0x7fff2a6284a4
00007fff2a627f10	movl	%eax, -0x244(%rbp)
00007fff2a627f16	testl	%eax, %eax
00007fff2a627f18	je	0x7fff2a628460
00007fff2a627f1e	addq	$0x178, %r13                    ## imm = 0x178
00007fff2a627f25	leaq	-0x410(%rbp), %rcx
00007fff2a627f2c	leaq	-0x258(%rbp), %r8
00007fff2a627f33	movl	$0x10, %edx
00007fff2a627f38	movl	%r12d, %edi
00007fff2a627f3b	movq	%r13, %rsi
00007fff2a627f3e	callq	0x7fff2a62ad60                  ## symbol stub for: _mach_vm_read_overwrite
00007fff2a627f43	testl	%eax, %eax
00007fff2a627f45	jne	0x7fff2a628424
00007fff2a627f4b	cmpq	$0x10, -0x258(%rbp)
00007fff2a627f53	jne	0x7fff2a628424
00007fff2a627f59	addq	$0x1fffef, %r15                 ## imm = 0x1FFFEF
00007fff2a627f60	movq	-0x2f8(%rbp), %rax
00007fff2a627f67	andq	%r15, %rax
00007fff2a627f6a	cmpq	%rax, -0x410(%rbp)
00007fff2a627f71	jne	0x7fff2a628424
00007fff2a627f77	movq	-0x408(%rbp), %rax
00007fff2a627f7e	movq	%rax, (%rbx)
00007fff2a627f81	jmp	0x7fff2a628456
00007fff2a627f86	movl	$0x4, %r13d
00007fff2a627f8c	movq	0x5d22022d(%rip), %rax          ## literal pool symbol address: ___stack_chk_guard
00007fff2a627f93	movq	(%rax), %rax
00007fff2a627f96	cmpq	-0x30(%rbp), %rax
00007fff2a627f9a	jne	0x7fff2a62849f
00007fff2a627fa0	movl	%r13d, %eax
00007fff2a627fa3	addq	$0x3e8, %rsp                    ## imm = 0x3E8
00007fff2a627faa	popq	%rbx
00007fff2a627fab	popq	%r12
00007fff2a627fad	popq	%r13
00007fff2a627faf	popq	%r14
00007fff2a627fb1	popq	%r15
00007fff2a627fb3	popq	%rbp
00007fff2a627fb4	retq
00007fff2a627fb5	cmpl	$0x83, (%r8)
00007fff2a627fbc	movl	$0x4, %r13d
00007fff2a627fc2	jb	0x7fff2a627f8c
00007fff2a627fc4	movl	$0x83, (%r8)
00007fff2a627fcb	leaq	-0x260(%rbp), %rcx
00007fff2a627fd2	movl	$0x44, (%rcx)
00007fff2a627fd8	leaq	-0x410(%rbp), %rdx
00007fff2a627fdf	movl	%ebx, %edi
00007fff2a627fe1	movl	$0x6, %esi
00007fff2a627fe6	callq	0x7fff2a62add8                  ## symbol stub for: _thread_get_state
00007fff2a627feb	movl	%eax, %r13d
00007fff2a627fee	testl	%eax, %eax
00007fff2a627ff0	jne	0x7fff2a627f8c
00007fff2a627ff2	movq	-0x380(%rbp), %r15
00007fff2a627ff9	movl	$0x2e, %r13d
00007fff2a627fff	testb	$0x1, %r15b
00007fff2a628003	jne	0x7fff2a627f8c
00007fff2a628005	leaq	-0x244(%rbp), %rcx
00007fff2a62800c	movl	$0x84, (%rcx)
00007fff2a628012	leaq	-0x240(%rbp), %rdx
00007fff2a628019	movl	%ebx, %edi
00007fff2a62801b	movl	$0x11, %esi
00007fff2a628020	callq	0x7fff2a62add8                  ## symbol stub for: _thread_get_state
00007fff2a628025	movl	%eax, %r13d
00007fff2a628028	testl	%eax, %eax
00007fff2a62802a	jne	0x7fff2a627f8c
00007fff2a628030	btrq	$0x3f, %r15
00007fff2a628035	addq	$0xd0, %r15
00007fff2a62803c	leaq	-0x2f0(%rbp), %rcx
00007fff2a628043	leaq	-0x258(%rbp), %rbx
00007fff2a62804a	movl	$0x56, %edx
00007fff2a62804f	movl	%r12d, %edi
00007fff2a628052	movq	%r15, %rsi
00007fff2a628055	movq	%rbx, %r8
00007fff2a628058	callq	0x7fff2a62ad60                  ## symbol stub for: _mach_vm_read_overwrite
00007fff2a62805d	cmpq	$0x56, (%rbx)
00007fff2a628061	movl	$0x5, %r13d
00007fff2a628067	cmovel	%eax, %r13d
00007fff2a62806b	testl	%r13d, %r13d
00007fff2a62806e	jne	0x7fff2a627f8c
00007fff2a628074	leaq	0xa8(%r14), %rdi
00007fff2a62807b	leaq	-0x240(%rbp), %rbx
00007fff2a628082	movl	$0x100, %edx                    ## imm = 0x100
00007fff2a628087	movq	%rbx, %rsi
00007fff2a62808a	callq	0x7fff2a62ad72                  ## symbol stub for: _memcpy
00007fff2a62808f	movl	0x200(%rbx), %eax
00007fff2a628095	movl	0x204(%rbx), %ecx
00007fff2a62809b	movl	%ecx, %edx
00007fff2a62809d	shrl	$0x15, %edx
00007fff2a6280a0	andl	$0x2, %edx
00007fff2a6280a3	movl	%ecx, %esi
00007fff2a6280a5	shrl	$0x17, %esi
00007fff2a6280a8	andl	$0x1, %esi
00007fff2a6280ab	orl	%edx, %esi
00007fff2a6280ad	movl	%eax, %edx
00007fff2a6280af	andl	$0x1, %edx
00007fff2a6280b2	shll	$0xd, %esi
00007fff2a6280b5	andl	$0x1e, %ecx
00007fff2a6280b8	shrl	$0x6, %eax
00007fff2a6280bb	andl	$0x2, %eax
00007fff2a6280be	leal	(%rdx,%rcx,2), %ecx
00007fff2a6280c1	orl	%eax, %ecx
00007fff2a6280c3	leal	0x1f80(%rsi,%rcx), %eax
00007fff2a6280ca	movl	%eax, 0x20(%r14)
00007fff2a6280ce	movl	$0xffff, 0x24(%r14)             ## imm = 0xFFFF
00007fff2a6280d6	movzwl	-0x2e2(%rbp), %eax
00007fff2a6280dd	movq	-0x2ea(%rbp), %rcx
00007fff2a6280e4	movq	%rax, 0x30(%r14)
00007fff2a6280e8	movq	%rcx, 0x28(%r14)
00007fff2a6280ec	movzwl	-0x2d8(%rbp), %eax
00007fff2a6280f3	movq	-0x2e0(%rbp), %rcx
00007fff2a6280fa	movq	%rax, 0x40(%r14)
00007fff2a6280fe	movq	%rcx, 0x38(%r14)
00007fff2a628102	movzwl	-0x2ce(%rbp), %eax
00007fff2a628109	movq	-0x2d6(%rbp), %rcx
00007fff2a628110	movq	%rax, 0x50(%r14)
00007fff2a628114	movq	%rcx, 0x48(%r14)
00007fff2a628118	movzwl	-0x2c4(%rbp), %eax
00007fff2a62811f	movq	-0x2cc(%rbp), %rcx
00007fff2a628126	movq	%rax, 0x60(%r14)
00007fff2a62812a	movq	%rcx, 0x58(%r14)
00007fff2a62812e	movzwl	-0x2ba(%rbp), %eax
00007fff2a628135	movq	-0x2c2(%rbp), %rcx
00007fff2a62813c	movq	%rax, 0x70(%r14)
00007fff2a628140	movq	%rcx, 0x68(%r14)
00007fff2a628144	movzwl	-0x2b0(%rbp), %eax
00007fff2a62814b	movq	-0x2b8(%rbp), %rcx
00007fff2a628152	movq	%rax, 0x80(%r14)
00007fff2a628159	movq	%rcx, 0x78(%r14)
00007fff2a62815d	movzwl	-0x2a6(%rbp), %eax
00007fff2a628164	movq	-0x2ae(%rbp), %rcx
00007fff2a62816b	movq	%rax, 0x90(%r14)
00007fff2a628172	movq	%rcx, 0x88(%r14)
00007fff2a628179	movzwl	-0x29c(%rbp), %eax
00007fff2a628180	movq	-0x2a4(%rbp), %rcx
00007fff2a628187	movq	%rax, 0xa0(%r14)
00007fff2a62818e	movq	%rcx, 0x98(%r14)
00007fff2a628195	movzwl	-0x2f0(%rbp), %eax
00007fff2a62819c	movw	%ax, 0x8(%r14)
00007fff2a6281a1	movzwl	-0x2ee(%rbp), %eax
00007fff2a6281a8	movw	%ax, 0xa(%r14)
00007fff2a6281ad	movzwl	-0x2ec(%rbp), %eax
00007fff2a6281b4	movd	%eax, %xmm0
00007fff2a6281b8	pshufd	$0x0, %xmm0, %xmm3              ## xmm3 = xmm0[0,0,0,0]
00007fff2a6281bd	movdqa	0x2e8b(%rip), %xmm4
00007fff2a6281c5	pxor	%xmm0, %xmm0
00007fff2a6281c9	movl	$0x8, %eax
00007fff2a6281ce	movdqa	0x2e89(%rip), %xmm12
00007fff2a6281d7	movdqa	0x2e90(%rip), %xmm8
00007fff2a6281e0	movdqa	0x2e97(%rip), %xmm9
00007fff2a6281e9	movdqa	0x2e9e(%rip), %xmm10
00007fff2a6281f2	movdqa	0x2ea5(%rip), %xmm11
00007fff2a6281fb	movdqa	%xmm4, %xmm2
00007fff2a6281ff	paddd	%xmm4, %xmm2
00007fff2a628203	pshuflw	$0xfe, %xmm2, %xmm5             ## xmm5 = xmm2[2,3,3,3,4,5,6,7]
00007fff2a628208	movdqa	%xmm3, %xmm1
00007fff2a62820c	psrld	%xmm5, %xmm1
00007fff2a628210	pshufd	$0x4e, %xmm2, %xmm5             ## xmm5 = xmm2[2,3,0,1]
00007fff2a628215	pshuflw	$0xfe, %xmm5, %xmm7             ## xmm7 = xmm5[2,3,3,3,4,5,6,7]
00007fff2a62821a	movdqa	%xmm3, %xmm6
00007fff2a62821e	psrld	%xmm7, %xmm6
00007fff2a628222	pblendw	$0xf, %xmm1, %xmm6              ## xmm6 = xmm1[0,1,2,3],xmm6[4,5,6,7]
00007fff2a628228	pshuflw	$0x54, %xmm2, %xmm1             ## xmm1 = xmm2[0,1,1,1,4,5,6,7]
00007fff2a62822d	movdqa	%xmm3, %xmm2
00007fff2a628231	psrld	%xmm1, %xmm2
00007fff2a628235	pshuflw	$0x54, %xmm5, %xmm1             ## xmm1 = xmm5[0,1,1,1,4,5,6,7]
00007fff2a62823a	movdqa	%xmm3, %xmm5
00007fff2a62823e	psrld	%xmm1, %xmm5
00007fff2a628242	pblendw	$0xf, %xmm2, %xmm5              ## xmm5 = xmm2[0,1,2,3],xmm5[4,5,6,7]
00007fff2a628248	pblendw	$0xcc, %xmm6, %xmm5             ## xmm5 = xmm5[0,1],xmm6[2,3],xmm5[4,5],xmm6[6,7]
00007fff2a62824e	pand	%xmm12, %xmm5
00007fff2a628253	pcmpeqd	%xmm12, %xmm5
00007fff2a628258	pandn	%xmm8, %xmm5
00007fff2a62825d	movdqa	%xmm4, %xmm1
00007fff2a628261	pslld	$0x17, %xmm1
00007fff2a628266	paddd	%xmm9, %xmm1
00007fff2a62826b	cvttps2dq	%xmm1, %xmm1
00007fff2a62826f	pmulld	%xmm5, %xmm1
00007fff2a628274	pshufb	%xmm10, %xmm1
00007fff2a62827a	por	%xmm1, %xmm0
00007fff2a62827e	paddd	%xmm11, %xmm4
00007fff2a628283	addq	$-0x4, %rax
00007fff2a628287	jne	0x7fff2a6281fb
00007fff2a62828d	movdqa	%xmm0, %xmm1
00007fff2a628291	psrld	$0x10, %xmm1
00007fff2a628296	por	%xmm0, %xmm1
00007fff2a62829a	movdqa	%xmm1, %xmm0
00007fff2a62829e	psrlw	$0x8, %xmm0
00007fff2a6282a3	por	%xmm1, %xmm0
00007fff2a6282a7	pextrb	$0x0, %xmm0, 0xc(%r14)
00007fff2a6282af	movl	$0x0, 0x18(%r14)
00007fff2a6282b7	movw	$0x0, 0x1c(%r14)
00007fff2a6282be	movq	$0x0, 0xe(%r14)
00007fff2a6282c6	jmp	0x7fff2a627f8c
00007fff2a6282cb	movl	$0x5, -0x244(%rbp)
00007fff2a6282d5	jmp	0x7fff2a62847b
00007fff2a6282da	leaq	0x40(%r13), %rsi
00007fff2a6282de	leaq	-0x410(%rbp), %rcx
00007fff2a6282e5	leaq	-0x258(%rbp), %rbx
00007fff2a6282ec	movl	$0x90, %edx
00007fff2a6282f1	movl	%r12d, %edi
00007fff2a6282f4	movq	%rbx, %r8
00007fff2a6282f7	callq	0x7fff2a62ad60                  ## symbol stub for: _mach_vm_read_overwrite
00007fff2a6282fc	cmpq	$0x90, (%rbx)
00007fff2a628303	movl	$0x5, %r15d
00007fff2a628309	cmovnel	%r15d, %eax
00007fff2a62830d	movl	%eax, -0x244(%rbp)
00007fff2a628313	testl	%eax, %eax
00007fff2a628315	jne	0x7fff2a62847b
00007fff2a62831b	movq	-0x410(%rbp), %rax
00007fff2a628322	movq	%rax, (%r14)
00007fff2a628325	movups	-0x408(%rbp), %xmm0
00007fff2a62832c	movups	%xmm0, 0x10(%r14)
00007fff2a628331	movq	-0x3f8(%rbp), %rax
00007fff2a628338	movq	%rax, 0x8(%r14)
00007fff2a62833c	movdqu	-0x3f0(%rbp), %xmm0
00007fff2a628344	pshufd	$0x4e, %xmm0, %xmm0             ## xmm0 = xmm0[2,3,0,1]
00007fff2a628349	movdqu	%xmm0, 0x30(%r14)
00007fff2a62834f	movdqu	-0x3e0(%rbp), %xmm0
00007fff2a628357	pshufd	$0x4e, %xmm0, %xmm0             ## xmm0 = xmm0[2,3,0,1]
00007fff2a62835c	movdqu	%xmm0, 0x20(%r14)
00007fff2a628362	movq	-0x3d0(%rbp), %rax
00007fff2a628369	movq	-0x3c8(%rbp), %rcx
00007fff2a628370	movq	%rax, 0x40(%r14)
00007fff2a628374	movq	%rcx, 0x48(%r14)
00007fff2a628378	movq	-0x3c0(%rbp), %rax
00007fff2a62837f	movq	%rax, 0x50(%r14)
00007fff2a628383	movq	-0x3b8(%rbp), %rax
00007fff2a62838a	movq	%rax, 0x58(%r14)
00007fff2a62838e	movq	-0x3b0(%rbp), %rax
00007fff2a628395	movq	%rax, 0x60(%r14)
00007fff2a628399	movq	-0x3a8(%rbp), %rax
00007fff2a6283a0	movq	%rax, 0x68(%r14)
00007fff2a6283a4	movq	-0x3a0(%rbp), %rax
00007fff2a6283ab	movq	%rax, 0x70(%r14)
00007fff2a6283af	movq	-0x398(%rbp), %rax
00007fff2a6283b6	movq	%rax, 0x78(%r14)
00007fff2a6283ba	movq	-0x390(%rbp), %rdi
00007fff2a6283c1	movq	-0x388(%rbp), %rsi
00007fff2a6283c8	callq	0x7fff2a62abc0
00007fff2a6283cd	movq	%rax, 0x88(%r14)
00007fff2a6283d4	addq	$0x158, %r13                    ## imm = 0x158
00007fff2a6283db	leaq	-0x260(%rbp), %rcx
00007fff2a6283e2	leaq	-0x258(%rbp), %rbx
00007fff2a6283e9	movl	$0x8, %edx
00007fff2a6283ee	movl	%r12d, %edi
00007fff2a6283f1	movq	%r13, %rsi
00007fff2a6283f4	movq	%rbx, %r8
00007fff2a6283f7	callq	0x7fff2a62ad60                  ## symbol stub for: _mach_vm_read_overwrite
00007fff2a6283fc	cmpq	$0x8, (%rbx)
00007fff2a628400	cmovel	%eax, %r15d
00007fff2a628404	movl	%r15d, -0x244(%rbp)
00007fff2a62840b	testl	%r15d, %r15d
00007fff2a62840e	jne	0x7fff2a62847b
00007fff2a628410	movq	-0x260(%rbp), %rdx
00007fff2a628417	addq	$-0x4, %rdx
00007fff2a62841b	leaq	0x80(%r14), %rbx
00007fff2a628422	jmp	0x7fff2a62842f
00007fff2a628424	movq	-0x150(%rbp), %rdx
00007fff2a62842b	addq	$-0x4, %rdx
00007fff2a62842f	leaq	-0x2f0(%rbp), %rdi
00007fff2a628436	movq	-0x250(%rbp), %rsi
00007fff2a62843d	movq	%rbx, %rcx
00007fff2a628440	callq	0x7fff2a6284a4
00007fff2a628445	movl	%eax, -0x244(%rbp)
00007fff2a62844b	testl	%eax, %eax
00007fff2a62844d	je	0x7fff2a628460
00007fff2a62844f	movq	$-0x1, (%rbx)
00007fff2a628456	movl	$0x0, -0x244(%rbp)
00007fff2a628460	movq	$0x2b, 0x90(%r14)
00007fff2a62846b	xorl	%eax, %eax
00007fff2a62846d	movq	%rax, 0x98(%r14)
00007fff2a628474	movq	%rax, 0xa0(%r14)
00007fff2a62847b	movq	-0x250(%rbp), %rdi
00007fff2a628482	callq	0x7fff2a62ad12                  ## symbol stub for: __dyld_process_info_release
00007fff2a628487	movl	-0x244(%rbp), %r13d
00007fff2a62848e	leaq	-0x2f0(%rbp), %rdi
00007fff2a628495	callq	0x7fff2a626bf0
00007fff2a62849a	jmp	0x7fff2a627f8c
00007fff2a62849f	callq	0x7fff2a62acee                  ## symbol stub for: ___stack_chk_fail
00007fff2a6284a4	pushq	%rbp
00007fff2a6284a5	movq	%rsp, %rbp
00007fff2a6284a8	pushq	%r15
00007fff2a6284aa	pushq	%r14
00007fff2a6284ac	pushq	%r13
00007fff2a6284ae	pushq	%r12
00007fff2a6284b0	pushq	%rbx
00007fff2a6284b1	subq	$0x88, %rsp
00007fff2a6284b8	movq	%rcx, %r14
00007fff2a6284bb	movq	%rsi, %r12
00007fff2a6284be	movq	%rdi, %r15
00007fff2a6284c1	movq	0x5d21fcf8(%rip), %rax          ## literal pool symbol address: ___stack_chk_guard
00007fff2a6284c8	movq	(%rax), %rax
00007fff2a6284cb	movq	%rax, -0x30(%rbp)
00007fff2a6284cf	movabsq	$0x7fffffffffff, %rbx           ## imm = 0x7FFFFFFFFFFF
00007fff2a6284d9	andq	%rdx, %rbx
00007fff2a6284dc	leaq	-0x48(%rbp), %r13
00007fff2a6284e0	movq	%rsi, %rdi
00007fff2a6284e3	movq	%r13, %rsi
00007fff2a6284e6	callq	0x7fff2a62ad06                  ## symbol stub for: __dyld_process_info_get_aot_cache
00007fff2a6284eb	cmpq	0x10(%r13), %rbx
00007fff2a6284ef	jae	0x7fff2a62857b
00007fff2a6284f5	leaq	-0x68(%rbp), %r13
00007fff2a6284f9	movq	$0x0, (%r13)
00007fff2a628501	movq	%r13, 0x8(%r13)
00007fff2a628505	movabsq	$0x2000000000, %rax             ## imm = 0x2000000000
00007fff2a62850f	movq	%rax, 0x10(%r13)
00007fff2a628513	movb	$0x0, 0x18(%r13)
00007fff2a628518	movq	0x5d21fc91(%rip), %rax          ## literal pool symbol address: __NSConcreteStackBlock
00007fff2a62851f	leaq	-0xa8(%rbp), %rsi
00007fff2a628526	movq	%rax, (%rsi)
00007fff2a628529	movq	$0x42000000, 0x8(%rsi)          ## imm = 0x42000000
00007fff2a628531	leaq	0xc3(%rip), %rax
00007fff2a628538	movq	%rax, 0x10(%rsi)
00007fff2a62853c	leaq	0x5d21feed(%rip), %rax
00007fff2a628543	movq	%rax, 0x18(%rsi)
00007fff2a628547	movq	%rbx, 0x28(%rsi)
00007fff2a62854b	movq	%r15, 0x30(%rsi)
00007fff2a62854f	movq	%r14, 0x38(%rsi)
00007fff2a628553	movq	%r13, 0x20(%rsi)
00007fff2a628557	movq	%r12, %rdi
00007fff2a62855a	callq	0x7fff2a62ad00                  ## symbol stub for: __dyld_process_info_for_each_aot_image
00007fff2a62855f	movq	0x8(%r13), %rax
00007fff2a628563	movb	0x18(%rax), %bl
00007fff2a628566	movq	%r13, %rdi
00007fff2a628569	movl	$0x8, %esi
00007fff2a62856e	callq	0x7fff2a62aca0                  ## symbol stub for: __Block_object_dispose
00007fff2a628573	testb	%bl, %bl
00007fff2a628575	je	0x7fff2a6285cf
00007fff2a628577	xorl	%eax, %eax
00007fff2a628579	jmp	0x7fff2a6285d4
00007fff2a62857b	leaq	-0x68(%rbp), %r13
00007fff2a62857f	movq	%r12, %rdi
00007fff2a628582	movq	%r13, %rsi
00007fff2a628585	callq	0x7fff2a62ad0c                  ## symbol stub for: __dyld_process_info_get_cache
00007fff2a62858a	movq	0x10(%r13), %rsi
00007fff2a62858e	leaq	-0x48(%rbp), %r8
00007fff2a628592	movq	0x10(%r8), %rcx
00007fff2a628596	movq	%r15, %rdi
00007fff2a628599	movq	%r13, %rdx
00007fff2a62859c	callq	0x7fff2a626cb4
00007fff2a6285a1	cmpb	$0x0, 0x4(%r15)
00007fff2a6285a6	je	0x7fff2a6285cf
00007fff2a6285a8	cmpq	%rbx, 0x18(%r15)
00007fff2a6285ac	ja	0x7fff2a6285cf
00007fff2a6285ae	cmpq	%rbx, 0x20(%r15)
00007fff2a6285b2	jbe	0x7fff2a6285cf
00007fff2a6285b4	movq	%r15, %rdi
00007fff2a6285b7	movq	%rbx, %rsi
00007fff2a6285ba	movq	%r14, %rdx
00007fff2a6285bd	callq	0x7fff2a626ffc
00007fff2a6285c2	movl	%eax, %ecx
00007fff2a6285c4	movl	$0x5, %eax
00007fff2a6285c9	testb	%cl, %cl
00007fff2a6285cb	jne	0x7fff2a628577
00007fff2a6285cd	jmp	0x7fff2a6285d4
00007fff2a6285cf	movl	$0x5, %eax
00007fff2a6285d4	movq	0x5d21fbe5(%rip), %rcx          ## literal pool symbol address: ___stack_chk_guard
00007fff2a6285db	movq	(%rcx), %rcx
00007fff2a6285de	cmpq	-0x30(%rbp), %rcx
00007fff2a6285e2	jne	0x7fff2a6285f6
00007fff2a6285e4	addq	$0x88, %rsp
00007fff2a6285eb	popq	%rbx
00007fff2a6285ec	popq	%r12
00007fff2a6285ee	popq	%r13
00007fff2a6285f0	popq	%r14
00007fff2a6285f2	popq	%r15
00007fff2a6285f4	popq	%rbp
00007fff2a6285f5	retq
00007fff2a6285f6	callq	0x7fff2a62acee                  ## symbol stub for: ___stack_chk_fail
00007fff2a6285fb	pushq	%rbp
00007fff2a6285fc	movq	%rsp, %rbp
00007fff2a6285ff	pushq	%r14
00007fff2a628601	pushq	%rbx
00007fff2a628602	movq	%rdx, %rbx
00007fff2a628605	movq	%rsi, %r9
00007fff2a628608	movq	0x28(%rdi), %rsi
00007fff2a62860c	movq	%rsi, %rdx
00007fff2a62860f	movb	$0x1, %al
00007fff2a628611	subq	%rbx, %rdx
00007fff2a628614	jb	0x7fff2a628649
00007fff2a628616	addq	%rbx, %rcx
00007fff2a628619	cmpq	%rcx, %rsi
00007fff2a62861c	jae	0x7fff2a628649
00007fff2a62861e	movq	%rdi, %r14
00007fff2a628621	movq	0x30(%rdi), %rdi
00007fff2a628625	movq	0x38(%r14), %rax
00007fff2a628629	movq	%r8, %rsi
00007fff2a62862c	movq	%r9, %rcx
00007fff2a62862f	movq	%rax, %r8
00007fff2a628632	callq	_aot_get_x86_address
00007fff2a628637	testb	%al, %al
00007fff2a628639	je	0x7fff2a628647
00007fff2a62863b	movq	0x20(%r14), %rax
00007fff2a62863f	movq	0x8(%rax), %rax
00007fff2a628643	movb	$0x1, 0x18(%rax)
00007fff2a628647	xorl	%eax, %eax
00007fff2a628649	popq	%rbx
00007fff2a62864a	popq	%r14
00007fff2a62864c	popq	%rbp
00007fff2a62864d	retq
00007fff2a62864e	pushq	%rbp
00007fff2a62864f	movq	%rsp, %rbp
00007fff2a628652	addq	$0x20, %rdi
00007fff2a628656	movq	0x20(%rsi), %rsi
00007fff2a62865a	movl	$0x8, %edx
00007fff2a62865f	popq	%rbp
00007fff2a628660	jmp	0x7fff2a62ac9a                  ## symbol stub for: __Block_object_assign
00007fff2a628665	pushq	%rbp
00007fff2a628666	movq	%rsp, %rbp
00007fff2a628669	movq	0x20(%rdi), %rdi
00007fff2a62866d	movl	$0x8, %esi
00007fff2a628672	popq	%rbp
00007fff2a628673	jmp	0x7fff2a62aca0                  ## symbol stub for: __Block_object_dispose
_rosetta_get_x86_thread_state:
00007fff2a628678	pushq	%rbp
00007fff2a628679	movq	%rsp, %rbp
00007fff2a62867c	pushq	%rbx
00007fff2a62867d	subq	$0x98, %rsp
00007fff2a628684	movq	%rsi, %rbx
00007fff2a628687	movq	0xa0(%rbp), %rsi
00007fff2a62868e	movl	$0x4, %eax
00007fff2a628693	testb	$0x1, %sil
00007fff2a628697	jne	0x7fff2a6286ec
00007fff2a628699	testq	%rsi, %rsi
00007fff2a62869c	js	0x7fff2a6286f6
00007fff2a62869e	leaq	0x10(%rbp), %rax
00007fff2a6286a2	movl	$0x10, %ecx
00007fff2a6286a7	movq	%rbx, %rdi
00007fff2a6286aa	movq	%rax, %rsi
00007fff2a6286ad	rep		movsq	(%rsi), %es:(%rdi)
00007fff2a6286b0	movl	0x108(%rax), %edi
00007fff2a6286b6	movq	0x88(%rax), %rsi
00007fff2a6286bd	callq	0x7fff2a62abc0
00007fff2a6286c2	movq	%rax, 0x88(%rbx)
00007fff2a6286c9	xorl	%eax, %eax
00007fff2a6286cb	movq	%rax, 0x80(%rbx)
00007fff2a6286d2	movq	%rax, 0x90(%rbx)
00007fff2a6286d9	movq	%rax, 0x98(%rbx)
00007fff2a6286e0	movq	%rax, 0xa0(%rbx)
00007fff2a6286e7	movl	$0x1, %eax
00007fff2a6286ec	addq	$0x98, %rsp
00007fff2a6286f3	popq	%rbx
00007fff2a6286f4	popq	%rbp
00007fff2a6286f5	retq
00007fff2a6286f6	testl	%edi, %edi
00007fff2a6286f8	je	0x7fff2a62872a
00007fff2a6286fa	btrq	$0x3f, %rsi
00007fff2a6286ff	addq	$0x40, %rsi
00007fff2a628703	leaq	-0x10(%rbp), %r8
00007fff2a628707	movq	$0x0, (%r8)
00007fff2a62870e	leaq	-0xa0(%rbp), %rcx
00007fff2a628715	movl	$0x90, %edx
00007fff2a62871a	callq	0x7fff2a62ad60                  ## symbol stub for: _mach_vm_read_overwrite
00007fff2a62871f	testl	%eax, %eax
00007fff2a628721	je	0x7fff2a628731
00007fff2a628723	movl	$0x3, %eax
00007fff2a628728	jmp	0x7fff2a6286ec
00007fff2a62872a	movl	$0x2, %eax
00007fff2a62872f	jmp	0x7fff2a6286ec
00007fff2a628731	leaq	-0xa0(%rbp), %rax
00007fff2a628738	movl	$0x10, %ecx
00007fff2a62873d	movq	%rbx, %rdi
00007fff2a628740	movq	%rax, %rsi
00007fff2a628743	rep		movsq	(%rsi), %es:(%rdi)
00007fff2a628746	movq	0x80(%rax), %rdi
00007fff2a62874d	jmp	0x7fff2a6286b6
_oah_get_rflags:
00007fff2a628752	pushq	%rbp
00007fff2a628753	movq	%rsp, %rbp
00007fff2a628756	popq	%rbp
00007fff2a628757	jmp	0x7fff2a62abc0
_rosetta_get_rflags:
00007fff2a62875c	pushq	%rbp
00007fff2a62875d	movq	%rsp, %rbp
00007fff2a628760	popq	%rbp
00007fff2a628761	jmp	0x7fff2a62abc0
_oah_get_x86_thread_state:
00007fff2a628766	pushq	%rbp
00007fff2a628767	movq	%rsp, %rbp
00007fff2a62876a	popq	%rbp
00007fff2a62876b	jmp	_rosetta_get_x86_thread_state
_rosetta_thread_get_rip:
00007fff2a628770	pushq	%rbp
00007fff2a628771	movq	%rsp, %rbp
00007fff2a628774	movq	%rsi, %rdx
00007fff2a628777	movl	%edi, %esi
00007fff2a628779	movl	$0x7000005, %edi                ## imm = 0x7000005
00007fff2a62877e	xorl	%eax, %eax
00007fff2a628780	popq	%rbp
00007fff2a628781	jmp	0x7fff2a62adc0                  ## symbol stub for: _syscall
_rosetta_invalidate_translation:
00007fff2a628786	pushq	%rbp
00007fff2a628787	movq	%rsp, %rbp
00007fff2a62878a	movabsq	$0x7fffffe00017, %rax           ## imm = 0x7FFFFFE00017
00007fff2a628794	testb	$0x40, (%rax)
00007fff2a628797	jne	0x7fff2a62879d
00007fff2a628799	xorl	%eax, %eax
00007fff2a62879b	popq	%rbp
00007fff2a62879c	retq
00007fff2a62879d	movq	%rsi, %rdx
00007fff2a6287a0	movq	%rdi, %rsi
00007fff2a6287a3	movl	$0x7000000, %edi                ## imm = 0x7000000
00007fff2a6287a8	xorl	%eax, %eax
00007fff2a6287aa	popq	%rbp
00007fff2a6287ab	jmp	0x7fff2a62adc0                  ## symbol stub for: _syscall
_objc_thread_get_rip:
00007fff2a6287b0	pushq	%rbp
00007fff2a6287b1	movq	%rsp, %rbp
00007fff2a6287b4	movq	%rsi, %rdx
00007fff2a6287b7	movl	%edi, %esi
00007fff2a6287b9	movl	$0x7000005, %edi                ## imm = 0x7000005
00007fff2a6287be	xorl	%eax, %eax
00007fff2a6287c0	popq	%rbp
00007fff2a6287c1	jmp	0x7fff2a62adc0                  ## symbol stub for: _syscall
_oah_invalidate_translation:
00007fff2a6287c6	pushq	%rbp
00007fff2a6287c7	movq	%rsp, %rbp
00007fff2a6287ca	movabsq	$0x7fffffe00017, %rax           ## imm = 0x7FFFFFE00017
00007fff2a6287d4	testb	$0x40, (%rax)
00007fff2a6287d7	jne	0x7fff2a6287dd
00007fff2a6287d9	xorl	%eax, %eax
00007fff2a6287db	popq	%rbp
00007fff2a6287dc	retq
00007fff2a6287dd	movq	%rsi, %rdx
00007fff2a6287e0	movq	%rdi, %rsi
00007fff2a6287e3	movl	$0x7000000, %edi                ## imm = 0x7000000
00007fff2a6287e8	xorl	%eax, %eax
00007fff2a6287ea	popq	%rbp
00007fff2a6287eb	jmp	0x7fff2a62adc0                  ## symbol stub for: _syscall
00007fff2a6287f0	pushq	%rbp
00007fff2a6287f1	movq	%rsp, %rbp
00007fff2a6287f4	pushq	%r15
00007fff2a6287f6	pushq	%r14
00007fff2a6287f8	pushq	%r13
00007fff2a6287fa	pushq	%r12
00007fff2a6287fc	pushq	%rbx
00007fff2a6287fd	pushq	%rax
00007fff2a6287fe	movl	$0x10d0, %eax                   ## imm = 0x10D0
00007fff2a628803	callq	0x7fff2a62ac50
00007fff2a628808	subq	%rax, %rsp
00007fff2a62880b	movq	0x10d0(%rsp), %rax
00007fff2a628813	movq	%rcx, %r12
00007fff2a628816	movq	%rdx, %r14
00007fff2a628819	movq	%rsi, %r15
00007fff2a62881c	movq	%rdi, %r13
00007fff2a62881f	testb	%al, %al
00007fff2a628821	je	0x7fff2a62884c
00007fff2a628823	movaps	%xmm0, -0xb0(%rbp)
00007fff2a62882a	movaps	%xmm1, -0xa0(%rbp)
00007fff2a628831	movaps	%xmm2, -0x90(%rbp)
00007fff2a628838	movaps	%xmm3, -0x80(%rbp)
00007fff2a62883c	movaps	%xmm4, -0x70(%rbp)
00007fff2a628840	movaps	%xmm5, -0x60(%rbp)
00007fff2a628844	movaps	%xmm6, -0x50(%rbp)
00007fff2a628848	movaps	%xmm7, -0x40(%rbp)
00007fff2a62884c	leaq	-0xe0(%rbp), %rax
00007fff2a628853	movq	%r9, 0x28(%rax)
00007fff2a628857	leaq	-0x100(%rbp), %rcx
00007fff2a62885e	movq	%rax, 0x10(%rcx)
00007fff2a628862	leaq	0x10(%rbp), %rax
00007fff2a628866	movq	%rax, 0x8(%rcx)
00007fff2a62886a	movabsq	$0x3000000028, %rax             ## imm = 0x3000000028
00007fff2a628874	movq	%rax, (%rcx)
00007fff2a628877	leaq	-0x1100(%rbp), %rbx
00007fff2a62887e	movl	$0x1000, %esi                   ## imm = 0x1000
00007fff2a628883	movq	%rbx, %rdi
00007fff2a628886	movq	%r8, %rdx
00007fff2a628889	callq	0x7fff2a62adf0                  ## symbol stub for: _vsnprintf
00007fff2a62888e	leaq	0x2bf3(%rip), %rdi              ## literal pool for: "assertion failed [%s]: %s\n(%s:%zu %s)\n"
00007fff2a628895	movq	%r12, %rsi
00007fff2a628898	movq	%rbx, %rdx
00007fff2a62889b	movq	%r13, %rcx
00007fff2a62889e	movq	%r15, %r8
00007fff2a6288a1	movq	%r14, %r9
00007fff2a6288a4	xorl	%eax, %eax
00007fff2a6288a6	callq	0x7fff2a628afe
00007fff2a6288ab	nop
00007fff2a6288ac	pushq	%rbp
00007fff2a6288ad	movq	%rsp, %rbp
00007fff2a6288b0	movq	0x18(%rdi), %rdx
00007fff2a6288b4	cmpq	0x8(%rdi), %rdx
00007fff2a6288b8	jae	0x7fff2a6288e4
00007fff2a6288ba	movq	(%rdi), %rax
00007fff2a6288bd	movzbl	(%rax,%rdx), %eax
00007fff2a6288c1	movzbl	0x10(%rdi), %ecx
00007fff2a6288c5	leal	0x1(%rcx), %esi
00007fff2a6288c8	movb	%sil, 0x10(%rdi)
00007fff2a6288cc	cmpb	$0x8, %sil
00007fff2a6288d0	jne	0x7fff2a6288dd
00007fff2a6288d2	movb	$0x0, 0x10(%rdi)
00007fff2a6288d6	incq	%rdx
00007fff2a6288d9	movq	%rdx, 0x18(%rdi)
00007fff2a6288dd	shrl	%cl, %eax
00007fff2a6288df	andl	$0x1, %eax
00007fff2a6288e2	popq	%rbp
00007fff2a6288e3	retq
00007fff2a6288e4	leaq	0x2bdc(%rip), %rdi              ## literal pool for: "BitArray overflow"
00007fff2a6288eb	xorl	%eax, %eax
00007fff2a6288ed	callq	0x7fff2a628bb4
00007fff2a6288f2	pushq	%rbp
00007fff2a6288f3	movq	%rsp, %rbp
00007fff2a6288f6	pushq	%r15
00007fff2a6288f8	pushq	%r14
00007fff2a6288fa	pushq	%r13
00007fff2a6288fc	pushq	%r12
00007fff2a6288fe	pushq	%rbx
00007fff2a6288ff	subq	$0x18, %rsp
00007fff2a628903	movq	%rdx, %r15
00007fff2a628906	movq	%rsi, %r12
00007fff2a628909	movq	%rdi, %rbx
00007fff2a62890c	movzbl	0x2(%rdi), %esi
00007fff2a628910	movq	%r12, %rdi
00007fff2a628913	callq	0x7fff2a628aa4
00007fff2a628918	testl	%eax, %eax
00007fff2a62891a	je	0x7fff2a628943
00007fff2a62891c	movl	%eax, %r13d
00007fff2a62891f	movzbl	0x1(%rbx), %esi
00007fff2a628923	movq	%r12, %rdi
00007fff2a628926	callq	0x7fff2a628aa4
00007fff2a62892b	movl	%eax, %r14d
00007fff2a62892e	addl	(%r15), %r14d
00007fff2a628931	shll	$0x2, %r13d
00007fff2a628935	addl	0x4(%r15), %r13d
00007fff2a628939	xorl	%ecx, %ecx
00007fff2a62893b	xorl	%r15d, %r15d
00007fff2a62893e	jmp	0x7fff2a628a6c
00007fff2a628943	movq	%r15, -0x40(%rbp)
00007fff2a628947	movq	%rbx, -0x38(%rbp)
00007fff2a62894b	movzbl	0x2(%rbx), %esi
00007fff2a62894f	movq	%r12, %rdi
00007fff2a628952	callq	0x7fff2a628aa4
00007fff2a628957	xorl	%r15d, %r15d
00007fff2a62895a	cmpb	$0x4, %al
00007fff2a62895c	ja	0x7fff2a6289bc
00007fff2a62895e	movl	$0x1, %ebx
00007fff2a628963	movzbl	%al, %edx
00007fff2a628966	leaq	0x123(%rip), %rcx
00007fff2a62896d	movslq	(%rcx,%rdx,4), %rdx
00007fff2a628971	addq	%rcx, %rdx
00007fff2a628974	jmpq	*%rdx
00007fff2a628976	movq	%rax, -0x30(%rbp)
00007fff2a62897a	xorl	%ebx, %ebx
00007fff2a62897c	xorl	%r13d, %r13d
00007fff2a62897f	movq	%r12, %rdi
00007fff2a628982	callq	0x7fff2a6288ac
00007fff2a628987	movzbl	%al, %eax
00007fff2a62898a	movl	%ebx, %ecx
00007fff2a62898c	shll	%cl, %eax
00007fff2a62898e	orl	%eax, %r13d
00007fff2a628991	incl	%ebx
00007fff2a628993	cmpl	$0x20, %ebx
00007fff2a628996	jne	0x7fff2a62897f
00007fff2a628998	xorl	%ebx, %ebx
00007fff2a62899a	xorl	%r14d, %r14d
00007fff2a62899d	movq	%r12, %rdi
00007fff2a6289a0	callq	0x7fff2a6288ac
00007fff2a6289a5	movzbl	%al, %eax
00007fff2a6289a8	movl	%ebx, %ecx
00007fff2a6289aa	shll	%cl, %eax
00007fff2a6289ac	orl	%eax, %r14d
00007fff2a6289af	incl	%ebx
00007fff2a6289b1	cmpl	$0x20, %ebx
00007fff2a6289b4	jne	0x7fff2a62899d
00007fff2a6289b6	movq	-0x30(%rbp), %rax
00007fff2a6289ba	jmp	0x7fff2a6289bf
00007fff2a6289bc	xorl	%r13d, %r13d
00007fff2a6289bf	movl	$0x0, %ebx
00007fff2a6289c4	movl	$0x0, %ecx
00007fff2a6289c9	testb	%al, %al
00007fff2a6289cb	jne	0x7fff2a6289f3
00007fff2a6289cd	jmp	0x7fff2a628a5d
00007fff2a6289d2	movq	-0x38(%rbp), %rax
00007fff2a6289d6	movzbl	0x2(%rax), %esi
00007fff2a6289da	movq	%r12, %rdi
00007fff2a6289dd	callq	0x7fff2a628aa4
00007fff2a6289e2	movl	%eax, %r15d
00007fff2a6289e5	jmp	0x7fff2a6289f3
00007fff2a6289e7	movl	$0x2, %ebx
00007fff2a6289ec	jmp	0x7fff2a6289f3
00007fff2a6289ee	movl	$0x3, %ebx
00007fff2a6289f3	movl	%ebx, -0x30(%rbp)
00007fff2a6289f6	movq	-0x38(%rbp), %rbx
00007fff2a6289fa	movzbl	0x2(%rbx), %esi
00007fff2a6289fe	movq	%r12, %rdi
00007fff2a628a01	callq	0x7fff2a628aa4
00007fff2a628a06	testl	%eax, %eax
00007fff2a628a08	je	0x7fff2a628a1e
00007fff2a628a0a	movl	%eax, %r13d
00007fff2a628a0d	movzbl	0x1(%rbx), %esi
00007fff2a628a11	movq	%r12, %rdi
00007fff2a628a14	callq	0x7fff2a628aa4
00007fff2a628a19	movl	%eax, %r14d
00007fff2a628a1c	jmp	0x7fff2a628a5a
00007fff2a628a1e	xorl	%ebx, %ebx
00007fff2a628a20	xorl	%r13d, %r13d
00007fff2a628a23	movq	%r12, %rdi
00007fff2a628a26	callq	0x7fff2a6288ac
00007fff2a628a2b	movzbl	%al, %eax
00007fff2a628a2e	movl	%ebx, %ecx
00007fff2a628a30	shll	%cl, %eax
00007fff2a628a32	orl	%eax, %r13d
00007fff2a628a35	incl	%ebx
00007fff2a628a37	cmpl	$0x20, %ebx
00007fff2a628a3a	jne	0x7fff2a628a23
00007fff2a628a3c	xorl	%ebx, %ebx
00007fff2a628a3e	xorl	%r14d, %r14d
00007fff2a628a41	movq	%r12, %rdi
00007fff2a628a44	callq	0x7fff2a6288ac
00007fff2a628a49	movzbl	%al, %eax
00007fff2a628a4c	movl	%ebx, %ecx
00007fff2a628a4e	shll	%cl, %eax
00007fff2a628a50	orl	%eax, %r14d
00007fff2a628a53	incl	%ebx
00007fff2a628a55	cmpl	$0x20, %ebx
00007fff2a628a58	jne	0x7fff2a628a41
00007fff2a628a5a	movl	-0x30(%rbp), %ecx
00007fff2a628a5d	shll	$0x2, %r13d
00007fff2a628a61	movq	-0x40(%rbp), %rax
00007fff2a628a65	addl	(%rax), %r14d
00007fff2a628a68	addl	0x4(%rax), %r13d
00007fff2a628a6c	shlq	$0x20, %r13
00007fff2a628a70	movl	%r14d, %eax
00007fff2a628a73	orq	%r13, %rax
00007fff2a628a76	shll	$0x8, %r15d
00007fff2a628a7a	orl	%ecx, %r15d
00007fff2a628a7d	movzwl	%r15w, %edx
00007fff2a628a81	addq	$0x18, %rsp
00007fff2a628a85	popq	%rbx
00007fff2a628a86	popq	%r12
00007fff2a628a88	popq	%r13
00007fff2a628a8a	popq	%r14
00007fff2a628a8c	popq	%r15
00007fff2a628a8e	popq	%rbp
00007fff2a628a8f	retq
00007fff2a628a90	outb	%al, $0xfe
00007fff2a628a92	.byte 0xff #bad opcode
00007fff2a628a93	jmpq	*-0x1(%rbx)
00007fff2a628a96	.byte 0xff #bad opcode
00007fff2a628a97	incl	-0x1(%rdx)
00007fff2a628a9a	.byte 0xff #bad opcode
00007fff2a628a9b	callq	*-0x1(%rdi)
00007fff2a628a9e	.byte 0xff #bad opcode
00007fff2a628a9f	lcalll	*-0x1(%rsi)
00007fff2a628aa2	.byte 0xff #bad opcode
00007fff2a628aa3	callq	*0x48(%rbp)
00007fff2a628aa6	movl	%esp, %ebp
00007fff2a628aa8	pushq	%r15
00007fff2a628aaa	pushq	%r14
00007fff2a628aac	pushq	%r12
00007fff2a628aae	pushq	%rbx
00007fff2a628aaf	movl	%esi, %r15d
00007fff2a628ab2	movq	%rdi, %r14
00007fff2a628ab5	movl	$0xffffffff, %ebx               ## imm = 0xFFFFFFFF
00007fff2a628aba	movq	%r14, %rdi
00007fff2a628abd	callq	0x7fff2a6288ac
00007fff2a628ac2	incl	%ebx
00007fff2a628ac4	testb	%al, %al
00007fff2a628ac6	jne	0x7fff2a628aba
00007fff2a628ac8	movl	%r15d, %ecx
00007fff2a628acb	shll	%cl, %ebx
00007fff2a628acd	testb	%r15b, %r15b
00007fff2a628ad0	je	0x7fff2a628af3
00007fff2a628ad2	movzbl	%r15b, %r12d
00007fff2a628ad6	xorl	%r15d, %r15d
00007fff2a628ad9	movq	%r14, %rdi
00007fff2a628adc	callq	0x7fff2a6288ac
00007fff2a628ae1	movzbl	%al, %eax
00007fff2a628ae4	movl	%r15d, %ecx
00007fff2a628ae7	shll	%cl, %eax
00007fff2a628ae9	orl	%eax, %ebx
00007fff2a628aeb	incl	%r15d
00007fff2a628aee	cmpl	%r15d, %r12d
00007fff2a628af1	jne	0x7fff2a628ad9
00007fff2a628af3	movl	%ebx, %eax
00007fff2a628af5	popq	%rbx
00007fff2a628af6	popq	%r12
00007fff2a628af8	popq	%r14
00007fff2a628afa	popq	%r15
00007fff2a628afc	popq	%rbp
00007fff2a628afd	retq
00007fff2a628afe	pushq	%rbp
00007fff2a628aff	movq	%rsp, %rbp
00007fff2a628b02	pushq	%rbx
00007fff2a628b03	pushq	%rax
00007fff2a628b04	movl	$0x10d0, %eax                   ## imm = 0x10D0
00007fff2a628b09	callq	0x7fff2a62ac50
00007fff2a628b0e	subq	%rax, %rsp
00007fff2a628b11	movq	0x10d0(%rsp), %rax
00007fff2a628b19	movq	%rdi, %r10
00007fff2a628b1c	testb	%al, %al
00007fff2a628b1e	je	0x7fff2a628b43
00007fff2a628b20	movaps	%xmm0, -0x90(%rbp)
00007fff2a628b27	movaps	%xmm1, -0x80(%rbp)
00007fff2a628b2b	movaps	%xmm2, -0x70(%rbp)
00007fff2a628b2f	movaps	%xmm3, -0x60(%rbp)
00007fff2a628b33	movaps	%xmm4, -0x50(%rbp)
00007fff2a628b37	movaps	%xmm5, -0x40(%rbp)
00007fff2a628b3b	movaps	%xmm6, -0x30(%rbp)
00007fff2a628b3f	movaps	%xmm7, -0x20(%rbp)
00007fff2a628b43	leaq	-0xc0(%rbp), %rax
00007fff2a628b4a	movq	%rsi, 0x8(%rax)
00007fff2a628b4e	movq	%rdx, 0x10(%rax)
00007fff2a628b52	movq	%rcx, 0x18(%rax)
00007fff2a628b56	movq	%r8, 0x20(%rax)
00007fff2a628b5a	movq	%r9, 0x28(%rax)
00007fff2a628b5e	leaq	-0xe0(%rbp), %rcx
00007fff2a628b65	movq	%rax, 0x10(%rcx)
00007fff2a628b69	leaq	0x10(%rbp), %rax
00007fff2a628b6d	movq	%rax, 0x8(%rcx)
00007fff2a628b71	movabsq	$0x3000000008, %rax             ## imm = 0x3000000008
00007fff2a628b7b	movq	%rax, (%rcx)
00007fff2a628b7e	leaq	-0x10e0(%rbp), %rbx
00007fff2a628b85	movl	$0x1000, %esi                   ## imm = 0x1000
00007fff2a628b8a	movq	%rbx, %rdi
00007fff2a628b8d	movq	%r10, %rdx
00007fff2a628b90	callq	0x7fff2a62adf0                  ## symbol stub for: _vsnprintf
00007fff2a628b95	leaq	0x2a45(%rip), %rsi              ## literal pool for: "%s"
00007fff2a628b9c	movl	$0x2, %edi
00007fff2a628ba1	movq	%rbx, %rdx
00007fff2a628ba4	xorl	%eax, %eax
00007fff2a628ba6	callq	0x7fff2a62ad2a                  ## symbol stub for: _dprintf
00007fff2a628bab	movq	%rbx, ___crashreporter_info__(%rip)
00007fff2a628bb2	ud2
00007fff2a628bb4	pushq	%rbp
00007fff2a628bb5	movq	%rsp, %rbp
00007fff2a628bb8	pushq	%rbx
00007fff2a628bb9	pushq	%rax
00007fff2a628bba	movl	$0x10d0, %eax                   ## imm = 0x10D0
00007fff2a628bbf	callq	0x7fff2a62ac50
00007fff2a628bc4	subq	%rax, %rsp
00007fff2a628bc7	movq	0x10d0(%rsp), %rax
00007fff2a628bcf	movq	%rdi, %r10
00007fff2a628bd2	testb	%al, %al
00007fff2a628bd4	je	0x7fff2a628bf9
00007fff2a628bd6	movaps	%xmm0, -0x90(%rbp)
00007fff2a628bdd	movaps	%xmm1, -0x80(%rbp)
00007fff2a628be1	movaps	%xmm2, -0x70(%rbp)
00007fff2a628be5	movaps	%xmm3, -0x60(%rbp)
00007fff2a628be9	movaps	%xmm4, -0x50(%rbp)
00007fff2a628bed	movaps	%xmm5, -0x40(%rbp)
00007fff2a628bf1	movaps	%xmm6, -0x30(%rbp)
00007fff2a628bf5	movaps	%xmm7, -0x20(%rbp)
00007fff2a628bf9	leaq	-0xc0(%rbp), %rax
00007fff2a628c00	movq	%rsi, 0x8(%rax)
00007fff2a628c04	movq	%rdx, 0x10(%rax)
00007fff2a628c08	movq	%rcx, 0x18(%rax)
00007fff2a628c0c	movq	%r8, 0x20(%rax)
00007fff2a628c10	movq	%r9, 0x28(%rax)
00007fff2a628c14	leaq	-0xe0(%rbp), %rcx
00007fff2a628c1b	movq	%rax, 0x10(%rcx)
00007fff2a628c1f	leaq	0x10(%rbp), %rax
00007fff2a628c23	movq	%rax, 0x8(%rcx)
00007fff2a628c27	movabsq	$0x3000000008, %rax             ## imm = 0x3000000008
00007fff2a628c31	movq	%rax, (%rcx)
00007fff2a628c34	leaq	-0x10e0(%rbp), %rbx
00007fff2a628c3b	movl	$0x1000, %esi                   ## imm = 0x1000
00007fff2a628c40	movq	%rbx, %rdi
00007fff2a628c43	movq	%r10, %rdx
00007fff2a628c46	callq	0x7fff2a62adf0                  ## symbol stub for: _vsnprintf
00007fff2a628c4b	leaq	0x2992(%rip), %rdi              ## literal pool for: "rosetta error: %s\n"
00007fff2a628c52	movq	%rbx, %rsi
00007fff2a628c55	xorl	%eax, %eax
00007fff2a628c57	callq	0x7fff2a628afe
00007fff2a628c5c	pushq	%rbp
00007fff2a628c5d	movq	%rsp, %rbp
00007fff2a628c60	testq	%rdx, %rdx
00007fff2a628c63	je	0x7fff2a628cd8
00007fff2a628c65	movzbl	(%rsi), %eax
00007fff2a628c68	cmpl	$0x5, %eax
00007fff2a628c6b	jae	0x7fff2a628ce6
00007fff2a628c6d	movb	%al, (%rdi)
00007fff2a628c6f	movq	%rsi, 0x8(%rdi)
00007fff2a628c73	movq	%rdx, 0x10(%rdi)
00007fff2a628c77	cmpb	$0x4, %al
00007fff2a628c79	ja	0x7fff2a628cd6
00007fff2a628c7b	movzbl	%al, %eax
00007fff2a628c7e	leaq	0x83(%rip), %rcx
00007fff2a628c85	movslq	(%rcx,%rax,4), %rax
00007fff2a628c89	addq	%rcx, %rax
00007fff2a628c8c	jmpq	*%rax
00007fff2a628c8e	cmpq	$0xf, %rdx
00007fff2a628c92	jbe	0x7fff2a628c9c
00007fff2a628c94	movl	0x8(%rsi), %eax
00007fff2a628c97	cmpq	%rdx, %rax
00007fff2a628c9a	jbe	0x7fff2a628cd6
00007fff2a628c9c	leaq	0x2b31(%rip), %rdi              ## literal pool for: "buffer is too small to be a TwoLevelOffsetMap"
00007fff2a628ca3	jmp	0x7fff2a628cdf
00007fff2a628ca5	cmpq	$0x1f, %rdx
00007fff2a628ca9	jbe	0x7fff2a628cb3
00007fff2a628cab	movl	0x10(%rsi), %eax
00007fff2a628cae	cmpq	%rdx, %rax
00007fff2a628cb1	jbe	0x7fff2a628cd6
00007fff2a628cb3	leaq	0x285f(%rip), %rdi              ## literal pool for: "buffer is too small to be a DeltaCodedOffsetMap"
00007fff2a628cba	jmp	0x7fff2a628cdf
00007fff2a628cbc	cmpq	$0x7, %rdx
00007fff2a628cc0	jbe	0x7fff2a628cf6
00007fff2a628cc2	movl	0x4(%rsi), %eax
00007fff2a628cc5	leaq	(%rax,%rax,2), %rax
00007fff2a628cc9	leaq	0x8(,%rax,4), %rax
00007fff2a628cd1	cmpq	%rdx, %rax
00007fff2a628cd4	jne	0x7fff2a628cff
00007fff2a628cd6	popq	%rbp
00007fff2a628cd7	retq
00007fff2a628cd8	leaq	0x2918(%rip), %rdi              ## literal pool for: "buffer is not a valid OffsetMappingTable 1"
00007fff2a628cdf	xorl	%eax, %eax
00007fff2a628ce1	callq	0x7fff2a628bb4
00007fff2a628ce6	leaq	0x2935(%rip), %rdi              ## literal pool for: "buffer is not a valid OffsetMappingTable 2 kind: %u"
00007fff2a628ced	movl	%eax, %esi
00007fff2a628cef	xorl	%eax, %eax
00007fff2a628cf1	callq	0x7fff2a628bb4
00007fff2a628cf6	leaq	0x29ab(%rip), %rdi              ## literal pool for: "buffer is too small to be an OffsetPairArray"
00007fff2a628cfd	jmp	0x7fff2a628cdf
00007fff2a628cff	leaq	0x29cf(%rip), %rdi              ## literal pool for: "buffer size does not match expected size"
00007fff2a628d06	jmp	0x7fff2a628cdf
00007fff2a628d08	movb	$-0x1, %ah
00007fff2a628d0a	.byte 0xff #bad opcode
00007fff2a628d0b	incl	-0x79000001(%rsi)
00007fff2a628d11	.byte 0xff #bad opcode
00007fff2a628d12	.byte 0xff #bad opcode
00007fff2a628d13	incl	-0x62000001(%rsi)
00007fff2a628d19	.byte 0xff #bad opcode
00007fff2a628d1a	.byte 0xff #bad opcode
00007fff2a628d1b	callq	*0x48(%rbp)
00007fff2a628d1e	movl	%esp, %ebp
00007fff2a628d20	pushq	%r15
00007fff2a628d22	pushq	%r14
00007fff2a628d24	pushq	%r13
00007fff2a628d26	pushq	%r12
00007fff2a628d28	pushq	%rbx
00007fff2a628d29	subq	$0x58, %rsp
00007fff2a628d2d	movl	%esi, %r12d
00007fff2a628d30	movb	(%rdi), %al
00007fff2a628d32	cmpb	$0x4, %al
00007fff2a628d34	je	0x7fff2a628d8a
00007fff2a628d36	testb	%al, %al
00007fff2a628d38	jne	0x7fff2a628fb5
00007fff2a628d3e	movq	0x8(%rdi), %rax
00007fff2a628d42	movl	0x4(%rax), %ecx
00007fff2a628d45	decl	%ecx
00007fff2a628d47	addq	$0x8, %rax
00007fff2a628d4b	xorl	%esi, %esi
00007fff2a628d4d	movq	%rcx, %rdi
00007fff2a628d50	movq	%rdi, %rdx
00007fff2a628d53	subq	%rsi, %rdx
00007fff2a628d56	shrq	%rdx
00007fff2a628d59	addq	%rsi, %rdx
00007fff2a628d5c	leaq	(%rdx,%rdx,2), %rbx
00007fff2a628d60	cmpl	%r12d, 0x4(%rax,%rbx,4)
00007fff2a628d65	ja	0x7fff2a628d78
00007fff2a628d67	jae	0x7fff2a628dee
00007fff2a628d6d	leaq	0x1(%rdx), %rsi
00007fff2a628d71	cmpq	%rsi, %rdi
00007fff2a628d74	jae	0x7fff2a628d50
00007fff2a628d76	jmp	0x7fff2a628dee
00007fff2a628d78	testq	%rdx, %rdx
00007fff2a628d7b	je	0x7fff2a628de2
00007fff2a628d7d	decq	%rdx
00007fff2a628d80	movq	%rdx, %rdi
00007fff2a628d83	cmpq	%rsi, %rdx
00007fff2a628d86	jae	0x7fff2a628d50
00007fff2a628d88	jmp	0x7fff2a628dee
00007fff2a628d8a	movq	0x8(%rdi), %rax
00007fff2a628d8e	movq	%rax, -0x48(%rbp)
00007fff2a628d92	movl	0x14(%rax), %esi
00007fff2a628d95	movl	0x18(%rax), %r14d
00007fff2a628d99	addq	%rax, %r14
00007fff2a628d9c	decl	%esi
00007fff2a628d9e	xorl	%eax, %eax
00007fff2a628da0	movq	%rsi, %rcx
00007fff2a628da3	movq	%rcx, %r13
00007fff2a628da6	subq	%rax, %r13
00007fff2a628da9	shrq	%r13
00007fff2a628dac	addq	%rax, %r13
00007fff2a628daf	movq	%r13, %rdx
00007fff2a628db2	shlq	$0x4, %rdx
00007fff2a628db6	cmpl	%r12d, 0x4(%r14,%rdx)
00007fff2a628dbb	ja	0x7fff2a628dca
00007fff2a628dbd	jae	0x7fff2a628ddd
00007fff2a628dbf	leaq	0x1(%r13), %rax
00007fff2a628dc3	cmpq	%rax, %rcx
00007fff2a628dc6	jae	0x7fff2a628da3
00007fff2a628dc8	jmp	0x7fff2a628e11
00007fff2a628dca	testq	%r13, %r13
00007fff2a628dcd	je	0x7fff2a628e04
00007fff2a628dcf	leaq	-0x1(%r13), %rcx
00007fff2a628dd3	cmpq	%rax, %rcx
00007fff2a628dd6	jae	0x7fff2a628da3
00007fff2a628dd8	decq	%r13
00007fff2a628ddb	jmp	0x7fff2a628e11
00007fff2a628ddd	movb	$0x1, %r9b
00007fff2a628de0	jmp	0x7fff2a628e14
00007fff2a628de2	cmpl	%r12d, 0x4(%rax)
00007fff2a628de6	ja	0x7fff2a629031
00007fff2a628dec	xorl	%edx, %edx
00007fff2a628dee	cmpq	%rcx, %rdx
00007fff2a628df1	je	0x7fff2a628fc3
00007fff2a628df7	leaq	(%rdx,%rdx,2), %rcx
00007fff2a628dfb	movq	(%rax,%rcx,4), %rax
00007fff2a628dff	jmp	0x7fff2a628fa6
00007fff2a628e04	cmpl	%r12d, 0x4(%r14)
00007fff2a628e08	ja	0x7fff2a629054
00007fff2a628e0e	xorl	%r13d, %r13d
00007fff2a628e11	xorl	%r9d, %r9d
00007fff2a628e14	movq	%r13, %rbx
00007fff2a628e17	shlq	$0x4, %rbx
00007fff2a628e1b	movq	-0x48(%rbp), %rdi
00007fff2a628e1f	movl	0x10(%rdi), %ecx
00007fff2a628e22	movl	0x1c(%rdi), %edx
00007fff2a628e25	subl	%edx, %ecx
00007fff2a628e27	addq	%rdi, %rdx
00007fff2a628e2a	movq	%rdx, -0x80(%rbp)
00007fff2a628e2e	movq	%rcx, -0x78(%rbp)
00007fff2a628e32	movl	0x8(%r14,%rbx), %ecx
00007fff2a628e37	movq	%rcx, -0x68(%rbp)
00007fff2a628e3b	movb	$0x0, -0x70(%rbp)
00007fff2a628e3f	movl	(%r14,%rbx), %edx
00007fff2a628e43	movl	%edx, -0x38(%rbp)
00007fff2a628e46	movl	0x4(%r14,%rbx), %ecx
00007fff2a628e4b	movl	%ecx, -0x34(%rbp)
00007fff2a628e4e	movw	$0x0, -0x30(%rbp)
00007fff2a628e54	testq	%rbx, %rbx
00007fff2a628e57	je	0x7fff2a628e60
00007fff2a628e59	xorl	%eax, %eax
00007fff2a628e5b	xorl	%r8d, %r8d
00007fff2a628e5e	jmp	0x7fff2a628e6e
00007fff2a628e60	movb	0x3(%rdi), %r8b
00007fff2a628e64	movb	%r8b, -0x30(%rbp)
00007fff2a628e68	movb	0x4(%rdi), %al
00007fff2a628e6b	movb	%al, -0x2f(%rbp)
00007fff2a628e6e	movl	0xc(%r14,%rbx), %edi
00007fff2a628e73	testb	%r9b, %r9b
00007fff2a628e76	je	0x7fff2a628eb2
00007fff2a628e78	leaq	(%r14,%rbx), %r15
00007fff2a628e7c	testl	%edi, %edi
00007fff2a628e7e	je	0x7fff2a628f53
00007fff2a628e84	movl	%eax, %r12d
00007fff2a628e87	leaq	0x4(%r14,%rbx), %r14
00007fff2a628e8c	leaq	-0x80(%rbp), %rsi
00007fff2a628e90	leaq	-0x38(%rbp), %rdx
00007fff2a628e94	movq	-0x48(%rbp), %rdi
00007fff2a628e98	movl	%r8d, %ebx
00007fff2a628e9b	callq	0x7fff2a6288f2
00007fff2a628ea0	testb	%bl, %bl
00007fff2a628ea2	je	0x7fff2a628ea7
00007fff2a628ea4	testb	%r12b, %r12b
00007fff2a628ea7	movl	(%r15), %edx
00007fff2a628eaa	movl	(%r14), %ecx
00007fff2a628ead	jmp	0x7fff2a628f9d
00007fff2a628eb2	testl	%edi, %edi
00007fff2a628eb4	je	0x7fff2a628f91
00007fff2a628eba	movl	%eax, -0x40(%rbp)
00007fff2a628ebd	movl	%r8d, %r15d
00007fff2a628ec0	movq	%rcx, -0x58(%rbp)
00007fff2a628ec4	movq	%rdx, -0x50(%rbp)
00007fff2a628ec8	movq	%rsi, -0x60(%rbp)
00007fff2a628ecc	leaq	-0x80(%rbp), %rsi
00007fff2a628ed0	leaq	-0x38(%rbp), %rdx
00007fff2a628ed4	movq	-0x48(%rbp), %rdi
00007fff2a628ed8	callq	0x7fff2a6288f2
00007fff2a628edd	movq	%rax, %rcx
00007fff2a628ee0	shrq	$0x20, %rcx
00007fff2a628ee4	cmpl	%r12d, %ecx
00007fff2a628ee7	ja	0x7fff2a628f40
00007fff2a628ee9	leaq	0xc(%r14,%rbx), %rsi
00007fff2a628eee	movq	%rsi, -0x40(%rbp)
00007fff2a628ef2	xorl	%ebx, %ebx
00007fff2a628ef4	movq	-0x48(%rbp), %r14
00007fff2a628ef8	movl	%edx, %r8d
00007fff2a628efb	movq	%rax, %rdx
00007fff2a628efe	movq	%rax, -0x38(%rbp)
00007fff2a628f02	movl	%r8d, -0x30(%rbp)
00007fff2a628f06	incl	%ebx
00007fff2a628f08	movq	-0x40(%rbp), %rax
00007fff2a628f0c	cmpl	(%rax), %ebx
00007fff2a628f0e	jae	0x7fff2a628f87
00007fff2a628f10	movl	%r8d, %r15d
00007fff2a628f13	movq	%rcx, -0x58(%rbp)
00007fff2a628f17	movq	%rdx, -0x50(%rbp)
00007fff2a628f1b	movq	%r14, %rdi
00007fff2a628f1e	leaq	-0x80(%rbp), %rsi
00007fff2a628f22	leaq	-0x38(%rbp), %rdx
00007fff2a628f26	callq	0x7fff2a6288f2
00007fff2a628f2b	movq	%rax, %rcx
00007fff2a628f2e	shrq	$0x20, %rcx
00007fff2a628f32	cmpl	%r12d, %ecx
00007fff2a628f35	jbe	0x7fff2a628ef8
00007fff2a628f37	movl	%r15d, %eax
00007fff2a628f3a	shrl	$0x8, %eax
00007fff2a628f3d	movl	%eax, -0x40(%rbp)
00007fff2a628f40	testb	%r15b, %r15b
00007fff2a628f43	je	0x7fff2a628f49
00007fff2a628f45	cmpb	$0x0, -0x40(%rbp)
00007fff2a628f49	movq	-0x50(%rbp), %rdx
00007fff2a628f4d	movq	-0x58(%rbp), %rcx
00007fff2a628f51	jmp	0x7fff2a628f9d
00007fff2a628f53	cmpq	%r14, %r15
00007fff2a628f56	je	0x7fff2a629009
00007fff2a628f5c	cmpq	%rsi, %r13
00007fff2a628f5f	jne	0x7fff2a628f9d
00007fff2a628f61	leaq	0x2547(%rip), %rdi              ## literal pool for: "DeltaCodedOffsetMap.cpp"
00007fff2a628f68	leaq	0x27ec(%rip), %rdx              ## literal pool for: "find_instruction_ranges"
00007fff2a628f6f	leaq	0x2612(%rip), %rcx              ## literal pool for: "entry != last_level1_entry"
00007fff2a628f76	leaq	0x2626(%rip), %r8               ## literal pool for: "cannot locate map entry for arm offset in DeltaCodedOffsetMap"
00007fff2a628f7d	movl	$0x129, %esi                    ## imm = 0x129
00007fff2a628f82	jmp	0x7fff2a62902a
00007fff2a628f87	movl	%r8d, %eax
00007fff2a628f8a	shrl	$0x8, %eax
00007fff2a628f8d	movq	-0x60(%rbp), %rsi
00007fff2a628f91	cmpq	%rsi, %r13
00007fff2a628f94	je	0x7fff2a628fe6
00007fff2a628f96	testb	%r8b, %r8b
00007fff2a628f99	je	0x7fff2a628f9d
00007fff2a628f9b	testb	%al, %al
00007fff2a628f9d	shlq	$0x20, %rcx
00007fff2a628fa1	movl	%edx, %eax
00007fff2a628fa3	orq	%rcx, %rax
00007fff2a628fa6	addq	$0x58, %rsp
00007fff2a628faa	popq	%rbx
00007fff2a628fab	popq	%r12
00007fff2a628fad	popq	%r13
00007fff2a628faf	popq	%r14
00007fff2a628fb1	popq	%r15
00007fff2a628fb3	popq	%rbp
00007fff2a628fb4	retq
00007fff2a628fb5	leaq	0x269a(%rip), %rdi              ## literal pool for: "find_instruction_ranges only supported by DeltaCodedOffsetMap and OffsetPairArray"
00007fff2a628fbc	xorl	%eax, %eax
00007fff2a628fbe	callq	0x7fff2a628bb4
00007fff2a628fc3	leaq	0x2734(%rip), %rdi              ## literal pool for: "OffsetPairArray.cpp"
00007fff2a628fca	leaq	0x278a(%rip), %rdx              ## literal pool for: "find_instruction_ranges"
00007fff2a628fd1	leaq	0x279b(%rip), %rcx              ## literal pool for: "entry_index != (_header.num_entries - 1)"
00007fff2a628fd8	leaq	0x27bd(%rip), %r8               ## literal pool for: "cannot locate map entry for arm offset in OffsetPairMap"
00007fff2a628fdf	movl	$0x6a, %esi
00007fff2a628fe4	jmp	0x7fff2a62902a
00007fff2a628fe6	leaq	0x24c2(%rip), %rdi              ## literal pool for: "DeltaCodedOffsetMap.cpp"
00007fff2a628fed	leaq	0x2767(%rip), %rdx              ## literal pool for: "find_instruction_ranges"
00007fff2a628ff4	leaq	0x258d(%rip), %rcx              ## literal pool for: "entry != last_level1_entry"
00007fff2a628ffb	leaq	0x25a1(%rip), %r8               ## literal pool for: "cannot locate map entry for arm offset in DeltaCodedOffsetMap"
00007fff2a629002	movl	$0x150, %esi                    ## imm = 0x150
00007fff2a629007	jmp	0x7fff2a62902a
00007fff2a629009	leaq	0x249f(%rip), %rdi              ## literal pool for: "DeltaCodedOffsetMap.cpp"
00007fff2a629010	leaq	0x2744(%rip), %rdx              ## literal pool for: "find_instruction_ranges"
00007fff2a629017	leaq	0x252b(%rip), %rcx              ## literal pool for: "entry != first_level1_entry"
00007fff2a62901e	leaq	0x2540(%rip), %r8               ## literal pool for: "first entry had no level 2 entries"
00007fff2a629025	movl	$0x127, %esi                    ## imm = 0x127
00007fff2a62902a	xorl	%eax, %eax
00007fff2a62902c	callq	0x7fff2a6287f0
00007fff2a629031	leaq	0x26c6(%rip), %rdi              ## literal pool for: "OffsetPairArray.cpp"
00007fff2a629038	leaq	0x26d3(%rip), %rdx              ## literal pool for: "find_x86_entry"
00007fff2a62903f	leaq	0x26db(%rip), %rcx              ## literal pool for: "middle > 0"
00007fff2a629046	leaq	0x26df(%rip), %r8               ## literal pool for: "offset tables are required to have a 0,0 entry"
00007fff2a62904d	movl	$0x50, %esi
00007fff2a629052	jmp	0x7fff2a62902a
00007fff2a629054	leaq	0x2454(%rip), %rdi              ## literal pool for: "DeltaCodedOffsetMap.cpp"
00007fff2a62905b	leaq	0x2477(%rip), %rdx              ## literal pool for: "entry_for_arm_offset"
00007fff2a629062	leaq	0x26b8(%rip), %rcx              ## literal pool for: "middle > 0"
00007fff2a629069	leaq	0x247e(%rip), %r8               ## literal pool for: "offset maps should always have a 0,0 entry"
00007fff2a629070	movl	$0x83, %esi
00007fff2a629075	jmp	0x7fff2a62902a
00007fff2a629077	pushq	%rbp
00007fff2a629078	movq	%rsp, %rbp
00007fff2a62907b	pushq	%r15
00007fff2a62907d	pushq	%r14
00007fff2a62907f	pushq	%r13
00007fff2a629081	pushq	%r12
00007fff2a629083	pushq	%rbx
00007fff2a629084	subq	$0x248, %rsp                    ## imm = 0x248
00007fff2a62908b	movq	%rcx, %r12
00007fff2a62908e	movq	%rdx, -0x138(%rbp)
00007fff2a629095	movl	%esi, %r13d
00007fff2a629098	movq	%rdi, %rbx
00007fff2a62909b	movq	0x5d21f11e(%rip), %rax          ## literal pool symbol address: ___stack_chk_guard
00007fff2a6290a2	movq	(%rax), %rax
00007fff2a6290a5	movq	%rax, -0x30(%rbp)
00007fff2a6290a9	leaq	-0xd0(%rbp), %rsi
00007fff2a6290b0	movl	$0x10, %edx
00007fff2a6290b5	movl	%r13d, %edi
00007fff2a6290b8	xorl	%ecx, %ecx
00007fff2a6290ba	callq	0x7fff2a62ad96                  ## symbol stub for: _pread
00007fff2a6290bf	movb	$0x4, %r14b
00007fff2a6290c2	cmpq	$0x10, %rax
00007fff2a6290c6	jne	0x7fff2a62911c
00007fff2a6290c8	movl	-0xd0(%rbp), %eax
00007fff2a6290ce	cmpl	$0xbebafeca, %eax               ## imm = 0xBEBAFECA
00007fff2a6290d3	je	0x7fff2a6290e1
00007fff2a6290d5	cmpl	$0xfeedfacf, %eax               ## imm = 0xFEEDFACF
00007fff2a6290da	jne	0x7fff2a6290e6
00007fff2a6290dc	movb	$0x1, %r14b
00007fff2a6290df	jmp	0x7fff2a62911c
00007fff2a6290e1	xorl	%r14d, %r14d
00007fff2a6290e4	jmp	0x7fff2a62911c
00007fff2a6290e6	movdqa	-0xd0(%rbp), %xmm0
00007fff2a6290ee	pxor	0x1fba(%rip), %xmm0
00007fff2a6290f6	ptest	%xmm0, %xmm0
00007fff2a6290fb	je	0x7fff2a629119
00007fff2a6290fd	movabsq	$0x6568636143746f41, %rax       ## imm = 0x6568636143746F41
00007fff2a629107	cmpq	%rax, -0xd0(%rbp)
00007fff2a62910e	sete	%al
00007fff2a629111	movb	$0x4, %r14b
00007fff2a629114	subb	%al, %r14b
00007fff2a629117	jmp	0x7fff2a62911c
00007fff2a629119	movb	$0x2, %r14b
00007fff2a62911c	movl	%r13d, %edi
00007fff2a62911f	xorl	%esi, %esi
00007fff2a629121	movl	$0x2, %edx
00007fff2a629126	callq	0x7fff2a62ad48                  ## symbol stub for: _lseek
00007fff2a62912b	testq	%rax, %rax
00007fff2a62912e	js	0x7fff2a629144
00007fff2a629130	movq	%rax, %r15
00007fff2a629133	leal	-0x2(%r14), %eax
00007fff2a629137	cmpb	$0x3, %al
00007fff2a629139	jae	0x7fff2a62917f
00007fff2a62913b	leaq	0x27a7(%rip), %rax              ## literal pool for: "unsupported image type"
00007fff2a629142	jmp	0x7fff2a62914b
00007fff2a629144	leaq	0x26b7(%rip), %rax              ## literal pool for: "unable to read input file"
00007fff2a62914b	movq	%rax, (%r12)
00007fff2a62914f	xorl	%eax, %eax
00007fff2a629151	movb	%al, (%rbx)
00007fff2a629153	movb	%al, 0x110(%rbx)
00007fff2a629159	movq	0x5d21f060(%rip), %rax          ## literal pool symbol address: ___stack_chk_guard
00007fff2a629160	movq	(%rax), %rax
00007fff2a629163	cmpq	-0x30(%rbp), %rax
00007fff2a629167	jne	0x7fff2a62aba3
00007fff2a62916d	addq	$0x248, %rsp                    ## imm = 0x248
00007fff2a629174	popq	%rbx
00007fff2a629175	popq	%r12
00007fff2a629177	popq	%r13
00007fff2a629179	popq	%r14
00007fff2a62917b	popq	%r15
00007fff2a62917d	popq	%rbp
00007fff2a62917e	retq
00007fff2a62917f	cmpb	$0x1, %r14b
00007fff2a629183	je	0x7fff2a6291dd
00007fff2a629185	testb	%r14b, %r14b
00007fff2a629188	jne	0x7fff2a6291f3
00007fff2a62918a	movl	$0x1000, %edx                   ## imm = 0x1000
00007fff2a62918f	movl	%r13d, %edi
00007fff2a629192	movq	-0x138(%rbp), %r14
00007fff2a629199	movq	%r14, %rsi
00007fff2a62919c	xorl	%ecx, %ecx
00007fff2a62919e	callq	0x7fff2a62ad96                  ## symbol stub for: _pread
00007fff2a6291a3	cmpq	$0x1000, %rax                   ## imm = 0x1000
00007fff2a6291a9	jne	0x7fff2a6292a4
00007fff2a6291af	movq	%rbx, -0x158(%rbp)
00007fff2a6291b6	movq	%r12, -0x128(%rbp)
00007fff2a6291bd	movl	0x4(%r14), %ecx
00007fff2a6291c1	movl	%ecx, %r12d
00007fff2a6291c4	bswapl	%r12d
00007fff2a6291c7	cmpl	$0xcd, %r12d
00007fff2a6291ce	jb	0x7fff2a6292c5
00007fff2a6291d4	leaq	0x265b(%rip), %rax              ## literal pool for: "too many fat archs"
00007fff2a6291db	jmp	0x7fff2a62922f
00007fff2a6291dd	movq	%rbx, -0x158(%rbp)
00007fff2a6291e4	movq	%r12, -0x128(%rbp)
00007fff2a6291eb	xorl	%r14d, %r14d
00007fff2a6291ee	movq	%r15, %rbx
00007fff2a6291f1	jmp	0x7fff2a629206
00007fff2a6291f3	movq	%rbx, -0x158(%rbp)
00007fff2a6291fa	movq	%r12, -0x128(%rbp)
00007fff2a629201	xorl	%ebx, %ebx
00007fff2a629203	xorl	%r14d, %r14d
00007fff2a629206	movl	$0x8000, %edx                   ## imm = 0x8000
00007fff2a62920b	movl	%r13d, %edi
00007fff2a62920e	movq	-0x138(%rbp), %r13
00007fff2a629215	movq	%r13, %rsi
00007fff2a629218	movq	%r14, %rcx
00007fff2a62921b	callq	0x7fff2a62ad96                  ## symbol stub for: _pread
00007fff2a629220	cmpq	$0xfff, %rax                    ## imm = 0xFFF
00007fff2a629226	jg	0x7fff2a62924f
00007fff2a629228	leaq	0x26d1(%rip), %rax              ## literal pool for: "can't read load commands"
00007fff2a62922f	movq	-0x128(%rbp), %rcx
00007fff2a629236	movq	%rax, (%rcx)
00007fff2a629239	xorl	%eax, %eax
00007fff2a62923b	movq	-0x158(%rbp), %rcx
00007fff2a629242	movb	%al, (%rcx)
00007fff2a629244	movb	%al, 0x110(%rcx)
00007fff2a62924a	jmp	0x7fff2a629159
00007fff2a62924f	movq	%r14, %rcx
00007fff2a629252	movq	%rbx, -0x218(%rbp)
00007fff2a629259	addq	%rbx, %rcx
00007fff2a62925c	movq	-0x128(%rbp), %rbx
00007fff2a629263	movq	-0x158(%rbp), %r12
00007fff2a62926a	jb	0x7fff2a629287
00007fff2a62926c	cmpq	%r15, %rcx
00007fff2a62926f	ja	0x7fff2a629287
00007fff2a629271	movq	-0x218(%rbp), %rcx
00007fff2a629278	shrq	$0x20, %rcx
00007fff2a62927c	je	0x7fff2a6292b0
00007fff2a62927e	leaq	0x26b0(%rip), %rax              ## literal pool for: "slice larger than 4 GB"
00007fff2a629285	jmp	0x7fff2a62928e
00007fff2a629287	leaq	0x268b(%rip), %rax              ## literal pool for: "slice not contained in file"
00007fff2a62928e	movq	%rax, (%rbx)
00007fff2a629291	xorl	%eax, %eax
00007fff2a629293	movb	%al, (%r12)
00007fff2a629297	movb	%al, 0x110(%r12)
00007fff2a62929f	jmp	0x7fff2a629159
00007fff2a6292a4	leaq	0x2571(%rip), %rax              ## literal pool for: "unable to read fat header"
00007fff2a6292ab	jmp	0x7fff2a62914b
00007fff2a6292b0	cmpl	$0x1f, %eax
00007fff2a6292b3	ja	0x7fff2a6293ed
00007fff2a6292b9	leaq	0x2710(%rip), %rax              ## literal pool for: "out-of-bounds Mach-O header"
00007fff2a6292c0	jmp	0x7fff2a62a002
00007fff2a6292c5	testl	%ecx, %ecx
00007fff2a6292c7	je	0x7fff2a6293e1
00007fff2a6292cd	movq	-0x138(%rbp), %rax
00007fff2a6292d4	leaq	0x8(%rax), %r14
00007fff2a6292d8	leal	(%r12,%r12,4), %ecx
00007fff2a6292dc	leal	0x8(,%rcx,4), %ebx
00007fff2a6292e3	xorl	%r9d, %r9d
00007fff2a6292e6	movl	$0x1, %r8d
00007fff2a6292ec	movl	%r9d, %r9d
00007fff2a6292ef	leaq	(%r9,%r9,4), %rdx
00007fff2a6292f3	movl	0x8(%r14,%rdx,4), %r11d
00007fff2a6292f8	bswapl	%r11d
00007fff2a6292fb	cmpl	%ebx, %r11d
00007fff2a6292fe	jb	0x7fff2a62a317
00007fff2a629304	movl	0xc(%r14,%rdx,4), %r10d
00007fff2a629309	bswapl	%r10d
00007fff2a62930c	addl	%r11d, %r10d
00007fff2a62930f	jb	0x7fff2a62a323
00007fff2a629315	movl	%r8d, %eax
00007fff2a629318	movzbl	0x13(%r14,%rdx,4), %ecx
00007fff2a62931e	movl	$0xffffffff, %r8d               ## imm = 0xFFFFFFFF
00007fff2a629324	shll	%cl, %r8d
00007fff2a629327	notl	%r8d
00007fff2a62932a	testl	%r8d, %r11d
00007fff2a62932d	jne	0x7fff2a62a32f
00007fff2a629333	movq	(%r14,%rdx,4), %xmm0            ## xmm0 = mem[0],zero
00007fff2a629339	movl	%eax, %r8d
00007fff2a62933c	movl	%eax, %ecx
00007fff2a62933e	cmpl	%r12d, %ecx
00007fff2a629341	jae	0x7fff2a629399
00007fff2a629343	movl	%ecx, %edx
00007fff2a629345	leaq	(%rdx,%rdx,4), %rdx
00007fff2a629349	movq	(%r14,%rdx,4), %xmm1            ## xmm1 = mem[0],zero
00007fff2a62934f	pcmpeqd	%xmm0, %xmm1
00007fff2a629353	pmovsxdq	%xmm1, %xmm1
00007fff2a629358	movmskpd	%xmm1, %edi
00007fff2a62935c	cmpb	$0x3, %dil
00007fff2a629360	je	0x7fff2a629fd3
00007fff2a629366	movl	0x8(%r14,%rdx,4), %edi
00007fff2a62936b	bswapl	%edi
00007fff2a62936d	movl	0xc(%r14,%rdx,4), %edx
00007fff2a629372	bswapl	%edx
00007fff2a629374	addl	%edi, %edx
00007fff2a629376	xorl	%eax, %eax
00007fff2a629378	cmpl	%r10d, %edi
00007fff2a62937b	setb	%al
00007fff2a62937e	xorl	%esi, %esi
00007fff2a629380	cmpl	%edx, %r11d
00007fff2a629383	setb	%sil
00007fff2a629387	cmpl	%edi, %r11d
00007fff2a62938a	cmovbel	%eax, %esi
00007fff2a62938d	incl	%ecx
00007fff2a62938f	testb	%sil, %sil
00007fff2a629392	je	0x7fff2a62933e
00007fff2a629394	jmp	0x7fff2a629fdc
00007fff2a629399	incl	%r9d
00007fff2a62939c	incl	%r8d
00007fff2a62939f	cmpl	%r12d, %r9d
00007fff2a6293a2	jne	0x7fff2a6292ec
00007fff2a6293a8	movl	%r12d, %eax
00007fff2a6293ab	movq	-0x138(%rbp), %rcx
00007fff2a6293b2	addq	$0x14, %rcx
00007fff2a6293b6	xorl	%r14d, %r14d
00007fff2a6293b9	xorl	%ebx, %ebx
00007fff2a6293bb	cmpl	$0xc000001, -0xc(%rcx)          ## imm = 0xC000001
00007fff2a6293c2	jne	0x7fff2a6293cf
00007fff2a6293c4	movl	-0x4(%rcx), %r14d
00007fff2a6293c8	movl	(%rcx), %ebx
00007fff2a6293ca	bswapl	%ebx
00007fff2a6293cc	bswapl	%r14d
00007fff2a6293cf	addq	$0x14, %rcx
00007fff2a6293d3	decq	%rax
00007fff2a6293d6	jne	0x7fff2a6293bb
00007fff2a6293d8	testq	%r14, %r14
00007fff2a6293db	jne	0x7fff2a629206
00007fff2a6293e1	leaq	0x24e6(%rip), %rax              ## literal pool for: "no valid slice for cputype"
00007fff2a6293e8	jmp	0x7fff2a62922f
00007fff2a6293ed	cmpl	$0xfeedfacf, (%r13)             ## imm = 0xFEEDFACF
00007fff2a6293f5	jne	0x7fff2a629ff2
00007fff2a6293fb	cmpl	$0x100000c, 0x4(%r13)           ## imm = 0x100000C
00007fff2a629403	jne	0x7fff2a629ffb
00007fff2a629409	movl	0xc(%r13), %edi
00007fff2a62940d	cmpl	$0x8, %edi
00007fff2a629410	ja	0x7fff2a62a33b
00007fff2a629416	movl	$0x1c4, %ecx                    ## imm = 0x1C4
00007fff2a62941b	btl	%edi, %ecx
00007fff2a62941e	jae	0x7fff2a62a33b
00007fff2a629424	movl	0x14(%r13), %ecx
00007fff2a629428	leaq	0x20(%rcx), %rdx
00007fff2a62942c	cmpl	%eax, %edx
00007fff2a62942e	movq	%rdx, -0x130(%rbp)
00007fff2a629435	ja	0x7fff2a62a2b6
00007fff2a62943b	cmpl	$-0x21, %ecx
00007fff2a62943e	ja	0x7fff2a62a2b6
00007fff2a629444	movl	%edx, %eax
00007fff2a629446	cmpl	$0x8000, %eax                   ## imm = 0x8000
00007fff2a62944b	ja	0x7fff2a62a2b6
00007fff2a629451	movq	%rcx, -0x270(%rbp)
00007fff2a629458	movl	%edi, %r8d
00007fff2a62945b	movl	0x10(%r13), %r9d
00007fff2a62945f	testq	%r9, %r9
00007fff2a629462	je	0x7fff2a62a347
00007fff2a629468	movl	$0x20, %esi
00007fff2a62946d	movq	$-0x1, -0x1a8(%rbp)
00007fff2a629478	movl	$0x0, %eax
00007fff2a62947d	movq	%rax, -0x230(%rbp)
00007fff2a629484	movl	$0x0, -0x194(%rbp)
00007fff2a62948e	movl	$0x0, %r13d
00007fff2a629494	movl	$0x0, %eax
00007fff2a629499	movq	%rax, -0x110(%rbp)
00007fff2a6294a0	movl	$0x0, %eax
00007fff2a6294a5	movq	%rax, -0x100(%rbp)
00007fff2a6294ac	movl	$0x0, %eax
00007fff2a6294b1	movq	%rax, -0xe0(%rbp)
00007fff2a6294b8	movl	$0x0, %eax
00007fff2a6294bd	movq	%rax, -0xf8(%rbp)
00007fff2a6294c4	movl	$0x0, %edi
00007fff2a6294c9	movl	$0x0, %eax
00007fff2a6294ce	movq	%rax, -0x1c0(%rbp)
00007fff2a6294d5	movl	$0x0, %r11d
00007fff2a6294db	movl	$0x0, %eax
00007fff2a6294e0	movq	%rax, -0x120(%rbp)
00007fff2a6294e7	movl	$0x0, -0x190(%rbp)
00007fff2a6294f1	movl	$0x0, %eax
00007fff2a6294f6	movq	%rax, -0x1e8(%rbp)
00007fff2a6294fd	movl	$0x0, %eax
00007fff2a629502	movq	%rax, -0x1e0(%rbp)
00007fff2a629509	movl	$0x0, %eax
00007fff2a62950e	movq	%rax, -0xf0(%rbp)
00007fff2a629515	movl	$0x0, %eax
00007fff2a62951a	movq	%rax, -0x1a0(%rbp)
00007fff2a629521	movl	$0x0, %eax
00007fff2a629526	movq	%rax, -0x210(%rbp)
00007fff2a62952d	movl	$0x0, %eax
00007fff2a629532	movq	%rax, -0x208(%rbp)
00007fff2a629539	movl	$0x0, %eax
00007fff2a62953e	movq	%rax, -0x1f0(%rbp)
00007fff2a629545	movl	$0x0, -0x1ac(%rbp)
00007fff2a62954f	movl	$0x0, %r15d
00007fff2a629555	movl	$0x0, %r10d
00007fff2a62955b	movl	$0x0, %eax
00007fff2a629560	movq	%rax, -0x170(%rbp)
00007fff2a629567	movl	$0x0, -0x18c(%rbp)
00007fff2a629571	movl	$0x0, -0xd4(%rbp)
00007fff2a62957b	xorl	%eax, %eax
00007fff2a62957d	movq	%rax, -0x200(%rbp)
00007fff2a629584	xorl	%eax, %eax
00007fff2a629586	movq	%rax, -0x118(%rbp)
00007fff2a62958d	movq	%r9, -0x160(%rbp)
00007fff2a629594	movq	%r14, -0xe8(%rbp)
00007fff2a62959b	movl	%r8d, -0xd8(%rbp)
00007fff2a6295a2	movq	%r10, -0x148(%rbp)
00007fff2a6295a9	movq	%r15, -0x150(%rbp)
00007fff2a6295b0	movq	%rsi, %rax
00007fff2a6295b3	addq	$0x8, %rax
00007fff2a6295b7	jb	0x7fff2a62a424
00007fff2a6295bd	movq	%rax, %rcx
00007fff2a6295c0	shrq	$0x20, %rcx
00007fff2a6295c4	jne	0x7fff2a62a424
00007fff2a6295ca	cmpl	%edx, %eax
00007fff2a6295cc	ja	0x7fff2a62a424
00007fff2a6295d2	movq	%rsi, %r15
00007fff2a6295d5	movq	-0x138(%rbp), %rax
00007fff2a6295dc	movl	0x4(%rax,%rsi), %eax
00007fff2a6295e0	cmpq	$0x8, %rax
00007fff2a6295e4	jb	0x7fff2a62a41b
00007fff2a6295ea	movq	%r15, %rsi
00007fff2a6295ed	addq	%rax, %rsi
00007fff2a6295f0	jb	0x7fff2a62a41b
00007fff2a6295f6	movq	%rsi, %rcx
00007fff2a6295f9	shrq	$0x20, %rcx
00007fff2a6295fd	jne	0x7fff2a62a41b
00007fff2a629603	cmpl	%edx, %esi
00007fff2a629605	ja	0x7fff2a62a41b
00007fff2a62960b	movq	-0x138(%rbp), %rcx
00007fff2a629612	leaq	(%rcx,%r15), %r14
00007fff2a629616	movl	(%r14), %ecx
00007fff2a629619	cmpl	$0x1a, %ecx
00007fff2a62961c	jg	0x7fff2a6296fe
00007fff2a629622	cmpl	$0x4, %ecx
00007fff2a629625	jle	0x7fff2a62979b
00007fff2a62962b	cmpl	$0x5, %ecx
00007fff2a62962e	je	0x7fff2a62988b
00007fff2a629634	cmpl	$0xe, %ecx
00007fff2a629637	je	0x7fff2a62990d
00007fff2a62963d	cmpl	$0x19, %ecx
00007fff2a629640	movq	-0x170(%rbp), %rcx
00007fff2a629647	jne	0x7fff2a629916
00007fff2a62964d	movq	%r13, -0x108(%rbp)
00007fff2a629654	movq	%rsi, -0x228(%rbp)
00007fff2a62965b	movq	%rbx, -0x128(%rbp)
00007fff2a629662	cmpl	$0x47, %eax
00007fff2a629665	jbe	0x7fff2a62a88d
00007fff2a62966b	movq	%r11, -0x168(%rbp)
00007fff2a629672	movq	%rcx, -0x170(%rbp)
00007fff2a629679	movl	0x40(%r14), %ecx
00007fff2a62967d	movq	%rcx, %r13
00007fff2a629680	shlq	$0x4, %rcx
00007fff2a629684	leaq	(%rcx,%rcx,4), %rcx
00007fff2a629688	movl	%ecx, %edx
00007fff2a62968a	cmpq	%rdx, %rcx
00007fff2a62968d	jne	0x7fff2a62a88d
00007fff2a629693	addq	$0x48, %rcx
00007fff2a629697	movl	%ecx, %edx
00007fff2a629699	andl	$-0x8, %edx
00007fff2a62969c	cmpq	%rdx, %rcx
00007fff2a62969f	jne	0x7fff2a62a88d
00007fff2a6296a5	cmpl	%ecx, %eax
00007fff2a6296a7	jne	0x7fff2a62a88d
00007fff2a6296ad	incl	%edi
00007fff2a6296af	movl	%edi, -0x174(%rbp)
00007fff2a6296b5	leaq	0x8(%r14), %rbx
00007fff2a6296b9	movq	%rbx, %rdi
00007fff2a6296bc	leaq	0x23e0(%rip), %rsi              ## literal pool for: "__PAGEZERO"
00007fff2a6296c3	callq	0x7fff2a62ada8                  ## symbol stub for: _strcmp
00007fff2a6296c8	testl	%eax, %eax
00007fff2a6296ca	je	0x7fff2a629a82
00007fff2a6296d0	movq	%rbx, -0x1f8(%rbp)
00007fff2a6296d7	movq	%rbx, %rdi
00007fff2a6296da	leaq	0x23cd(%rip), %rsi              ## literal pool for: "__LINKEDIT"
00007fff2a6296e1	callq	0x7fff2a62ada8                  ## symbol stub for: _strcmp
00007fff2a6296e6	testl	%eax, %eax
00007fff2a6296e8	je	0x7fff2a629ad3
00007fff2a6296ee	movq	0x18(%r14), %rcx
00007fff2a6296f2	movq	0x20(%r14), %rax
00007fff2a6296f6	addq	%rcx, %rax
00007fff2a6296f9	jmp	0x7fff2a629b17
00007fff2a6296fe	cmpl	$0x23, %ecx
00007fff2a629701	jle	0x7fff2a62982b
00007fff2a629707	cmpl	$0x24, %ecx
00007fff2a62970a	movl	-0xd8(%rbp), %r8d
00007fff2a629711	movq	-0x150(%rbp), %r15
00007fff2a629718	movq	-0x148(%rbp), %r10
00007fff2a62971f	je	0x7fff2a629937
00007fff2a629725	cmpl	$0x2a, %ecx
00007fff2a629728	je	0x7fff2a629951
00007fff2a62972e	cmpl	$0x32, %ecx
00007fff2a629731	jne	0x7fff2a629a0d
00007fff2a629737	cmpb	$0x0, -0xd4(%rbp)
00007fff2a62973e	jne	0x7fff2a629944
00007fff2a629744	cmpl	$0x17, %eax
00007fff2a629747	jbe	0x7fff2a62a9cc
00007fff2a62974d	movl	%edi, -0x174(%rbp)
00007fff2a629753	movl	0x8(%r14), %eax
00007fff2a629757	cmpl	$0x6, %eax
00007fff2a62975a	je	0x7fff2a629765
00007fff2a62975c	cmpl	$0x1, %eax
00007fff2a62975f	jne	0x7fff2a629fb0
00007fff2a629765	movl	0x10(%r14), %eax
00007fff2a629769	movl	%eax, %ecx
00007fff2a62976b	shrl	$0x10, %ecx
00007fff2a62976e	movl	%eax, %edi
00007fff2a629770	shll	$0x18, %edi
00007fff2a629773	shll	$0x8, %eax
00007fff2a629776	andl	$0xff0000, %eax                 ## imm = 0xFF0000
00007fff2a62977b	movl	%ecx, -0x18c(%rbp)
00007fff2a629781	orl	%ecx, %edi
00007fff2a629783	orl	%eax, %edi
00007fff2a629785	shrl	$0x8, %edi
00007fff2a629788	movl	%edi, -0x1cc(%rbp)
00007fff2a62978e	movb	$0x1, %al
00007fff2a629790	movl	%eax, -0xd4(%rbp)
00007fff2a629796	jmp	0x7fff2a629fba
00007fff2a62979b	cmpl	$0x80000028, %ecx               ## imm = 0x80000028
00007fff2a6297a1	je	0x7fff2a62998a
00007fff2a6297a7	cmpl	$0xcacaca01, %ecx               ## imm = 0xCACACA01
00007fff2a6297ad	movl	-0xd8(%rbp), %r8d
00007fff2a6297b4	movq	-0x150(%rbp), %r15
00007fff2a6297bb	movq	-0x148(%rbp), %r10
00007fff2a6297c2	jne	0x7fff2a629a0d
00007fff2a6297c8	cmpl	$0x20, %eax
00007fff2a6297cb	jne	0x7fff2a62a8a9
00007fff2a6297d1	movl	0x10(%r14), %eax
00007fff2a6297d5	movl	0x14(%r14), %ecx
00007fff2a6297d9	shlq	$0x5, %rcx
00007fff2a6297dd	addq	%rcx, %rax
00007fff2a6297e0	shrq	$0x20, %rax
00007fff2a6297e4	jne	0x7fff2a62a993
00007fff2a6297ea	movl	0x8(%r14), %eax
00007fff2a6297ee	addl	0xc(%r14), %eax
00007fff2a6297f2	jb	0x7fff2a62a9b7
00007fff2a6297f8	movq	0x18(%r14), %rax
00007fff2a6297fc	movq	%rax, -0x248(%rbp)
00007fff2a629803	movq	0x10(%r14), %rax
00007fff2a629807	movq	%rax, -0x250(%rbp)
00007fff2a62980e	movq	(%r14), %rax
00007fff2a629811	movq	0x8(%r14), %rcx
00007fff2a629815	movq	%rcx, -0x258(%rbp)
00007fff2a62981c	movq	%rax, -0x260(%rbp)
00007fff2a629823	movb	$0x1, %r13b
00007fff2a629826	jmp	0x7fff2a629a0d
00007fff2a62982b	cmpl	$0x1b, %ecx
00007fff2a62982e	movl	-0xd8(%rbp), %r8d
00007fff2a629835	movq	-0x150(%rbp), %r15
00007fff2a62983c	movq	-0x148(%rbp), %r10
00007fff2a629843	je	0x7fff2a6299d8
00007fff2a629849	cmpl	$0x1d, %ecx
00007fff2a62984c	jne	0x7fff2a629a0d
00007fff2a629852	testb	$0x1, -0xf8(%rbp)
00007fff2a629859	jne	0x7fff2a62a8b5
00007fff2a62985f	cmpl	$0x10, %eax
00007fff2a629862	jne	0x7fff2a62a99c
00007fff2a629868	movq	(%r14), %rax
00007fff2a62986b	movq	0x8(%r14), %rcx
00007fff2a62986f	movq	%rcx, -0x238(%rbp)
00007fff2a629876	movq	%rax, -0x240(%rbp)
00007fff2a62987d	movb	$0x1, %al
00007fff2a62987f	movq	%rax, -0xf8(%rbp)
00007fff2a629886	jmp	0x7fff2a629a0d
00007fff2a62988b	cmpb	$0x0, -0x100(%rbp)
00007fff2a629892	jne	0x7fff2a62a8c1
00007fff2a629898	addq	$0x90, %r15
00007fff2a62989f	movq	-0xe8(%rbp), %r14
00007fff2a6298a6	jb	0x7fff2a62a89d
00007fff2a6298ac	movq	%r15, %rax
00007fff2a6298af	shrq	$0x20, %rax
00007fff2a6298b3	jne	0x7fff2a62a89d
00007fff2a6298b9	movq	%r15, %rax
00007fff2a6298bc	shlq	$0x1f, %rax
00007fff2a6298c0	sarq	$0x1f, %rax
00007fff2a6298c4	addq	$0x8, %rax
00007fff2a6298c8	movq	%rax, %rcx
00007fff2a6298cb	shlq	$0x1f, %rcx
00007fff2a6298cf	sarq	$0x1f, %rcx
00007fff2a6298d3	cmpq	%rax, %rcx
00007fff2a6298d6	jne	0x7fff2a62a89d
00007fff2a6298dc	testq	%rcx, %rcx
00007fff2a6298df	js	0x7fff2a62a89d
00007fff2a6298e5	cmpl	%esi, %eax
00007fff2a6298e7	ja	0x7fff2a62a89d
00007fff2a6298ed	movl	%r15d, %eax
00007fff2a6298f0	movq	-0x138(%rbp), %rcx
00007fff2a6298f7	movq	(%rcx,%rax), %rax
00007fff2a6298fb	movq	%rax, -0x1b8(%rbp)
00007fff2a629902	movb	$0x2, %al
00007fff2a629904	movq	%rax, -0x100(%rbp)
00007fff2a62990b	jmp	0x7fff2a62991d
00007fff2a62990d	movb	$0x1, %al
00007fff2a62990f	movq	%rax, -0x110(%rbp)
00007fff2a629916	movq	-0xe8(%rbp), %r14
00007fff2a62991d	movl	-0xd8(%rbp), %r8d
00007fff2a629924	movq	-0x150(%rbp), %r15
00007fff2a62992b	movq	-0x148(%rbp), %r10
00007fff2a629932	jmp	0x7fff2a629a14
00007fff2a629937	cmpb	$0x0, -0xd4(%rbp)
00007fff2a62993e	je	0x7fff2a629a25
00007fff2a629944	movb	$0x1, %al
00007fff2a629946	movl	%eax, -0xd4(%rbp)
00007fff2a62994c	jmp	0x7fff2a629a0d
00007fff2a629951	cmpb	$0x0, -0x118(%rbp)
00007fff2a629958	jne	0x7fff2a62997c
00007fff2a62995a	cmpl	$0x10, %eax
00007fff2a62995d	jne	0x7fff2a62a9d5
00007fff2a629963	movq	0x8(%r14), %rax
00007fff2a629967	movq	%rax, %rcx
00007fff2a62996a	movq	%rax, -0x200(%rbp)
00007fff2a629971	shrq	$0x8, %rax
00007fff2a629975	movq	%rax, -0x268(%rbp)
00007fff2a62997c	movb	$0x1, %al
00007fff2a62997e	movq	%rax, -0x118(%rbp)
00007fff2a629985	jmp	0x7fff2a629a0d
00007fff2a62998a	movl	%edi, %ecx
00007fff2a62998c	cmpb	$0x0, -0x100(%rbp)
00007fff2a629993	movl	-0xd8(%rbp), %edi
00007fff2a629999	movq	-0x150(%rbp), %r15
00007fff2a6299a0	movq	-0x148(%rbp), %r10
00007fff2a6299a7	jne	0x7fff2a62a922
00007fff2a6299ad	movl	%edi, %r8d
00007fff2a6299b0	cmpl	$0x18, %eax
00007fff2a6299b3	jne	0x7fff2a62a9a5
00007fff2a6299b9	movq	0x8(%r14), %rax
00007fff2a6299bd	movq	%rax, -0x1b8(%rbp)
00007fff2a6299c4	movb	$0x1, %al
00007fff2a6299c6	movq	%rax, -0x100(%rbp)
00007fff2a6299cd	movq	-0xe8(%rbp), %r14
00007fff2a6299d4	movl	%ecx, %edi
00007fff2a6299d6	jmp	0x7fff2a629a14
00007fff2a6299d8	testb	$0x1, -0xe0(%rbp)
00007fff2a6299df	jne	0x7fff2a62a98a
00007fff2a6299e5	cmpl	$0x18, %eax
00007fff2a6299e8	jne	0x7fff2a62a9ae
00007fff2a6299ee	movq	0x8(%r14), %rax
00007fff2a6299f2	movq	0x10(%r14), %rcx
00007fff2a6299f6	movq	%rcx, -0xc8(%rbp)
00007fff2a6299fd	movq	%rax, -0xd0(%rbp)
00007fff2a629a04	movb	$0x1, %al
00007fff2a629a06	movq	%rax, -0xe0(%rbp)
00007fff2a629a0d	movq	-0xe8(%rbp), %r14
00007fff2a629a14	incq	%r11
00007fff2a629a17	cmpq	%r9, %r11
00007fff2a629a1a	jne	0x7fff2a6295a2
00007fff2a629a20	jmp	0x7fff2a62a485
00007fff2a629a25	movq	%r11, -0x168(%rbp)
00007fff2a629a2c	cmpl	$0x10, %eax
00007fff2a629a2f	jne	0x7fff2a62a9de
00007fff2a629a35	movq	%r13, %r11
00007fff2a629a38	movl	%edi, %r13d
00007fff2a629a3b	movl	0xc(%r14), %eax
00007fff2a629a3f	movl	%eax, %ecx
00007fff2a629a41	shrl	$0x10, %ecx
00007fff2a629a44	movl	%eax, %edi
00007fff2a629a46	shll	$0x18, %edi
00007fff2a629a49	shll	$0x8, %eax
00007fff2a629a4c	andl	$0xff0000, %eax                 ## imm = 0xFF0000
00007fff2a629a51	movl	%ecx, -0x18c(%rbp)
00007fff2a629a57	orl	%ecx, %edi
00007fff2a629a59	orl	%eax, %edi
00007fff2a629a5b	shrl	$0x8, %edi
00007fff2a629a5e	movl	%edi, -0x1cc(%rbp)
00007fff2a629a64	movb	$0x1, %al
00007fff2a629a66	movl	%eax, -0xd4(%rbp)
00007fff2a629a6c	movq	-0xe8(%rbp), %r14
00007fff2a629a73	movq	-0x160(%rbp), %r9
00007fff2a629a7a	movl	%r13d, %edi
00007fff2a629a7d	movq	%r11, %r13
00007fff2a629a80	jmp	0x7fff2a629ac7
00007fff2a629a82	movq	-0xe8(%rbp), %r14
00007fff2a629a89	movl	-0xd8(%rbp), %r8d
00007fff2a629a90	movq	-0x130(%rbp), %rdx
00007fff2a629a97	movq	-0x128(%rbp), %rbx
00007fff2a629a9e	movq	-0x150(%rbp), %r15
00007fff2a629aa5	movq	-0x148(%rbp), %r10
00007fff2a629aac	movq	-0x160(%rbp), %r9
00007fff2a629ab3	movl	-0x174(%rbp), %edi
00007fff2a629ab9	movq	-0x228(%rbp), %rsi
00007fff2a629ac0	movq	-0x108(%rbp), %r13
00007fff2a629ac7	movq	-0x168(%rbp), %r11
00007fff2a629ace	jmp	0x7fff2a629a14
00007fff2a629ad3	movq	-0x148(%rbp), %rax
00007fff2a629ada	cmpq	%rax, -0x150(%rbp)
00007fff2a629ae1	jne	0x7fff2a62ab97
00007fff2a629ae7	movq	0x18(%r14), %rcx
00007fff2a629aeb	movq	0x20(%r14), %rax
00007fff2a629aef	addq	%rcx, %rax
00007fff2a629af2	movl	0x28(%r14), %esi
00007fff2a629af6	movl	0x30(%r14), %edx
00007fff2a629afa	movl	%esi, -0x1ac(%rbp)
00007fff2a629b00	addl	%esi, %edx
00007fff2a629b02	movq	%rdx, -0x1f0(%rbp)
00007fff2a629b09	movq	%rcx, -0x148(%rbp)
00007fff2a629b10	movq	%rax, -0x150(%rbp)
00007fff2a629b17	movq	-0x1a8(%rbp), %rdx
00007fff2a629b1e	movq	-0x1c0(%rbp), %rsi
00007fff2a629b25	cmpq	%rdx, %rcx
00007fff2a629b28	cmovbq	%rcx, %rdx
00007fff2a629b2c	movq	%rdx, -0x1a8(%rbp)
00007fff2a629b33	cmpq	%rsi, %rax
00007fff2a629b36	cmovaq	%rax, %rsi
00007fff2a629b3a	movq	%rsi, -0x1c0(%rbp)
00007fff2a629b41	testl	%r13d, %r13d
00007fff2a629b44	je	0x7fff2a629e83
00007fff2a629b4a	movq	-0x138(%rbp), %rax
00007fff2a629b51	leaq	0x48(%r15,%rax), %r14
00007fff2a629b56	movl	$0x10, %edx
00007fff2a629b5b	movq	-0x1f8(%rbp), %rdi
00007fff2a629b62	leaq	0x1f6d(%rip), %rsi              ## literal pool for: "__DATA"
00007fff2a629b69	callq	0x7fff2a62adb4                  ## symbol stub for: _strncmp
00007fff2a629b6e	movl	%eax, -0x21c(%rbp)
00007fff2a629b74	xorl	%eax, %eax
00007fff2a629b76	movq	%rax, -0x1d8(%rbp)
00007fff2a629b7d	movq	-0xf0(%rbp), %rax
00007fff2a629b84	movl	%eax, -0xf0(%rbp)
00007fff2a629b8a	movq	-0x1a0(%rbp), %rax
00007fff2a629b91	movl	%eax, %ecx
00007fff2a629b93	movl	$0x0, -0x17c(%rbp)
00007fff2a629b9d	movl	$0x0, -0x178(%rbp)
00007fff2a629ba7	xorl	%eax, %eax
00007fff2a629ba9	movq	%rax, -0x1c8(%rbp)
00007fff2a629bb0	xorl	%eax, %eax
00007fff2a629bb2	movq	%rax, -0x188(%rbp)
00007fff2a629bb9	movq	-0x130(%rbp), %rdx
00007fff2a629bc0	movq	-0xe0(%rbp), %rax
00007fff2a629bc7	movq	-0x170(%rbp), %r8
00007fff2a629bce	movq	-0x128(%rbp), %rbx
00007fff2a629bd5	movl	%ecx, %esi
00007fff2a629bd7	movq	-0x160(%rbp), %r9
00007fff2a629bde	movq	-0x168(%rbp), %r11
00007fff2a629be5	movq	%r13, %rcx
00007fff2a629be8	cmpl	$0x0, -0x21c(%rbp)
00007fff2a629bef	jne	0x7fff2a629c88
00007fff2a629bf5	movl	%esi, %r15d
00007fff2a629bf8	movq	%rcx, -0x140(%rbp)
00007fff2a629bff	movq	%r8, %r13
00007fff2a629c02	movl	$0x10, %edx
00007fff2a629c07	movq	%r14, %rdi
00007fff2a629c0a	leaq	0x1ecc(%rip), %rsi              ## literal pool for: "__stubs_sh"
00007fff2a629c11	callq	0x7fff2a62adb4                  ## symbol stub for: _strncmp
00007fff2a629c16	testl	%eax, %eax
00007fff2a629c18	je	0x7fff2a629c46
00007fff2a629c1a	movl	$0x10, %edx
00007fff2a629c1f	movq	%r14, %rdi
00007fff2a629c22	leaq	0x1ebf(%rip), %rsi              ## literal pool for: "__all_image_info"
00007fff2a629c29	callq	0x7fff2a62adb4                  ## symbol stub for: _strncmp
00007fff2a629c2e	testl	%eax, %eax
00007fff2a629c30	jne	0x7fff2a629c5f
00007fff2a629c32	movq	0x20(%r14), %r8
00007fff2a629c36	movq	-0x130(%rbp), %rdx
00007fff2a629c3d	movq	-0xe0(%rbp), %rax
00007fff2a629c44	jmp	0x7fff2a629c70
00007fff2a629c46	movq	0x20(%r14), %rax
00007fff2a629c4a	movq	%rax, -0x208(%rbp)
00007fff2a629c51	movq	0x28(%r14), %rcx
00007fff2a629c55	addq	%rax, %rcx
00007fff2a629c58	movq	%rcx, -0x210(%rbp)
00007fff2a629c5f	movq	-0x130(%rbp), %rdx
00007fff2a629c66	movq	-0xe0(%rbp), %rax
00007fff2a629c6d	movq	%r13, %r8
00007fff2a629c70	movq	-0x160(%rbp), %r9
00007fff2a629c77	movq	-0x168(%rbp), %r11
00007fff2a629c7e	movq	-0x140(%rbp), %rcx
00007fff2a629c85	movl	%r15d, %esi
00007fff2a629c88	testb	$0x4, 0x41(%r14)
00007fff2a629c8d	jne	0x7fff2a629ca9
00007fff2a629c8f	movq	%r9, %r10
00007fff2a629c92	movq	-0x188(%rbp), %r15
00007fff2a629c99	movl	%esi, %edi
00007fff2a629c9b	movl	-0xf0(%rbp), %esi
00007fff2a629ca1	movl	%esi, %r13d
00007fff2a629ca4	jmp	0x7fff2a629dd9
00007fff2a629ca9	movq	%rcx, -0x140(%rbp)
00007fff2a629cb0	movl	0x30(%r14), %edx
00007fff2a629cb4	movq	0x28(%r14), %rax
00007fff2a629cb8	movq	%rdx, %r13
00007fff2a629cbb	addq	%rax, %r13
00007fff2a629cbe	jb	0x7fff2a62a5a0
00007fff2a629cc4	movq	%r13, %rcx
00007fff2a629cc7	shrq	$0x20, %rcx
00007fff2a629ccb	jne	0x7fff2a62a5a0
00007fff2a629cd1	movq	0x20(%r14), %rcx
00007fff2a629cd5	addq	%rcx, %rax
00007fff2a629cd8	jb	0x7fff2a62a5a0
00007fff2a629cde	movq	%rcx, %r15
00007fff2a629ce1	testb	$0x1, -0x1d8(%rbp)
00007fff2a629ce8	movq	%r8, -0x170(%rbp)
00007fff2a629cef	movq	%rdx, -0x1a0(%rbp)
00007fff2a629cf6	movl	%esi, -0x1d0(%rbp)
00007fff2a629cfc	jne	0x7fff2a629d22
00007fff2a629cfe	movb	$0x1, %cl
00007fff2a629d00	movq	%rcx, -0x1d8(%rbp)
00007fff2a629d07	movq	%rax, -0x1c8(%rbp)
00007fff2a629d0e	movl	%edx, %eax
00007fff2a629d10	movl	%edx, -0x178(%rbp)
00007fff2a629d16	movl	%r13d, %eax
00007fff2a629d19	movl	%r13d, -0x17c(%rbp)
00007fff2a629d20	jmp	0x7fff2a629d6a
00007fff2a629d22	movl	-0x178(%rbp), %ecx
00007fff2a629d28	cmpl	%edx, %ecx
00007fff2a629d2a	cmoval	%edx, %ecx
00007fff2a629d2d	movl	%ecx, -0x178(%rbp)
00007fff2a629d33	movq	%r13, %rcx
00007fff2a629d36	movl	-0x17c(%rbp), %edx
00007fff2a629d3c	cmpl	%ecx, %edx
00007fff2a629d3e	cmovbl	%ecx, %edx
00007fff2a629d41	movl	%edx, -0x17c(%rbp)
00007fff2a629d47	movq	-0x188(%rbp), %rcx
00007fff2a629d4e	cmpq	%r15, %rcx
00007fff2a629d51	cmovbeq	%rcx, %r15
00007fff2a629d55	movq	-0x1c8(%rbp), %rcx
00007fff2a629d5c	cmpq	%rax, %rcx
00007fff2a629d5f	cmovbq	%rax, %rcx
00007fff2a629d63	movq	%rcx, -0x1c8(%rbp)
00007fff2a629d6a	movq	-0x1f8(%rbp), %rdi
00007fff2a629d71	movl	$0x10, %edx
00007fff2a629d76	leaq	0x1d7c(%rip), %rsi              ## literal pool for: "__TEXT"
00007fff2a629d7d	callq	0x7fff2a62adb4                  ## symbol stub for: _strncmp
00007fff2a629d82	testl	%eax, %eax
00007fff2a629d84	jne	0x7fff2a629d9e
00007fff2a629d86	movl	$0x10, %edx
00007fff2a629d8b	movq	%r14, %rdi
00007fff2a629d8e	leaq	0x1d6b(%rip), %rsi              ## literal pool for: "__stubs"
00007fff2a629d95	callq	0x7fff2a62adb4                  ## symbol stub for: _strncmp
00007fff2a629d9a	testl	%eax, %eax
00007fff2a629d9c	je	0x7fff2a629e01
00007fff2a629d9e	movl	-0x1d0(%rbp), %eax
00007fff2a629da4	movl	%eax, %edi
00007fff2a629da6	movl	-0xf0(%rbp), %eax
00007fff2a629dac	movl	%eax, %r13d
00007fff2a629daf	movq	-0x130(%rbp), %rdx
00007fff2a629db6	movq	-0xe0(%rbp), %rax
00007fff2a629dbd	movq	-0x170(%rbp), %r8
00007fff2a629dc4	movq	-0x160(%rbp), %r10
00007fff2a629dcb	movq	-0x168(%rbp), %r11
00007fff2a629dd2	movq	-0x140(%rbp), %rcx
00007fff2a629dd9	addq	$0x50, %r14
00007fff2a629ddd	movl	%r13d, %r9d
00007fff2a629de0	movl	%r13d, -0xf0(%rbp)
00007fff2a629de7	movl	%edi, %esi
00007fff2a629de9	movq	%r15, -0x188(%rbp)
00007fff2a629df0	decq	%rcx
00007fff2a629df3	movq	%r10, %r9
00007fff2a629df6	jne	0x7fff2a629be8
00007fff2a629dfc	jmp	0x7fff2a629ee4
00007fff2a629e01	movq	%r15, -0xf0(%rbp)
00007fff2a629e08	movl	0x48(%r14), %ecx
00007fff2a629e0c	testl	%ecx, %ecx
00007fff2a629e0e	movq	-0xe0(%rbp), %r15
00007fff2a629e15	movq	-0x170(%rbp), %r8
00007fff2a629e1c	movq	-0x160(%rbp), %r10
00007fff2a629e23	movq	-0x168(%rbp), %r11
00007fff2a629e2a	je	0x7fff2a629e55
00007fff2a629e2c	movl	%r13d, %eax
00007fff2a629e2f	movq	-0x1a0(%rbp), %rdi
00007fff2a629e36	subl	%edi, %eax
00007fff2a629e38	xorl	%edx, %edx
00007fff2a629e3a	divl	%ecx
00007fff2a629e3c	testl	%edx, %edx
00007fff2a629e3e	movl	$0x0, %eax
00007fff2a629e43	cmovnel	%eax, %ecx
00007fff2a629e46	movl	%ecx, -0x194(%rbp)
00007fff2a629e4c	movq	-0x130(%rbp), %rdx
00007fff2a629e53	jmp	0x7fff2a629e6d
00007fff2a629e55	movl	$0x0, -0x194(%rbp)
00007fff2a629e5f	movq	-0x130(%rbp), %rdx
00007fff2a629e66	movq	-0x1a0(%rbp), %rdi
00007fff2a629e6d	movq	%r15, %rax
00007fff2a629e70	movq	-0x140(%rbp), %rcx
00007fff2a629e77	movq	-0xf0(%rbp), %r15
00007fff2a629e7e	jmp	0x7fff2a629dd9
00007fff2a629e83	xorl	%r15d, %r15d
00007fff2a629e86	xorl	%eax, %eax
00007fff2a629e88	movq	%rax, -0x1c8(%rbp)
00007fff2a629e8f	movl	$0x0, -0x178(%rbp)
00007fff2a629e99	movl	$0x0, -0x17c(%rbp)
00007fff2a629ea3	xorl	%eax, %eax
00007fff2a629ea5	movq	%rax, -0x1d8(%rbp)
00007fff2a629eac	movq	-0x130(%rbp), %rdx
00007fff2a629eb3	movq	-0xe0(%rbp), %rax
00007fff2a629eba	movq	-0x170(%rbp), %r8
00007fff2a629ec1	movq	-0x128(%rbp), %rbx
00007fff2a629ec8	movq	-0xf0(%rbp), %r13
00007fff2a629ecf	movq	-0x160(%rbp), %r9
00007fff2a629ed6	movq	-0x1a0(%rbp), %rdi
00007fff2a629edd	movq	-0x168(%rbp), %r11
00007fff2a629ee4	movq	%rax, -0xe0(%rbp)
00007fff2a629eeb	movq	%r8, -0x170(%rbp)
00007fff2a629ef2	movq	%rdi, -0x1a0(%rbp)
00007fff2a629ef9	movq	%r13, -0xf0(%rbp)
00007fff2a629f00	movq	-0x230(%rbp), %rdi
00007fff2a629f07	movzbl	%dil, %eax
00007fff2a629f0b	andb	$0x1, %dil
00007fff2a629f0f	testb	$0x1, -0x1d8(%rbp)
00007fff2a629f16	sete	%cl
00007fff2a629f19	orb	%dil, %cl
00007fff2a629f1c	movq	-0x1e0(%rbp), %rcx
00007fff2a629f23	cmoveq	%r15, %rcx
00007fff2a629f27	movq	%rcx, -0x1e0(%rbp)
00007fff2a629f2e	movq	-0x1e8(%rbp), %rcx
00007fff2a629f35	cmoveq	-0x1c8(%rbp), %rcx
00007fff2a629f3d	movq	%rcx, -0x1e8(%rbp)
00007fff2a629f44	movl	-0x190(%rbp), %ecx
00007fff2a629f4a	cmovel	-0x178(%rbp), %ecx
00007fff2a629f51	movl	%ecx, -0x190(%rbp)
00007fff2a629f57	movq	-0x120(%rbp), %rcx
00007fff2a629f5e	cmovel	-0x17c(%rbp), %ecx
00007fff2a629f65	movq	%rcx, -0x120(%rbp)
00007fff2a629f6c	movl	$0x1, %ecx
00007fff2a629f71	cmovel	%ecx, %eax
00007fff2a629f74	movq	%rax, -0x230(%rbp)
00007fff2a629f7b	movq	-0xe8(%rbp), %r14
00007fff2a629f82	movl	-0xd8(%rbp), %r8d
00007fff2a629f89	movq	-0x150(%rbp), %r15
00007fff2a629f90	movq	-0x148(%rbp), %r10
00007fff2a629f97	movl	-0x174(%rbp), %edi
00007fff2a629f9d	movq	-0x228(%rbp), %rsi
00007fff2a629fa4	movq	-0x108(%rbp), %r13
00007fff2a629fab	jmp	0x7fff2a629a14
00007fff2a629fb0	movl	$0x0, -0xd4(%rbp)
00007fff2a629fba	movq	-0xe8(%rbp), %r14
00007fff2a629fc1	movq	-0x160(%rbp), %r9
00007fff2a629fc8	movl	-0x174(%rbp), %edi
00007fff2a629fce	jmp	0x7fff2a629a14
00007fff2a629fd3	leaq	0x1882(%rip), %rcx              ## literal pool for: "two slices with the same cputype"
00007fff2a629fda	jmp	0x7fff2a629fe3
00007fff2a629fdc	leaq	0x1866(%rip), %rcx              ## literal pool for: "overlapping slices"
00007fff2a629fe3	movq	-0x128(%rbp), %rax
00007fff2a629fea	movq	%rcx, (%rax)
00007fff2a629fed	jmp	0x7fff2a629239
00007fff2a629ff2	leaq	0x19f3(%rip), %rax              ## literal pool for: "invalid Mach-O magic"
00007fff2a629ff9	jmp	0x7fff2a62a002
00007fff2a629ffb	leaq	0x19ff(%rip), %rax              ## literal pool for: "invalid cpu type/subtype"
00007fff2a62a002	movq	%rax, (%rbx)
00007fff2a62a005	xorl	%edx, %edx
00007fff2a62a007	xorl	%ebx, %ebx
00007fff2a62a009	movq	%rax, -0x130(%rbp)
00007fff2a62a010	movl	$0x0, %r11d
00007fff2a62a016	movq	%rsi, -0x108(%rbp)
00007fff2a62a01d	movq	%rsi, -0x110(%rbp)
00007fff2a62a024	movq	%rsi, -0x100(%rbp)
00007fff2a62a02b	movl	$0x0, %r10d
00007fff2a62a031	movq	%rsi, -0xe0(%rbp)
00007fff2a62a038	movq	%rsi, -0xf8(%rbp)
00007fff2a62a03f	xorl	%r9d, %r9d
00007fff2a62a042	orl	$0x1000000, %edx                ## imm = 0x1000000
00007fff2a62a048	movl	%edx, (%r12)
00007fff2a62a04c	movq	$0x0, 0x8(%r12)
00007fff2a62a055	movq	%r14, 0x10(%r12)
00007fff2a62a05a	movq	-0x218(%rbp), %rdx
00007fff2a62a061	movl	%edx, 0x18(%r12)
00007fff2a62a066	movl	$0x0, 0x1c(%r12)
00007fff2a62a06f	movq	-0x130(%rbp), %rdx
00007fff2a62a076	movl	%edx, 0x20(%r12)
00007fff2a62a07b	movl	-0xd8(%rbp), %edx
00007fff2a62a081	movl	%edx, 0x24(%r12)
00007fff2a62a086	movl	-0x138(%rbp), %edx
00007fff2a62a08c	movl	%edx, 0x28(%r12)
00007fff2a62a091	movq	-0x1a8(%rbp), %rdx
00007fff2a62a098	movq	%rdx, 0x30(%r12)
00007fff2a62a09d	movq	-0x1c0(%rbp), %rdx
00007fff2a62a0a4	movq	%rdx, 0x38(%r12)
00007fff2a62a0a9	shlq	$0x20, %rcx
00007fff2a62a0ad	orq	%rbx, %rcx
00007fff2a62a0b0	movq	%rcx, 0x40(%r12)
00007fff2a62a0b5	movq	-0x1e0(%rbp), %rcx
00007fff2a62a0bc	movq	%rcx, 0x48(%r12)
00007fff2a62a0c1	movq	-0x1e8(%rbp), %rcx
00007fff2a62a0c8	movq	%rcx, 0x50(%r12)
00007fff2a62a0cd	shlq	$0x20, %r13
00007fff2a62a0d1	orq	%r11, %r13
00007fff2a62a0d4	movq	%r13, 0x58(%r12)
00007fff2a62a0d9	movq	-0x148(%rbp), %rcx
00007fff2a62a0e0	movq	%rcx, 0x60(%r12)
00007fff2a62a0e5	movq	-0x150(%rbp), %rcx
00007fff2a62a0ec	movq	%rcx, 0x68(%r12)
00007fff2a62a0f1	shlq	$0x20, %rax
00007fff2a62a0f5	orq	%r10, %rax
00007fff2a62a0f8	movq	%rax, 0x70(%r12)
00007fff2a62a0fd	movl	-0x194(%rbp), %eax
00007fff2a62a103	movl	%eax, 0x78(%r12)
00007fff2a62a108	movq	-0x208(%rbp), %rax
00007fff2a62a10f	movq	%rax, 0x80(%r12)
00007fff2a62a117	movq	-0x210(%rbp), %rax
00007fff2a62a11e	movq	%rax, 0x88(%r12)
00007fff2a62a126	movq	-0x170(%rbp), %rax
00007fff2a62a12d	movq	%rax, 0x90(%r12)
00007fff2a62a135	movb	$0x1, 0x98(%r12)
00007fff2a62a13e	movl	-0x50(%rbp), %ecx
00007fff2a62a141	movl	%ecx, 0x9c(%r12)
00007fff2a62a149	movl	-0x53(%rbp), %ecx
00007fff2a62a14c	movl	%ecx, 0x99(%r12)
00007fff2a62a154	movq	-0x108(%rbp), %rax
00007fff2a62a15b	movb	%al, 0xa0(%r12)
00007fff2a62a163	movl	-0x71(%rbp), %ecx
00007fff2a62a166	movl	%ecx, 0xc0(%r12)
00007fff2a62a16e	movq	-0x78(%rbp), %rcx
00007fff2a62a172	movq	%rcx, 0xb9(%r12)
00007fff2a62a17a	movq	-0x80(%rbp), %rcx
00007fff2a62a17e	movq	%rcx, 0xb1(%r12)
00007fff2a62a186	movq	-0x88(%rbp), %rcx
00007fff2a62a18d	movq	%rcx, 0xa9(%r12)
00007fff2a62a195	movq	-0x90(%rbp), %rcx
00007fff2a62a19c	movq	%rcx, 0xa1(%r12)
00007fff2a62a1a4	movq	-0x110(%rbp), %rax
00007fff2a62a1ab	movb	%al, 0xc4(%r12)
00007fff2a62a1b3	movq	-0x100(%rbp), %rax
00007fff2a62a1ba	movb	%al, 0xc5(%r12)
00007fff2a62a1c2	movq	-0x1b8(%rbp), %rax
00007fff2a62a1c9	movq	%rax, 0xc8(%r12)
00007fff2a62a1d1	movq	-0xe0(%rbp), %rax
00007fff2a62a1d8	movb	%al, 0xd0(%r12)
00007fff2a62a1e0	movq	-0xa0(%rbp), %rcx
00007fff2a62a1e7	movq	%rcx, 0xd1(%r12)
00007fff2a62a1ef	movq	-0x98(%rbp), %rcx
00007fff2a62a1f6	movq	%rcx, 0xd9(%r12)
00007fff2a62a1fe	movq	-0xf8(%rbp), %rax
00007fff2a62a205	movb	%al, 0xe1(%r12)
00007fff2a62a20d	movzwl	-0xa8(%rbp), %ecx
00007fff2a62a214	movw	%cx, 0xf2(%r12)
00007fff2a62a21d	movq	-0xb0(%rbp), %rcx
00007fff2a62a224	movq	%rcx, 0xea(%r12)
00007fff2a62a22c	movq	-0xb8(%rbp), %rcx
00007fff2a62a233	movq	%rcx, 0xe2(%r12)
00007fff2a62a23b	movl	%edi, 0xf4(%r12)
00007fff2a62a243	movb	%r15b, 0xf8(%r12)
00007fff2a62a24b	movl	-0x25d(%rbp), %ecx
00007fff2a62a251	movl	%ecx, 0xfc(%r12)
00007fff2a62a259	movl	-0x260(%rbp), %ecx
00007fff2a62a25f	movl	%ecx, 0xf9(%r12)
00007fff2a62a267	movq	%rsi, 0x100(%r12)
00007fff2a62a26f	movb	%r8b, 0x108(%r12)
00007fff2a62a277	movl	-0x63(%rbp), %ecx
00007fff2a62a27a	movl	%ecx, 0x10c(%r12)
00007fff2a62a282	movl	-0x66(%rbp), %ecx
00007fff2a62a285	movl	%ecx, 0x109(%r12)
00007fff2a62a28d	movb	%r9b, 0x110(%r12)
00007fff2a62a295	movl	-0x23d(%rbp), %eax
00007fff2a62a29b	movl	%eax, 0x114(%r12)
00007fff2a62a2a3	movl	-0x240(%rbp), %eax
00007fff2a62a2a9	movl	%eax, 0x111(%r12)
00007fff2a62a2b1	jmp	0x7fff2a629159
00007fff2a62a2b6	leaq	0x1779(%rip), %rax              ## literal pool for: "load commands too large"
00007fff2a62a2bd	movq	%rax, (%rbx)
00007fff2a62a2c0	xorl	%r9d, %r9d
00007fff2a62a2c3	movq	%rax, -0x118(%rbp)
00007fff2a62a2ca	movl	%eax, -0xd4(%rbp)
00007fff2a62a2d0	movq	%rax, -0xf8(%rbp)
00007fff2a62a2d7	movq	%rax, -0xe0(%rbp)
00007fff2a62a2de	movl	$0x0, %r10d
00007fff2a62a2e4	movq	%rax, -0x100(%rbp)
00007fff2a62a2eb	movq	%rax, -0x110(%rbp)
00007fff2a62a2f2	movq	%rax, -0x108(%rbp)
00007fff2a62a2f9	movq	%rax, -0xf0(%rbp)
00007fff2a62a300	movl	$0x0, %r11d
00007fff2a62a306	xorl	%r15d, %r15d
00007fff2a62a309	movq	%rcx, -0x120(%rbp)
00007fff2a62a310	xorl	%edx, %edx
00007fff2a62a312	jmp	0x7fff2a62aac8
00007fff2a62a317	leaq	0x1591(%rip), %rcx              ## literal pool for: "slice overlaps with fat header"
00007fff2a62a31e	jmp	0x7fff2a629fe3
00007fff2a62a323	leaq	0x1568(%rip), %rcx              ## literal pool for: "integer overflow in fat data"
00007fff2a62a32a	jmp	0x7fff2a629fe3
00007fff2a62a32f	leaq	0x1547(%rip), %rcx              ## literal pool for: "slice is not aligned"
00007fff2a62a336	jmp	0x7fff2a629fe3
00007fff2a62a33b	leaq	0x16d8(%rip), %rax              ## literal pool for: "unsupported Mach-O filetype"
00007fff2a62a342	jmp	0x7fff2a62a002
00007fff2a62a347	xorl	%eax, %eax
00007fff2a62a349	movb	$0x1, %r11b
00007fff2a62a34c	movq	$-0x1, -0x1a8(%rbp)
00007fff2a62a357	xorl	%ecx, %ecx
00007fff2a62a359	movq	%rcx, -0x200(%rbp)
00007fff2a62a360	movl	$0x0, -0xd4(%rbp)
00007fff2a62a36a	movl	$0x0, -0x18c(%rbp)
00007fff2a62a374	xorl	%ecx, %ecx
00007fff2a62a376	movq	%rcx, -0x170(%rbp)
00007fff2a62a37d	xorl	%r10d, %r10d
00007fff2a62a380	xorl	%r15d, %r15d
00007fff2a62a383	movl	$0x0, -0x1ac(%rbp)
00007fff2a62a38d	xorl	%ecx, %ecx
00007fff2a62a38f	movq	%rcx, -0x1f0(%rbp)
00007fff2a62a396	xorl	%ecx, %ecx
00007fff2a62a398	movq	%rcx, -0x208(%rbp)
00007fff2a62a39f	xorl	%ecx, %ecx
00007fff2a62a3a1	movq	%rcx, -0x210(%rbp)
00007fff2a62a3a8	xorl	%ecx, %ecx
00007fff2a62a3aa	movq	%rcx, -0x1a0(%rbp)
00007fff2a62a3b1	xorl	%ecx, %ecx
00007fff2a62a3b3	movq	%rcx, -0xf0(%rbp)
00007fff2a62a3ba	xorl	%ecx, %ecx
00007fff2a62a3bc	movq	%rcx, -0x1e0(%rbp)
00007fff2a62a3c3	xorl	%ecx, %ecx
00007fff2a62a3c5	movq	%rcx, -0x1e8(%rbp)
00007fff2a62a3cc	movl	$0x0, -0x190(%rbp)
00007fff2a62a3d6	xorl	%ecx, %ecx
00007fff2a62a3d8	movq	%rcx, -0x120(%rbp)
00007fff2a62a3df	xorl	%esi, %esi
00007fff2a62a3e1	xorl	%ecx, %ecx
00007fff2a62a3e3	movq	%rcx, -0x1c0(%rbp)
00007fff2a62a3ea	xorl	%edi, %edi
00007fff2a62a3ec	xorl	%edx, %edx
00007fff2a62a3ee	xorl	%ecx, %ecx
00007fff2a62a3f0	movq	%rcx, -0xe0(%rbp)
00007fff2a62a3f7	xorl	%ecx, %ecx
00007fff2a62a3f9	movq	%rcx, -0x100(%rbp)
00007fff2a62a400	xorl	%ecx, %ecx
00007fff2a62a402	movq	%rcx, -0x110(%rbp)
00007fff2a62a409	xorl	%r13d, %r13d
00007fff2a62a40c	movl	$0x0, -0x194(%rbp)
00007fff2a62a416	xorl	%r9d, %r9d
00007fff2a62a419	jmp	0x7fff2a62a49a
00007fff2a62a41b	leaq	0x1647(%rip), %rax              ## literal pool for: "malformed load command"
00007fff2a62a422	jmp	0x7fff2a62a42b
00007fff2a62a424	leaq	0x1623(%rip), %rax              ## literal pool for: "out-of-bounds load command"
00007fff2a62a42b	movq	%rax, (%rbx)
00007fff2a62a42e	xorl	%r9d, %r9d
00007fff2a62a431	movq	%rax, -0x118(%rbp)
00007fff2a62a438	movl	%eax, -0xd4(%rbp)
00007fff2a62a43e	movq	%rax, -0xf8(%rbp)
00007fff2a62a445	movq	%rax, -0xe0(%rbp)
00007fff2a62a44c	movl	$0x0, %r10d
00007fff2a62a452	movq	%rax, -0x100(%rbp)
00007fff2a62a459	movq	%rax, -0x110(%rbp)
00007fff2a62a460	movq	%rax, -0x108(%rbp)
00007fff2a62a467	movq	%rax, -0xf0(%rbp)
00007fff2a62a46e	movl	$0x0, %r11d
00007fff2a62a474	xorl	%r15d, %r15d
00007fff2a62a477	movq	%rcx, -0x120(%rbp)
00007fff2a62a47e	xorl	%edx, %edx
00007fff2a62a480	jmp	0x7fff2a62aac2
00007fff2a62a485	addq	$-0x20, %rsi
00007fff2a62a489	xorl	%r11d, %r11d
00007fff2a62a48c	movq	-0x118(%rbp), %rax
00007fff2a62a493	movq	-0xf8(%rbp), %rdx
00007fff2a62a49a	cmpq	-0x270(%rbp), %rsi
00007fff2a62a4a1	jne	0x7fff2a62a4c7
00007fff2a62a4a3	movq	-0x110(%rbp), %rcx
00007fff2a62a4aa	andb	$0x1, %cl
00007fff2a62a4ad	movq	-0x100(%rbp), %rsi
00007fff2a62a4b4	cmpb	$0x1, %sil
00007fff2a62a4b8	jne	0x7fff2a62a52b
00007fff2a62a4ba	testb	%cl, %cl
00007fff2a62a4bc	jne	0x7fff2a62a52b
00007fff2a62a4be	leaq	0x1890(%rip), %rax              ## literal pool for: "executable is inconsistent about dynamic linking"
00007fff2a62a4c5	jmp	0x7fff2a62a4ce
00007fff2a62a4c7	leaq	0x1861(%rip), %rax              ## literal pool for: "Mach-O header sizeofcmds is incorrect"
00007fff2a62a4ce	movq	%rax, (%rbx)
00007fff2a62a4d1	xorl	%r9d, %r9d
00007fff2a62a4d4	movq	%rax, -0x118(%rbp)
00007fff2a62a4db	movl	%eax, -0xd4(%rbp)
00007fff2a62a4e1	movq	%rax, -0xf8(%rbp)
00007fff2a62a4e8	movq	%rax, -0xe0(%rbp)
00007fff2a62a4ef	movl	$0x0, %r10d
00007fff2a62a4f5	movq	%rax, -0x100(%rbp)
00007fff2a62a4fc	movq	%rax, -0x110(%rbp)
00007fff2a62a503	movq	%rax, -0x108(%rbp)
00007fff2a62a50a	movq	%rax, -0xf0(%rbp)
00007fff2a62a511	movl	$0x0, %r11d
00007fff2a62a517	xorl	%r15d, %r15d
00007fff2a62a51a	movq	%rcx, -0x120(%rbp)
00007fff2a62a521	xorl	%edx, %edx
00007fff2a62a523	movl	%r8d, %edi
00007fff2a62a526	jmp	0x7fff2a62aac8
00007fff2a62a52b	movq	%r12, -0x158(%rbp)
00007fff2a62a532	cmpb	$0x1, %sil
00007fff2a62a536	movq	%r14, -0xe8(%rbp)
00007fff2a62a53d	movl	%r8d, -0xd8(%rbp)
00007fff2a62a544	movq	%rax, -0x118(%rbp)
00007fff2a62a54b	movq	%rdx, -0xf8(%rbp)
00007fff2a62a552	movq	%rcx, -0x110(%rbp)
00007fff2a62a559	movq	%r13, -0x108(%rbp)
00007fff2a62a560	movq	%r15, -0x150(%rbp)
00007fff2a62a567	movq	%r10, -0x148(%rbp)
00007fff2a62a56e	jne	0x7fff2a62a58c
00007fff2a62a570	movq	%rbx, %r13
00007fff2a62a573	movq	-0x1a8(%rbp), %rax
00007fff2a62a57a	addq	%rax, -0x1b8(%rbp)
00007fff2a62a581	jae	0x7fff2a62a5ac
00007fff2a62a583	leaq	0x17fc(%rip), %rax              ## literal pool for: "invalid LC_MAIN entry point"
00007fff2a62a58a	jmp	0x7fff2a62a5e7
00007fff2a62a58c	movq	%r9, %r12
00007fff2a62a58f	movq	%rbx, %r13
00007fff2a62a592	testb	%sil, %sil
00007fff2a62a595	movq	-0x1b8(%rbp), %rax
00007fff2a62a59c	jne	0x7fff2a62a5b6
00007fff2a62a59e	jmp	0x7fff2a62a5c8
00007fff2a62a5a0	leaq	0x1561(%rip), %rax              ## literal pool for: "integer overflow in section boundaries"
00007fff2a62a5a7	jmp	0x7fff2a62a8c8
00007fff2a62a5ac	movq	%r9, %r12
00007fff2a62a5af	movq	-0x1b8(%rbp), %rax
00007fff2a62a5b6	cmpq	-0x1a8(%rbp), %rax
00007fff2a62a5bd	jb	0x7fff2a62a5e0
00007fff2a62a5bf	cmpq	%rax, -0x1c0(%rbp)
00007fff2a62a5c6	jbe	0x7fff2a62a5e0
00007fff2a62a5c8	movq	%rax, -0x1b8(%rbp)
00007fff2a62a5cf	cmpl	$0x100, %edi                    ## imm = 0x100
00007fff2a62a5d5	jb	0x7fff2a62a5ef
00007fff2a62a5d7	leaq	0x17d8(%rip), %rax              ## literal pool for: "Mach-O has too many segments"
00007fff2a62a5de	jmp	0x7fff2a62a5e7
00007fff2a62a5e0	leaq	0x17bb(%rip), %rax              ## literal pool for: "invalid entry point"
00007fff2a62a5e7	movq	%r13, %rbx
00007fff2a62a5ea	jmp	0x7fff2a62aa5e
00007fff2a62a5ef	leaq	0x17dd(%rip), %rax              ## literal pool for: "no segment mapping load commands"
00007fff2a62a5f6	movq	%rax, -0x128(%rbp)
00007fff2a62a5fd	testb	%r11b, %r11b
00007fff2a62a600	jne	0x7fff2a62aa54
00007fff2a62a606	leaq	-0x1(%r12), %rax
00007fff2a62a60b	movq	%rax, -0x140(%rbp)
00007fff2a62a612	movl	$0x20, %r9d
00007fff2a62a618	xorl	%eax, %eax
00007fff2a62a61a	movq	%rax, -0x188(%rbp)
00007fff2a62a621	xorl	%ecx, %ecx
00007fff2a62a623	movq	-0x138(%rbp), %rsi
00007fff2a62a62a	movq	%r9, %rdi
00007fff2a62a62d	movq	-0x138(%rbp), %rax
00007fff2a62a634	movl	0x4(%rax,%r9), %r9d
00007fff2a62a639	addq	%rdi, %r9
00007fff2a62a63c	cmpl	$0x19, (%rax,%rdi)
00007fff2a62a640	jne	0x7fff2a62a71b
00007fff2a62a646	movl	0x3c(%rax,%rdi), %eax
00007fff2a62a64a	cmpl	$0x7, %eax
00007fff2a62a64d	ja	0x7fff2a62aa46
00007fff2a62a653	movq	-0x138(%rbp), %rdx
00007fff2a62a65a	cmpl	$0x7, 0x38(%rdx,%rdi)
00007fff2a62a65f	ja	0x7fff2a62aa46
00007fff2a62a665	testl	%eax, %eax
00007fff2a62a667	je	0x7fff2a62a672
00007fff2a62a669	andl	$0x1, %eax
00007fff2a62a66c	je	0x7fff2a62aa46
00007fff2a62a672	movq	-0x138(%rbp), %rax
00007fff2a62a679	movq	0x28(%rax,%rdi), %rdx
00007fff2a62a67e	movq	0x30(%rax,%rdi), %rbx
00007fff2a62a683	testq	%rdx, %rdx
00007fff2a62a686	jne	0x7fff2a62a6b0
00007fff2a62a688	testq	%rbx, %rbx
00007fff2a62a68b	je	0x7fff2a62a6b0
00007fff2a62a68d	cmpq	-0x130(%rbp), %rbx
00007fff2a62a694	jb	0x7fff2a62aba8
00007fff2a62a69a	testb	$0x1, -0x188(%rbp)
00007fff2a62a6a1	movb	$0x1, %al
00007fff2a62a6a3	movq	%rax, -0x188(%rbp)
00007fff2a62a6aa	jne	0x7fff2a62abb4
00007fff2a62a6b0	leaq	0x1(%rcx), %r8
00007fff2a62a6b4	cmpq	%r12, %r8
00007fff2a62a6b7	jae	0x7fff2a62a721
00007fff2a62a6b9	addq	%rdx, %rbx
00007fff2a62a6bc	movq	0x18(%rsi,%rdi), %rax
00007fff2a62a6c1	movq	0x20(%rsi,%rdi), %rdi
00007fff2a62a6c6	addq	%rax, %rdi
00007fff2a62a6c9	movq	-0x140(%rbp), %r15
00007fff2a62a6d0	subq	%rcx, %r15
00007fff2a62a6d3	movq	%r9, %rcx
00007fff2a62a6d6	movl	0x4(%rsi,%rcx), %r11d
00007fff2a62a6db	cmpl	$0x19, (%rsi,%rcx)
00007fff2a62a6df	jne	0x7fff2a62a711
00007fff2a62a6e1	movq	0x18(%rsi,%rcx), %r10
00007fff2a62a6e6	movq	0x28(%rsi,%rcx), %r14
00007fff2a62a6eb	cmpq	%rbx, %r14
00007fff2a62a6ee	jae	0x7fff2a62a6fe
00007fff2a62a6f0	addq	0x30(%rsi,%rcx), %r14
00007fff2a62a6f5	cmpq	%r14, %rdx
00007fff2a62a6f8	jb	0x7fff2a62a9c0
00007fff2a62a6fe	cmpq	%rdi, %r10
00007fff2a62a701	jae	0x7fff2a62a711
00007fff2a62a703	addq	0x20(%rsi,%rcx), %r10
00007fff2a62a708	cmpq	%r10, %rax
00007fff2a62a70b	jb	0x7fff2a62a9c0
00007fff2a62a711	addq	%r11, %rcx
00007fff2a62a714	decq	%r15
00007fff2a62a717	jne	0x7fff2a62a6d6
00007fff2a62a719	jmp	0x7fff2a62a721
00007fff2a62a71b	incq	%rcx
00007fff2a62a71e	movq	%rcx, %r8
00007fff2a62a721	movq	%r8, %rcx
00007fff2a62a724	cmpq	%r12, %r8
00007fff2a62a727	jb	0x7fff2a62a62a
00007fff2a62a72d	testb	$0x1, -0x188(%rbp)
00007fff2a62a734	je	0x7fff2a62aa54
00007fff2a62a73a	movq	-0x138(%rbp), %rax
00007fff2a62a741	movl	0x18(%rax), %eax
00007fff2a62a744	movl	%eax, -0x138(%rbp)
00007fff2a62a74a	movl	-0x190(%rbp), %r15d
00007fff2a62a751	movl	-0x1ac(%rbp), %r11d
00007fff2a62a758	movl	-0x1a0(%rbp), %r10d
00007fff2a62a75f	movq	-0x108(%rbp), %rax
00007fff2a62a766	andb	$0x1, %al
00007fff2a62a768	movq	%rax, -0x108(%rbp)
00007fff2a62a76f	movq	-0x260(%rbp), %rax
00007fff2a62a776	movq	-0x258(%rbp), %rdx
00007fff2a62a77d	movq	%rax, -0x50(%rbp)
00007fff2a62a781	movq	%rdx, -0x48(%rbp)
00007fff2a62a785	movq	-0x250(%rbp), %rax
00007fff2a62a78c	movq	%rax, -0x40(%rbp)
00007fff2a62a790	movq	-0x248(%rbp), %rax
00007fff2a62a797	movq	%rax, -0x38(%rbp)
00007fff2a62a79b	movq	-0xe0(%rbp), %rax
00007fff2a62a7a2	andb	$0x1, %al
00007fff2a62a7a4	movq	%rax, -0xe0(%rbp)
00007fff2a62a7ab	movq	-0xf8(%rbp), %rax
00007fff2a62a7b2	andb	$0x1, %al
00007fff2a62a7b4	movq	%rax, -0xf8(%rbp)
00007fff2a62a7bb	movq	-0x240(%rbp), %rax
00007fff2a62a7c2	movq	-0x238(%rbp), %rdx
00007fff2a62a7c9	movq	%rax, -0x64(%rbp)
00007fff2a62a7cd	movq	%rdx, -0x5c(%rbp)
00007fff2a62a7d1	movl	-0x1cc(%rbp), %eax
00007fff2a62a7d7	shll	$0x8, %eax
00007fff2a62a7da	movzbl	-0x18c(%rbp), %ecx
00007fff2a62a7e1	orl	%eax, %ecx
00007fff2a62a7e3	movl	%ecx, -0x140(%rbp)
00007fff2a62a7e9	movq	-0x268(%rbp), %rax
00007fff2a62a7f0	shlq	$0x8, %rax
00007fff2a62a7f4	movzbl	-0x200(%rbp), %ecx
00007fff2a62a7fb	orq	%rax, %rcx
00007fff2a62a7fe	movq	%rcx, -0x188(%rbp)
00007fff2a62a805	movq	-0x53(%rbp), %rax
00007fff2a62a809	movq	%rax, -0x90(%rbp)
00007fff2a62a810	movq	-0x4b(%rbp), %rax
00007fff2a62a814	movq	%rax, -0x88(%rbp)
00007fff2a62a81b	movq	-0x43(%rbp), %rax
00007fff2a62a81f	movq	%rax, -0x80(%rbp)
00007fff2a62a823	movq	-0x3b(%rbp), %rax
00007fff2a62a827	movq	%rax, -0x78(%rbp)
00007fff2a62a82b	movl	-0x34(%rbp), %eax
00007fff2a62a82e	movl	%eax, -0x71(%rbp)
00007fff2a62a831	movdqa	-0xd0(%rbp), %xmm0
00007fff2a62a839	movdqa	%xmm0, -0xa0(%rbp)
00007fff2a62a841	movzwl	-0x56(%rbp), %eax
00007fff2a62a845	movw	%ax, -0xa8(%rbp)
00007fff2a62a84c	movq	-0x66(%rbp), %rax
00007fff2a62a850	movq	-0x5e(%rbp), %rdx
00007fff2a62a854	movq	%rdx, -0xb0(%rbp)
00007fff2a62a85b	movq	%rax, -0xb8(%rbp)
00007fff2a62a862	movl	$0xc, %edx
00007fff2a62a867	movb	$0x1, %r9b
00007fff2a62a86a	movq	%r13, %rbx
00007fff2a62a86d	movq	-0x158(%rbp), %r12
00007fff2a62a874	movq	-0xe8(%rbp), %r14
00007fff2a62a87b	movl	-0xd8(%rbp), %edi
00007fff2a62a881	movq	-0x1f0(%rbp), %r13
00007fff2a62a888	jmp	0x7fff2a62aac8
00007fff2a62a88d	leaq	0x11ec(%rip), %rax              ## literal pool for: "invalid LC_SEGMENT_64 command size"
00007fff2a62a894	movq	-0x128(%rbp), %rbx
00007fff2a62a89b	jmp	0x7fff2a62a8c8
00007fff2a62a89d	leaq	0x12d5(%rip), %rax              ## literal pool for: "malformed LC_UNIXTHREAD command"
00007fff2a62a8a4	jmp	0x7fff2a62a42b
00007fff2a62a8a9	leaq	0x136d(%rip), %rax              ## literal pool for: "LC_AOT_METADATA command is wrong size"
00007fff2a62a8b0	jmp	0x7fff2a62a9e5
00007fff2a62a8b5	leaq	0x1315(%rip), %rax              ## literal pool for: "multiple LC_LOAD_SIGNATURE commands"
00007fff2a62a8bc	jmp	0x7fff2a62a9e5
00007fff2a62a8c1	leaq	0x1267(%rip), %rax              ## literal pool for: "multiple load commands specify entry points"
00007fff2a62a8c8	movq	%rax, (%rbx)
00007fff2a62a8cb	xorl	%r9d, %r9d
00007fff2a62a8ce	movq	%rax, -0x118(%rbp)
00007fff2a62a8d5	movl	%eax, -0xd4(%rbp)
00007fff2a62a8db	movq	%rax, -0xf8(%rbp)
00007fff2a62a8e2	movq	%rax, -0xe0(%rbp)
00007fff2a62a8e9	movl	$0x0, %r10d
00007fff2a62a8ef	movq	%rax, -0x100(%rbp)
00007fff2a62a8f6	movq	%rax, -0x110(%rbp)
00007fff2a62a8fd	movq	%rax, -0x108(%rbp)
00007fff2a62a904	movq	%rax, -0xf0(%rbp)
00007fff2a62a90b	movl	$0x0, %r11d
00007fff2a62a911	xorl	%r15d, %r15d
00007fff2a62a914	movq	%rcx, -0x120(%rbp)
00007fff2a62a91b	xorl	%edx, %edx
00007fff2a62a91d	jmp	0x7fff2a62aabb
00007fff2a62a922	leaq	0x1206(%rip), %rax              ## literal pool for: "multiple load commands specify entry points"
00007fff2a62a929	movq	%rax, (%rbx)
00007fff2a62a92c	xorl	%r9d, %r9d
00007fff2a62a92f	movq	%rax, -0x118(%rbp)
00007fff2a62a936	movl	%eax, -0xd4(%rbp)
00007fff2a62a93c	movq	%rax, -0xf8(%rbp)
00007fff2a62a943	movq	%rax, -0xe0(%rbp)
00007fff2a62a94a	movl	$0x0, %r10d
00007fff2a62a950	movq	%rax, -0x100(%rbp)
00007fff2a62a957	movq	%rax, -0x110(%rbp)
00007fff2a62a95e	movq	%rax, -0x108(%rbp)
00007fff2a62a965	movq	%rax, -0xf0(%rbp)
00007fff2a62a96c	movl	$0x0, %r11d
00007fff2a62a972	xorl	%r15d, %r15d
00007fff2a62a975	movq	%rcx, -0x120(%rbp)
00007fff2a62a97c	xorl	%edx, %edx
00007fff2a62a97e	movq	-0xe8(%rbp), %r14
00007fff2a62a985	jmp	0x7fff2a62aac8
00007fff2a62a98a	leaq	0x1208(%rip), %rax              ## literal pool for: "multiple LC_UUID commands"
00007fff2a62a991	jmp	0x7fff2a62a9e5
00007fff2a62a993	leaq	0x12a9(%rip), %rax              ## literal pool for: "integer overflow in aot metadata load command fragment list"
00007fff2a62a99a	jmp	0x7fff2a62a9e5
00007fff2a62a99c	leaq	0x1252(%rip), %rax              ## literal pool for: "LC_CODE_SIGNATURE command is wrong size"
00007fff2a62a9a3	jmp	0x7fff2a62a9e5
00007fff2a62a9a5	leaq	0x11af(%rip), %rax              ## literal pool for: "LC_MAIN command is wrong size"
00007fff2a62a9ac	jmp	0x7fff2a62a9e5
00007fff2a62a9ae	leaq	0x11fe(%rip), %rax              ## literal pool for: "LC_UUID command is wrong size"
00007fff2a62a9b5	jmp	0x7fff2a62a9e5
00007fff2a62a9b7	leaq	0x12c1(%rip), %rax              ## literal pool for: "integer overflow in aot metadata load x86 image path"
00007fff2a62a9be	jmp	0x7fff2a62a9e5
00007fff2a62a9c0	leaq	0x142d(%rip), %rax              ## literal pool for: "overlapping Mach-O segments"
00007fff2a62a9c7	jmp	0x7fff2a62aa4d
00007fff2a62a9cc	leaq	0x130d(%rip), %rax              ## literal pool for: "LC_BUILD_VERSION command is wrong size"
00007fff2a62a9d3	jmp	0x7fff2a62a9e5
00007fff2a62a9d5	leaq	0x132b(%rip), %rax              ## literal pool for: "LC_SOURCE_VERSION command is wrong size"
00007fff2a62a9dc	jmp	0x7fff2a62a9e5
00007fff2a62a9de	leaq	0x12cf(%rip), %rax              ## literal pool for: "LC_VERSION_MIN_MACOSX command is wrong size"
00007fff2a62a9e5	movq	%rax, (%rbx)
00007fff2a62a9e8	xorl	%r9d, %r9d
00007fff2a62a9eb	movq	%rax, -0x118(%rbp)
00007fff2a62a9f2	movl	%eax, -0xd4(%rbp)
00007fff2a62a9f8	movq	%rax, -0xf8(%rbp)
00007fff2a62a9ff	movq	%rax, -0xe0(%rbp)
00007fff2a62aa06	movl	$0x0, %r10d
00007fff2a62aa0c	movq	%rax, -0x100(%rbp)
00007fff2a62aa13	movq	%rax, -0x110(%rbp)
00007fff2a62aa1a	movq	%rax, -0x108(%rbp)
00007fff2a62aa21	movq	%rax, -0xf0(%rbp)
00007fff2a62aa28	movl	$0x0, %r11d
00007fff2a62aa2e	xorl	%r15d, %r15d
00007fff2a62aa31	movq	%rcx, -0x120(%rbp)
00007fff2a62aa38	xorl	%edx, %edx
00007fff2a62aa3a	movq	-0xe8(%rbp), %r14
00007fff2a62aa41	jmp	0x7fff2a62a523
00007fff2a62aa46	leaq	0x1416(%rip), %rax              ## literal pool for: "invalid segment permissions"
00007fff2a62aa4d	movq	%rax, -0x128(%rbp)
00007fff2a62aa54	movq	%r13, %rbx
00007fff2a62aa57	movq	-0x128(%rbp), %rax
00007fff2a62aa5e	movq	%rax, (%r13)
00007fff2a62aa62	xorl	%r9d, %r9d
00007fff2a62aa65	movq	%rax, -0x118(%rbp)
00007fff2a62aa6c	movl	%eax, -0xd4(%rbp)
00007fff2a62aa72	movq	%rax, -0xf8(%rbp)
00007fff2a62aa79	movq	%rax, -0xe0(%rbp)
00007fff2a62aa80	movl	$0x0, %r10d
00007fff2a62aa86	movq	%rax, -0x100(%rbp)
00007fff2a62aa8d	movq	%rax, -0x110(%rbp)
00007fff2a62aa94	movq	%rax, -0x108(%rbp)
00007fff2a62aa9b	movq	%rax, -0xf0(%rbp)
00007fff2a62aaa2	movl	$0x0, %r11d
00007fff2a62aaa8	xorl	%r15d, %r15d
00007fff2a62aaab	movq	%rcx, -0x120(%rbp)
00007fff2a62aab2	xorl	%edx, %edx
00007fff2a62aab4	movq	-0x158(%rbp), %r12
00007fff2a62aabb	movq	-0xe8(%rbp), %r14
00007fff2a62aac2	movl	-0xd8(%rbp), %edi
00007fff2a62aac8	testb	%r9b, %r9b
00007fff2a62aacb	je	0x7fff2a62aae8
00007fff2a62aacd	movq	-0x218(%rbp), %rcx
00007fff2a62aad4	cmpl	%ecx, -0x130(%rbp)
00007fff2a62aada	jbe	0x7fff2a62ab1f
00007fff2a62aadc	leaq	0xe69(%rip), %rax               ## literal pool for: "out-of-bounds load commands"
00007fff2a62aae3	jmp	0x7fff2a62928e
00007fff2a62aae8	movq	-0x118(%rbp), %r8
00007fff2a62aaef	movq	%r15, %rbx
00007fff2a62aaf2	movl	-0xd4(%rbp), %r15d
00007fff2a62aaf9	movl	%edi, -0xd8(%rbp)
00007fff2a62aaff	movq	-0xf0(%rbp), %rax
00007fff2a62ab06	movq	-0x120(%rbp), %rcx
00007fff2a62ab0d	movq	-0x188(%rbp), %rsi
00007fff2a62ab14	movl	-0x140(%rbp), %edi
00007fff2a62ab1a	jmp	0x7fff2a62a042
00007fff2a62ab1f	movq	-0x120(%rbp), %rsi
00007fff2a62ab26	cmpl	%ecx, %esi
00007fff2a62ab28	jbe	0x7fff2a62ab36
00007fff2a62ab2a	leaq	0xe37(%rip), %rax               ## literal pool for: "insts interval is out-of-bounds"
00007fff2a62ab31	jmp	0x7fff2a62928e
00007fff2a62ab36	cmpl	%ecx, %r13d
00007fff2a62ab39	jbe	0x7fff2a62ab47
00007fff2a62ab3b	leaq	0xe46(%rip), %rax               ## literal pool for: "linkedit interval is out-of-bounds"
00007fff2a62ab42	jmp	0x7fff2a62928e
00007fff2a62ab47	movq	%rbx, -0x128(%rbp)
00007fff2a62ab4e	movq	-0xf0(%rbp), %rax
00007fff2a62ab55	cmpl	%ecx, %eax
00007fff2a62ab57	movq	-0x118(%rbp), %r8
00007fff2a62ab5e	movq	%r15, %rbx
00007fff2a62ab61	movq	%rsi, %rcx
00007fff2a62ab64	movl	-0xd4(%rbp), %r15d
00007fff2a62ab6b	movl	%edi, -0xd8(%rbp)
00007fff2a62ab71	movq	-0x188(%rbp), %rsi
00007fff2a62ab78	movl	-0x140(%rbp), %edi
00007fff2a62ab7e	jbe	0x7fff2a62a042
00007fff2a62ab84	leaq	0xe20(%rip), %rax               ## literal pool for: "dyld stubs interval is out-of-bounds"
00007fff2a62ab8b	movq	-0x128(%rbp), %rbx
00007fff2a62ab92	jmp	0x7fff2a62928e
00007fff2a62ab97	leaq	0xf1b(%rip), %rax               ## literal pool for: "multiple __LINKEDIT segments"
00007fff2a62ab9e	jmp	0x7fff2a62a894
00007fff2a62aba3	callq	0x7fff2a62acee                  ## symbol stub for: ___stack_chk_fail
00007fff2a62aba8	leaq	0x128f(%rip), %rax              ## literal pool for: "segment partially maps load commands"
00007fff2a62abaf	jmp	0x7fff2a62aa4d
00007fff2a62abb4	leaq	0x1255(%rip), %rax              ## literal pool for: "load commands are mapped by multiple segments"
00007fff2a62abbb	jmp	0x7fff2a62aa4d
00007fff2a62abc0	pushq	%rbp
00007fff2a62abc1	movq	%rsp, %rbp
00007fff2a62abc4	xorl	%r8d, %r8d
00007fff2a62abc7	testl	%edi, %edi
00007fff2a62abc9	sets	%r8b
00007fff2a62abcd	shlq	$0x7, %r8
00007fff2a62abd1	movq	%rdi, %rcx
00007fff2a62abd4	shrq	$0x18, %rcx
00007fff2a62abd8	movl	%ecx, %edx
00007fff2a62abda	andl	$0x40, %edx
00007fff2a62abdd	movl	%edi, %eax
00007fff2a62abdf	shrl	$0x1d, %eax
00007fff2a62abe2	andl	$0x1, %eax
00007fff2a62abe5	orq	%rdx, %rax
00007fff2a62abe8	movq	%rdi, %rdx
00007fff2a62abeb	shrq	$0x11, %rdx
00007fff2a62abef	andl	$0x800, %edx                    ## imm = 0x800
00007fff2a62abf5	orq	%rax, %rdx
00007fff2a62abf8	shrq	$0x17, %rdi
00007fff2a62abfc	andl	$0x10, %edi
00007fff2a62abff	orq	%rdx, %rdi
00007fff2a62ac02	andl	$0x4, %ecx
00007fff2a62ac05	movl	%esi, %eax
00007fff2a62ac07	andl	$0x2, %eax
00007fff2a62ac0a	shlq	$0x9, %rax
00007fff2a62ac0e	movl	%esi, %edx
00007fff2a62ac10	andl	$0x4, %edx
00007fff2a62ac13	shlq	$0x10, %rdx
00007fff2a62ac17	orq	%rax, %rdx
00007fff2a62ac1a	movl	%esi, %eax
00007fff2a62ac1c	andl	$0x8, %eax
00007fff2a62ac1f	shlq	$0x12, %rax
00007fff2a62ac23	orq	%rdx, %rax
00007fff2a62ac26	andl	$0x10, %esi
00007fff2a62ac29	shlq	$0x4, %rsi
00007fff2a62ac2d	orq	%rax, %rsi
00007fff2a62ac30	orq	%rdi, %rcx
00007fff2a62ac33	leaq	0x202(%r8,%rcx), %rax
00007fff2a62ac3b	orq	%rsi, %rax
00007fff2a62ac3e	xorq	$0x1, %rax
00007fff2a62ac42	popq	%rbp
00007fff2a62ac43	retq
00007fff2a62ac44	nopw	%cs:(%rax,%rax)
00007fff2a62ac4e	nop
00007fff2a62ac50	pushq	%rcx
00007fff2a62ac51	pushq	%rax
00007fff2a62ac52	movq	0x5d21d55f(%rip), %rcx          ## literal pool symbol address: ____chkstk_darwin
00007fff2a62ac59	testq	%rcx, %rcx
00007fff2a62ac5c	jne	0x7fff2a62ac65
00007fff2a62ac5e	leaq	0xb(%rip), %rcx
00007fff2a62ac65	callq	*%rcx
00007fff2a62ac67	popq	%rax
00007fff2a62ac68	popq	%rcx
00007fff2a62ac69	retq
00007fff2a62ac6a	nopw	(%rax,%rax)
00007fff2a62ac70	cmpq	$0x1000, %rax                   ## imm = 0x1000
00007fff2a62ac76	leaq	0x18(%rsp), %rcx
00007fff2a62ac7b	jb	0x7fff2a62ac94
00007fff2a62ac7d	subq	$0x1000, %rcx                   ## imm = 0x1000
00007fff2a62ac84	testb	%cl, (%rcx)
00007fff2a62ac86	subq	$0x1000, %rax                   ## imm = 0x1000
00007fff2a62ac8c	cmpq	$0x1000, %rax                   ## imm = 0x1000
00007fff2a62ac92	ja	0x7fff2a62ac7d
00007fff2a62ac94	subq	%rax, %rcx
00007fff2a62ac97	testb	%cl, (%rcx)
00007fff2a62ac99	retq
